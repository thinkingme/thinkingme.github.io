"use strict";(self.webpackChunkcoding_road=self.webpackChunkcoding_road||[]).push([[7940],{37062:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-37329722",path:"/coding-road/java-core/jvm/zijiema-zhiling.html",title:"JVM 字节码指令详解",lang:"zh-CN",frontmatter:{category:["Java核心","JVM"],tag:["Java"],summary:"JVM 字节码指令详解 大家好，我是二哥呀。Java 字节码指令是 JVM 体系中非常难啃的一块硬骨头，我估计有些读者会有这样的疑惑，“Java 字节码难学吗？我能不能学会啊？” 讲良心话，不是我谦虚，一开始学 Java 字节码和 Java 虚拟机方面的知识我也感觉头大！但硬着头皮学了一阵子之后，突然就开窍了，觉得好有意思，尤其是明白了 Java 代码在底层",head:[["meta",{property:"og:url",content:"https://vuepress-theme-hope-v2-demo.mrhope.site/coding-road/java-core/jvm/zijiema-zhiling.html"}],["meta",{property:"og:site_name",content:"coding-rode"}],["meta",{property:"og:title",content:"JVM 字节码指令详解"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-06-04T07:20:53.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:tag",content:"Java"}],["meta",{property:"article:modified_time",content:"2022-06-04T07:20:53.000Z"}]]},excerpt:"",headers:[{level:3,title:"01、加载与存储指令",slug:"_01、加载与存储指令",children:[]},{level:3,title:"02、算术指令",slug:"_02、算术指令",children:[]},{level:3,title:"03、类型转换指令",slug:"_03、类型转换指令",children:[]},{level:3,title:"04、对象的创建和访问指令",slug:"_04、对象的创建和访问指令",children:[]},{level:3,title:"05、方法调用和返回指令",slug:"_05、方法调用和返回指令",children:[]},{level:3,title:"06、操作数栈管理指令",slug:"_06、操作数栈管理指令",children:[]},{level:3,title:"07、控制转移指令",slug:"_07、控制转移指令",children:[]}],git:{createdTime:1653617096e3,updatedTime:1654327253e3,contributors:[{name:"林振辉",email:"linzhenhui@apexsoft.com",commits:2}]},readingTime:{minutes:16.99,words:5097},filePathRelative:"coding-road/java-core/jvm/zijiema-zhiling.md"}},69964:(n,a,s)=>{s.r(a),s.d(a,{default:()=>u});var e=s(95393);const t=(0,e.uE)('<h1 id="jvm-字节码指令详解" tabindex="-1"><a class="header-anchor" href="#jvm-字节码指令详解" aria-hidden="true">#</a> JVM 字节码指令详解</h1><p>大家好，我是二哥呀。Java 字节码指令是 JVM 体系中非常难啃的一块硬骨头，我估计有些读者会有这样的疑惑，“Java 字节码难学吗？我能不能学会啊？”</p><p>讲良心话，不是我谦虚，一开始学 Java 字节码和 Java 虚拟机方面的知识我也感觉头大！但硬着头皮学了一阵子之后，突然就开窍了，觉得好有意思，尤其是明白了 Java 代码在底层竟然是这样执行的时候，感觉既膨胀又飘飘然，浑身上下散发着自信的光芒！</p><p>Java 官方的虚拟机 Hotspot 是基于栈的，而不是基于寄存器的。</p><p>基于栈的优点是可移植性更好、指令更短、实现起来简单，但不能随机访问栈中的元素，完成相同功能所需要的指令数也比寄存器的要多，需要频繁的入栈和出栈。</p><p>基于寄存器的优点是速度快，有利于程序运行速度的优化，但操作数需要显式指定，指令也比较长。</p><p>Java 字节码由操作码和操作数组成。</p><ul><li>操作码（Opcode）：一个字节长度（0-255，意味着指令集的操作码总数不可能超过 256 条），代表着某种特定的操作含义。</li><li>操作数（Operands）：零个或者多个，紧跟在操作码之后，代表此操作需要的参数。</li></ul><p>由于 Java 虚拟机是基于栈而不是寄存器的结构，所以大多数指令都只有一个操作码。比如 <code>aload_0</code>（将局部变量表中下标为 0 的数据压入操作数栈中）就只有操作码没有操作数，而 <code>invokespecial #1</code>（调用成员方法或者构造方法，并传递常量池中下标为 1 的常量）就是由操作码和操作数组成的。</p><h3 id="_01、加载与存储指令" tabindex="-1"><a class="header-anchor" href="#_01、加载与存储指令" aria-hidden="true">#</a> 01、加载与存储指令</h3><p>加载（load）和存储（store）相关的指令是使用最频繁的指令，用于将数据从栈帧的局部变量表和操作数栈之间来回传递。</p><p><strong>1）将局部变量表中的变量压入操作数栈中</strong></p><ul><li><code>xload_&lt;n&gt;</code>（x 为 i、l、f、d、a，n 默认为 0 到 3），表示将第 n 个局部变量压入操作数栈中。</li><li>xload（x 为 i、l、f、d、a），通过指定参数的形式，将局部变量压入操作数栈中，当使用这个指令时，表示局部变量的数量可能超过了 4 个</li></ul><p>解释一下。</p><p>x 为操作码助记符，表明是哪一种数据类型。见下表所示。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zijiema-zhiling-879da2f2-fb72-48a9-985e-5a28a9fc8814.png" alt="" loading="lazy"></p><p>像 arraylength 指令，没有操作码助记符，它没有代表数据类型的特殊字符，但操作数只能是一个数组类型的对象。</p><p>大部分的指令都不支持 byte、short 和 char，甚至没有任何指令支持 boolean 类型。编译器会将 byte 和 short 类型的数据带符号扩展（Sign-Extend）为 int 类型，将 boolean 和 char 零位扩展（Zero-Extend）为 int 类型。</p><p>举例来说。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">long</span> birthday<span class="token punctuation">,</span> <span class="token keyword">boolean</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age <span class="token operator">+</span> name <span class="token operator">+</span> birthday <span class="token operator">+</span> sex<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 jclasslib 看一下 <code>load()</code> 方法（4 个参数）的字节码指令。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zijiema-zhiling-05bfae95-2a33-402c-9041-570093729c42.png" alt="" loading="lazy"></p><ul><li>iload_1：将局部变量表中下标为 1 的 int 变量压入操作数栈中。</li><li>aload_2：将局部变量表中下标为 2 的引用数据类型变量（此时为 String）压入操作数栈中。</li><li>lload_3：将局部变量表中下标为 3 的 long 型变量压入操作数栈中。</li><li>iload 5：将局部变量表中下标为 5 的 int 变量（实际为 boolean）压入操作数栈中。</li></ul><p>通过查看局部变量表就能关联上了。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zijiema-zhiling-79d74946-ce9e-41d4-b889-bda861f847bc.png" alt="" loading="lazy"></p><p><strong>2）将常量池中的常量压入操作数栈中</strong></p><p>根据数据类型和入栈内容的不同，此类又可以细分为 const 系列、push 系列和 Idc 指令。</p><p><strong>const 系列</strong>，用于特殊的常量入栈，要入栈的常量隐含在指令本身。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zijiema-zhiling-270c314d-872b-43b0-861f-417eafc046fd.png" alt="" loading="lazy"></p><p><strong>push 系列</strong>，主要包括 bipush 和 sipush，前者接收 8 位整数作为参数，后者接收 16 位整数。</p><p><strong>Idc 指令</strong>，当 const 和 push 不能满足的时候，万能的 Idc 指令就上场了，它接收一个 8 位的参数，指向常量池中的索引。</p><ul><li><code>Idc_w</code>：接收两个 8 位数，索引范围更大。</li><li>如果参数是 long 或者 double，使用 <code>Idc2_w</code> 指令。</li></ul><p>举例来说。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pushConstLdc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 范围 [-1,5]</span>\n    <span class="token keyword">int</span> iconst <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token comment">// 范围 [-128,127]</span>\n    <span class="token keyword">int</span> bipush <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>\n    <span class="token comment">// 范围 [-32768,32767]</span>\n    <span class="token keyword">int</span> sipush<span class="token operator">=</span> <span class="token number">32767</span><span class="token punctuation">;</span>\n    <span class="token comment">// 其他 int</span>\n    <span class="token keyword">int</span> ldc <span class="token operator">=</span> <span class="token number">32768</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> aconst <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> <span class="token class-name">IdcString</span> <span class="token operator">=</span> <span class="token string">&quot;沉默王二&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 jclasslib 看一下 <code>pushConstLdc()</code> 方法的字节码指令。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zijiema-zhiling-b34fc802-18bb-46a1-8d24-de2087c9b6bf.png" alt="" loading="lazy"></p><ul><li>iconst_m1：将 -1 入栈。范围 [-1,5]。</li><li>bipush 127：将 127 入栈。范围 [-128,127]。</li><li>sipush 32767：将 32767 入栈。范围 [-32768,32767]。</li><li>ldc #6 &lt;32768&gt;：将常量池中下标为 6 的常量 32768 入栈。</li><li>aconst_null：将 null 入栈。</li><li>ldc #7 &lt;沉默王二&gt;：将常量池中下标为 7 的常量“沉默王二”入栈。</li></ul><p><strong>3）将栈顶的数据出栈并装入局部变量表中</strong></p><p>主要是用来给局部变量赋值，这类指令主要以 store 的形式存在。</p><ul><li><code>xstore_&lt;n&gt;</code>（x 为 i、l、f、d、a，n 默认为 0 到 3）</li><li>xstore（x 为 i、l、f、d、a）</li></ul><p>明白了 <code>xload_&lt;n&gt;</code> 和 xload，再看 <code>xstore_&lt;n&gt;</code> 和 xstore 就会轻松得多，作用反了一下而已。</p><p>大家来想一个问题，为什么要有 <code>xstore_&lt;n&gt;</code> 和 <code>xload_&lt;n&gt;</code> 呢？它们的作用和 xstore n、xload n 不是一样的吗？</p><p><code>xstore_&lt;n&gt;</code> 和 xstore n 的区别在于，前者相当于只有操作码，占用 1 个字节；后者相当于由操作码和操作数组成，操作码占 1 个字节，操作数占 2 个字节，一共占 3 个字节。</p><p>由于局部变量表中前几个位置总是非常常用，虽然 <code>xstore_&lt;n&gt;</code> 和 <code>xload_&lt;n&gt;</code> 增加了指令数量，但字节码的体积变小了！</p><p>举例来说。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> temp <span class="token operator">=</span> age <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> str <span class="token operator">=</span> name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 jclasslib 看一下 <code>store()</code> 方法的字节码指令。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zijiema-zhiling-d955468c-d07d-47cd-b82b-c03ecea8753d.png" alt="" loading="lazy"></p><ul><li>istore_3：从操作数中弹出一个整数，并把它赋值给局部变量表中索引为 3 的变量。</li><li>astore 4：从操作数中弹出一个引用数据类型，并把它赋值给局部变量表中索引为 4 的变量。</li></ul><p>通过查看局部变量表就能关联上了。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zijiema-zhiling-a08c20cb-c148-47c9-91e2-df37e68989a9.png" alt="" loading="lazy"></p><h3 id="_02、算术指令" tabindex="-1"><a class="header-anchor" href="#_02、算术指令" aria-hidden="true">#</a> 02、算术指令</h3><p>算术指令用于对两个操作数栈上的值进行某种特定运算，并把结果重新压入操作数栈。可以分为两类：整型数据的运算指令和浮点数据的运算指令。</p><p>需要注意的是，<strong>数据运算可能会导致溢出</strong>，比如两个很大的正整数相加，很可能会得到一个负数。但 Java 虚拟机规范中并没有对这种情况给出具体结果，因此程序是不会显式报错的。所以，大家在开发过程中，如果涉及到较大的数据进行加法、乘法运算的时候，一定要注意！</p><p>当发生溢出时，将会使用有符号的无穷大 Infinity 来表示；如果某个操作结果没有明确的数学定义的话，将会使用 NaN 值来表示。而且所有使用 NaN 作为操作数的算术操作，结果都会返回 NaN。</p><p>举例来说。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">infinityNaN</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n    <span class="token keyword">double</span> j <span class="token operator">=</span> i <span class="token operator">/</span> <span class="token number">0.0</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Infinity</span>\n\n    <span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>\n    <span class="token keyword">double</span> d2 <span class="token operator">=</span> d1 <span class="token operator">/</span> <span class="token number">0.0</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>任何一个非零的数除以浮点数 0（注意不是 int 类型），可以想象结果是无穷大 Infinity 的。</li><li>把这个非零的数换成 0 的时候，结果又不太好定义，就用 NaN 值来表示。</li></ul><p>Java 虚拟机提供了两种<strong>运算模式</strong>：</p><ul><li>向最接近数舍入：在进行浮点数运算时，所有的结果都必须舍入到一个适当的精度，不是特别精确的结果必须舍入为可被表示的最接近的精确值，如果有两种可表示的形式与该值接近，将优先选择最低有效位为零的（类似四舍五入）。</li><li>向零舍入：将浮点数转换为整数时，采用该模式，该模式将在目标数值类型中选择一个最接近但是不大于原值的数字作为最精确的舍入结果（类似取整）。</li></ul><p>我把所有的算术指令列一下：</p><ul><li>加法指令：iadd、ladd、fadd、dadd</li><li>减法指令：isub、lsub、fsub、dsub</li><li>乘法指令：imul、lmul、fmul、dmul</li><li>除法指令：idiv、ldiv、fdiv、ddiv</li><li>求余指令：irem、lrem、frem、drem</li><li>自增指令：iinc</li></ul><p>举例来说。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> add <span class="token operator">=</span> age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> sub <span class="token operator">=</span> age <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> mul <span class="token operator">=</span> age <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> div <span class="token operator">=</span> age <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> rem <span class="token operator">=</span> age <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span>\n    age<span class="token operator">++</span><span class="token punctuation">;</span>\n    age<span class="token operator">--</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 jclasslib 看一下 <code>calculate()</code> 方法的字节码指令。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zijiema-zhiling-598e4204-fd77-425b-b536-1e001cda8e13.png" alt="" loading="lazy"></p><ul><li>iadd，加法</li><li>isub，减法</li><li>imul，乘法</li><li>idiv，除法</li><li>irem，取余</li><li>iinc，自增的时候 +1，自减的时候 -1</li></ul><h3 id="_03、类型转换指令" tabindex="-1"><a class="header-anchor" href="#_03、类型转换指令" aria-hidden="true">#</a> 03、类型转换指令</h3><p>可以分为两种：</p><p>1）宽化，小类型向大类型转换，比如 <code>int–&gt;long–&gt;float–&gt;double</code>，对应的指令有：i2l、i2f、i2d、l2f、l2d、f2d。</p><ul><li>从 int 到 long，或者从 int 到 double，是不会有精度丢失的；</li><li>从 int、long 到 float，或者 long 到 double 时，可能会发生精度丢失；</li><li>从 byte、char 和 short 到 int 的宽化类型转换实际上是隐式发生的，这样可以减少字节码指令，毕竟字节码指令只有 256 个，占一个字节。</li></ul><p>2）窄化，大类型向小类型转换，比如从 int 类型到 byte、short 或者 char，对应的指令有：i2b、i2s、i2c；从 long 到 int，对应的指令有：l2i；从 float 到 int 或者 long，对应的指令有：f2i、f2l；从 double 到 int、long 或者 float，对应的指令有：d2i、d2l、d2f。</p><ul><li>窄化很可能会发生精度丢失，毕竟是不同的数量级；</li><li>但 Java 虚拟机并不会因此抛出运行时异常。</li></ul><p>举例来说。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n    <span class="token keyword">double</span> d <span class="token operator">=</span> i<span class="token punctuation">;</span>\n\n    <span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">10f</span><span class="token punctuation">;</span>\n    <span class="token keyword">long</span> ong <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>f<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 jclasslib 看一下 <code>updown()</code> 方法的字节码指令。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zijiema-zhiling-0c3e47c6-1e25-4926-a838-20cf146a8993.png" alt="" loading="lazy"></p><ul><li>i2d，int 宽化为 double</li><li>f2l， float 窄化为 long</li></ul><h3 id="_04、对象的创建和访问指令" tabindex="-1"><a class="header-anchor" href="#_04、对象的创建和访问指令" aria-hidden="true">#</a> 04、对象的创建和访问指令</h3><p>Java 是一门面向对象的编程语言，那么 Java 虚拟机是如何从字节码层面进行支持的呢？</p><p><strong>1）创建指令</strong></p><p>数组也是一种对象，但它创建的字节码指令和普通的对象不同。创建数组的指令有三种：</p><ul><li>newarray：创建基本数据类型的数组</li><li>anewarray：创建引用类型的数组</li><li>multianewarray：创建多维数组</li></ul><p>普通对象的创建指令只有一个，就是 <code>new</code>，它会接收一个操作数，指向常量池中的一个索引，表示要创建的类型。</p><p>举例来说。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">newObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;沉默王二&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;无愁河的浪荡汉子.book&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> ages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 jclasslib 看一下 <code>newObject()</code> 方法的字节码指令。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zijiema-zhiling-8125da3d-876c-43fe-8347-cb2341408088.png" alt="" loading="lazy"></p><ul><li><code>new #13 &lt;java/lang/String&gt;</code>，创建一个 String 对象。</li><li><code>new #15 &lt;java/io/File&gt;</code>，创建一个 File 对象。</li><li><code>newarray 10 (int)</code>，创建一个 int 类型的数组。</li></ul><p><strong>2）字段访问指令</strong></p><p>字段可以分为两类，一类是成员变量，一类是静态变量（static 关键字修饰的），所以字段访问指令可以分为两类：</p><ul><li>访问静态变量：getstatic、putstatic。</li><li>访问成员变量：getfield、putfield，需要创建对象后才能访问。</li></ul><p>举例来说。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Writer</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">static</span> <span class="token class-name">String</span> mark <span class="token operator">=</span> <span class="token string">&quot;作者&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">print</span><span class="token punctuation">(</span>mark<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Writer</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Writer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">print</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 jclasslib 看一下 <code>main()</code> 方法的字节码指令。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zijiema-zhiling-70441cfc-7c6e-4a5e-b0dd-818fc3fa1a67.png" alt="" loading="lazy"></p><ul><li><code>getstatic #2 &lt;com/itwanger/jvm/Writer.mark&gt;</code>，访问静态变量 mark</li><li><code>getfield #6 &lt;com/itwanger/jvm/Writer.name&gt;</code>，访问成员变量 name</li></ul><h3 id="_05、方法调用和返回指令" tabindex="-1"><a class="header-anchor" href="#_05、方法调用和返回指令" aria-hidden="true">#</a> 05、方法调用和返回指令</h3><p>方法调用指令有 5 个，分别用于不同的场景：</p><ul><li>invokevirtual：用于调用对象的成员方法，根据对象的实际类型进行分派，支持多态。</li><li>invokeinterface：用于调用接口方法，会在运行时搜索由特定对象实现的接口方法进行调用。</li><li>invokespecial：用于调用一些需要特殊处理的方法，包括构造方法、私有方法和父类方法。</li><li>invokestatic：用于调用静态方法。</li><li>invokedynamic：用于在运行时动态解析出调用点限定符所引用的方法，并执行。</li></ul><p>举例来说。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InvokeExamples</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">List</span> ls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        ls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;难顶&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">ArrayList</span> als <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        als<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;学不动了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;invokestatic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">InvokeExamples</span> invoke <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvokeExamples</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        invoke<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们用 <code>javap -c InvokeExamples.class</code> 来反编译一下。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Compiled from &quot;InvokeExamples.java&quot;\npublic class com.itwanger.jvm.InvokeExamples {\n  public com.itwanger.jvm.InvokeExamples();\n    Code:\n       0: aload_0\n       1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V\n       4: return\n\n  private void run();\n    Code:\n       0: new           #2                  // class java/util/ArrayList\n       3: dup\n       4: invokespecial #3                  // Method java/util/ArrayList.&quot;&lt;init&gt;&quot;:()V\n       7: astore_1\n       8: aload_1\n       9: ldc           #4                  // String 难顶\n      11: invokeinterface #5,  2            // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n      16: pop\n      17: new           #2                  // class java/util/ArrayList\n      20: dup\n      21: invokespecial #3                  // Method java/util/ArrayList.&quot;&lt;init&gt;&quot;:()V\n      24: astore_2\n      25: aload_2\n      26: ldc           #6                  // String 学不动了\n      28: invokevirtual #7                  // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z\n      31: pop\n      32: return\n\n  public static void print();\n    Code:\n       0: getstatic     #8                  // Field java/lang/System.out:Ljava/io/PrintStream;\n       3: ldc           #9                  // String invokestatic\n       5: invokevirtual #10                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n       8: return\n\n  public static void main(java.lang.String[]);\n    Code:\n       0: invokestatic  #11                 // Method print:()V\n       3: new           #12                 // class com/itwanger/jvm/InvokeExamples\n       6: dup\n       7: invokespecial #13                 // Method &quot;&lt;init&gt;&quot;:()V\n      10: astore_1\n      11: aload_1\n      12: invokevirtual #14                 // Method run:()V\n      15: return\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>InvokeExamples 类有 4 个方法，包括缺省的构造方法在内。</p><p>1）<code>InvokeExamples()</code> 构造方法中</p><p>缺省的构造方法内部会调用超类 Object 的初始化构造方法：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>`invokespecial #1 // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2）成员方法 <code>run()</code> 中</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>invokeinterface #5,  2  // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由于 ls 变量的引用类型为接口 List，所以 <code>ls.add()</code> 调用的是 <code>invokeinterface</code> 指令，等运行时再确定是不是接口 List 的实现对象 ArrayList 的 <code>add()</code> 方法。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>invokevirtual #7 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由于 als 变量的引用类型已经确定为 ArrayList，所以 <code>als.add()</code> 方法调用的是 <code>invokevirtual</code> 指令。</p><p>3）<code>main()</code> 方法中</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>invokestatic  #11 // Method print:()V\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>print()</code> 方法是静态的，所以调用的是 <code>invokestatic</code> 指令。</p><p>方法返回指令根据方法的返回值类型进行区分，常见的返回指令见下图。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zijiema-zhiling-37513fa2-fdba-45db-adfc-c18225c6ff8b.png" alt="" loading="lazy"></p><h3 id="_06、操作数栈管理指令" tabindex="-1"><a class="header-anchor" href="#_06、操作数栈管理指令" aria-hidden="true">#</a> 06、操作数栈管理指令</h3><p>常见的操作数栈管理指令有 pop、dup 和 swap。</p><ul><li>将一个或两个元素从栈顶弹出，并且直接废弃，比如 pop，pop2；</li><li>复制栈顶的一个或两个数值并将其重新压入栈顶，比如 dup，dup2，dup<em>×1，dup2</em>×1，dup<em>×2，dup2</em>×2；</li><li>将栈最顶端的两个槽中的数值交换位置，比如 swap。</li></ul><p>这些指令不需要指明数据类型，因为是按照位置压入和弹出的。</p><p>举例来说。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dup</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">incAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token operator">++</span>age<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 jclasslib 看一下 <code>incAndGet()</code> 方法的字节码指令。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zijiema-zhiling-642ca54e-5808-428d-9840-ebf478e95c17.png" alt="" loading="lazy"></p><ul><li>aload_0：将 this 入栈。</li><li>dup：复制栈顶的 this。</li><li>getfield #2：将常量池中下标为 2 的常量加载到栈上，同时将一个 this 出栈。</li><li>iconst_1：将常量 1 入栈。</li><li>iadd：将栈顶的两个值相加后出栈，并将结果放回栈上。</li><li>dup_x1：复制栈顶的元素，并将其插入 this 下面。</li><li>putfield #2： 将栈顶的两个元素出栈，并将其赋值给字段 age。</li><li>ireturn：将栈顶的元素出栈返回。</li></ul><h3 id="_07、控制转移指令" tabindex="-1"><a class="header-anchor" href="#_07、控制转移指令" aria-hidden="true">#</a> 07、控制转移指令</h3><p>控制转移指令包括：</p><ul><li>比较指令，比较栈顶的两个元素的大小，并将比较结果入栈。</li><li>条件跳转指令，通常和比较指令一块使用，在条件跳转指令执行前，一般先用比较指令进行栈顶元素的比较，然后进行条件跳转。</li><li>比较条件转指令，类似于比较指令和条件跳转指令的结合体，它将比较和跳转两个步骤合二为一。</li><li>多条件分支跳转指令，专为 switch-case 语句设计的。</li><li>无条件跳转指令，目前主要是 goto 指令。</li></ul><p><strong>1）比较指令</strong></p><p>比较指令有：dcmpg，dcmpl、fcmpg、fcmpl、lcmp，指令的第一个字母代表的含义分别是 double、float、long。注意，没有 int 类型。</p><p>对于 double 和 float 来说，由于 NaN 的存在，有两个版本的比较指令。拿 float 来说，有 fcmpg 和 fcmpl，区别在于，如果遇到 NaN，fcmpg 会将 1 压入栈，fcmpl 会将 -1 压入栈。</p><p>举例来说。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lcmp</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 jclasslib 看一下 <code>lcmp()</code> 方法的字节码指令。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zijiema-zhiling-e8fa6685-b3d4-4f42-8fc5-8a4d8a9efe7b.png" alt="" loading="lazy"></p><p>lcmp 用于两个 long 型的数据进行比较。</p><p><strong>2）条件跳转指令</strong></p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zijiema-zhiling-5de34f26-52ad-4e07-a20d-91ea92038984.png" alt="" loading="lazy"></p><p>这些指令都会接收两个字节的操作数，它们的统一含义是，弹出栈顶元素，测试它是否满足某一条件，满足的话，跳转到对应位置。</p><p>对于 long、float 和 double 类型的条件分支比较，会先执行比较指令返回一个整型值到操作数栈中后再执行 int 类型的条件跳转指令。</p><p>对于 boolean、byte、char、short，以及 int，则直接使用条件跳转指令来完成。</p><p>举例来说。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 jclasslib 看一下 <code>fi()</code> 方法的字节码指令。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zijiema-zhiling-d0561d5c-ae21-48e7-9e7c-4aae87d02f56.png" alt="" loading="lazy"></p><p><code>3 ifne 12 (+9)</code> 的意思是，如果栈顶的元素不等于 0，跳转到第 12（3+9）行 <code>12 bipush 20</code>。</p><p><strong>3）比较条件转指令</strong></p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zijiema-zhiling-bfab6edd-d63f-45a7-8838-997e7630fa2a.png" alt="" loading="lazy"></p><p>前缀“if_”后，以字符“i”开头的指令针对 int 型整数进行操作，以字符“a”开头的指令表示对象的比较。</p><p>举例来说。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">&gt;</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 jclasslib 看一下 <code>compare()</code> 方法的字节码指令。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zijiema-zhiling-d4f9a680-1364-4af9-9474-c0763c9bc6f7.png" alt="" loading="lazy"></p><p><code>11 if_icmple 18 (+7)</code> 的意思是，如果栈顶的两个 int 类型的数值比较的话，如果前者小于后者时跳转到第 18 行（11+7）。</p><p><strong>4）多条件分支跳转指令</strong></p><p>主要有 tableswitch 和 lookupswitch，前者要求多个条件分支值是连续的，它内部只存放起始值和终止值，以及若干个跳转偏移量，通过给定的操作数 index，可以立即定位到跳转偏移量位置，因此效率比较高；后者内部存放着各个离散的 case-offset 对，每次执行都要搜索全部的 case-offset 对，找到匹配的 case 值，并根据对应的 offset 计算跳转地址，因此效率较低。</p><p>举例来说。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">switchTest</span><span class="token punctuation">(</span><span class="token keyword">int</span> select<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> num<span class="token punctuation">;</span>\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>select<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>\n            num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n            <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>\n        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>\n            num <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>\n            <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">default</span><span class="token operator">:</span>\n            num <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 jclasslib 看一下 <code>switchTest()</code> 方法的字节码指令。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/zijiema-zhiling-04e166ae-13c7-4025-804a-be88e2923a50.png" alt="" loading="lazy"></p><p>case 2 的时候没有 break，所以 case 2 和 case 3 是连续的，用的是 tableswitch。如果等于 1，跳转到 28 行；如果等于 2 和 3，跳转到 34 行，如果是 default，跳转到 40 行。</p><p><strong>5）无条件跳转指令</strong></p><p>goto 指令接收两个字节的操作数，共同组成一个带符号的整数，用于指定指令的偏移量，指令执行的目的就是跳转到偏移量给定的位置处。</p><p>前面的例子里都出现了 goto 的身影，也很好理解。如果指令的偏移量特别大，超出了两个字节的范围，可以使用指令 goto_w，接收 4 个字节的操作数。</p><hr><p>更多指令，可以阅读下面这篇文章：</p>',168),p={href:"https://segmentfault.com/a/1190000037628881",target:"_blank",rel:"noopener noreferrer"},i=(0,e.Uk)("https://segmentfault.com/a/1190000037628881"),l=(0,e._)("blockquote",null,[(0,e._)("p",null,"路漫漫其修远兮，吾将上下而求索")],-1),o=(0,e._)("p",null,"想要走得更远，Java 字节码这块就必须得硬碰硬地吃透，希望二哥的这些分享可以帮助到大家~",-1),c=(0,e._)("p",null,[(0,e._)("img",{src:"http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/xingbiaogongzhonghao.png",alt:"",loading:"lazy"})],-1),d={},u=(0,s(13860).Z)(d,[["render",function(n,a){const s=(0,e.up)("ExternalLinkIcon");return(0,e.wg)(),(0,e.iD)("div",null,[t,(0,e._)("blockquote",null,[(0,e._)("p",null,[(0,e._)("a",p,[i,(0,e.Wm)(s)])])]),l,o,c])}]])},13860:(n,a)=>{a.Z=(n,a)=>{const s=n.__vccOpts||n;for(const[n,e]of a)s[n]=e;return s}}}]);