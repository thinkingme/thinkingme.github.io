"use strict";(self.webpackChunkcoding_road=self.webpackChunkcoding_road||[]).push([[6347],{85796:(n,e,s)=>{s.r(e),s.d(e,{data:()=>a});const a={key:"v-c4871dde",path:"/coding-road/dev-tools/git/gitsubmodule.html",title:"gitsubmodule 使用",lang:"zh-CN",frontmatter:{category:["Java企业级开发"],tag:["Git","gitsubmodule"],summary:"gitsubmodule 使用 背景： 一个项目经过长时间的发展，项目中存在很多冗余代码和重复配置。所以我们可以使用 gitsubmodule 抽离出公共部分，以解决这个问题。 步骤: 1.分离项目 抽出公共部分，把公共部分放到一个新的项目中。 2.使用 git submodule 将所有系统中公共的类库和通用的配置，放到独立的仓库 app-server-p",head:[["meta",{property:"og:url",content:"https://vuepress-theme-hope-v2-demo.mrhope.site/coding-road/dev-tools/git/gitsubmodule.html"}],["meta",{property:"og:site_name",content:"coding-rode"}],["meta",{property:"og:title",content:"gitsubmodule 使用"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-12-13T02:10:16.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:tag",content:"Git"}],["meta",{property:"article:tag",content:"gitsubmodule"}],["meta",{property:"article:modified_time",content:"2022-12-13T02:10:16.000Z"}]]},excerpt:"",headers:[{level:2,title:"背景：",slug:"背景",children:[]},{level:2,title:"步骤:",slug:"步骤",children:[{level:3,title:"1.分离项目",slug:"_1-分离项目",children:[]},{level:3,title:"2.使用 git submodule",slug:"_2-使用-git-submodule",children:[]},{level:3,title:"3.克隆含有子模块的项目",slug:"_3-克隆含有子模块的项目",children:[]},{level:3,title:"4.更新子模块",slug:"_4-更新子模块",children:[]},{level:3,title:"5.gradle 构建：",slug:"_5-gradle-构建",children:[]},{level:3,title:"6.gradle 脚本修改",slug:"_6-gradle-脚本修改",children:[]}]},{level:2,title:"扩展阅读",slug:"扩展阅读",children:[]}],git:{createdTime:1670897416e3,updatedTime:1670897416e3,contributors:[{name:"thinkingme",email:"linzhenhuigg@gmail.com",commits:1}]},readingTime:{minutes:3.93,words:1180},filePathRelative:"coding-road/dev-tools/git/gitsubmodule.md"}},14700:(n,e,s)=>{s.r(e),s.d(e,{default:()=>l});var a=s(95393);const t=(0,a.uE)('<h1 id="gitsubmodule-使用" tabindex="-1"><a class="header-anchor" href="#gitsubmodule-使用" aria-hidden="true">#</a> gitsubmodule 使用</h1><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景：</h2><p>一个项目经过长时间的发展，项目中存在很多冗余代码和重复配置。所以我们可以使用 gitsubmodule 抽离出公共部分，以解决这个问题。</p><h2 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤" aria-hidden="true">#</a> 步骤:</h2><h3 id="_1-分离项目" tabindex="-1"><a class="header-anchor" href="#_1-分离项目" aria-hidden="true">#</a> 1.分离项目</h3><p>抽出公共部分，把公共部分放到一个新的项目中。</p><h3 id="_2-使用-git-submodule" tabindex="-1"><a class="header-anchor" href="#_2-使用-git-submodule" aria-hidden="true">#</a> 2.使用 git submodule</h3><p>将所有系统中公共的类库和通用的配置，放到独立的仓库 app-server-platform。因为我们用 git 来管理代码，而 git 本身提倡多 branch，多仓库，所以采用 git submodule 方式，其它项目需要添加 app-server-platform 这个 submodule：</p><p><code>git submodule add yourGitRepo common</code> 最后的”common”是自定义的，意思就是在当前的 common 名字来当作 submodule 的 clone。</p><h3 id="_3-克隆含有子模块的项目" tabindex="-1"><a class="header-anchor" href="#_3-克隆含有子模块的项目" aria-hidden="true">#</a> 3.克隆含有子模块的项目</h3><p>如果你 clone 别的带有 submodule 的项目时，默认情况下，当前的 project 并不会把 submodule 的代码都 clone 下来，可以执行： 你必须运行两个命令：<code>git submodule init</code> 用来初始化本地配置文件，而 <code>git submodule update</code> 则从该项目中抓取所有数据并检出父项目中列出的合适的提交。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">git</span> submodule init\nSubmodule <span class="token string">&#39;DbConnector&#39;</span> <span class="token punctuation">(</span>https://github.com/chaconinc/DbConnector<span class="token punctuation">)</span> registered <span class="token keyword">for</span> path <span class="token string">&#39;DbConnector&#39;</span>\n$ <span class="token function">git</span> submodule update\nCloning into <span class="token string">&#39;DbConnector&#39;</span><span class="token punctuation">..</span>.\nremote: Counting objects: <span class="token number">11</span>, done.\nremote: Compressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">10</span>/10<span class="token punctuation">)</span>, done.\nremote: Total <span class="token number">11</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">11</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>\nUnpacking objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">11</span>/11<span class="token punctuation">)</span>, done.\nChecking connectivity<span class="token punctuation">..</span>. done.\nSubmodule path <span class="token string">&#39;DbConnector&#39;</span><span class="token builtin class-name">:</span> checked out <span class="token string">&#39;c3f01dc8862123d317dd46284b05b6892c7b29bc&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在 DbConnector 子目录是处在和之前提交时相同的状态了。</p><p>不过还有更简单一点的方式。 如果给 git clone 命令传递 <code>--recurse-submodules</code> 选项，它就会自动初始化并更新仓库中的每一个子模块， 包括可能存在的嵌套子模块。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">git</span> clone --recurse-submodules https://github.com/chaconinc/MainProject\nCloning into <span class="token string">&#39;MainProject&#39;</span><span class="token punctuation">..</span>.\nremote: Counting objects: <span class="token number">14</span>, done.\nremote: Compressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">13</span>/13<span class="token punctuation">)</span>, done.\nremote: Total <span class="token number">14</span> <span class="token punctuation">(</span>delta <span class="token number">1</span><span class="token punctuation">)</span>, reused <span class="token number">13</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>\nUnpacking objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">14</span>/14<span class="token punctuation">)</span>, done.\nChecking connectivity<span class="token punctuation">..</span>. done.\nSubmodule <span class="token string">&#39;DbConnector&#39;</span> <span class="token punctuation">(</span>https://github.com/chaconinc/DbConnector<span class="token punctuation">)</span> registered <span class="token keyword">for</span> path <span class="token string">&#39;DbConnector&#39;</span>\nCloning into <span class="token string">&#39;DbConnector&#39;</span><span class="token punctuation">..</span>.\nremote: Counting objects: <span class="token number">11</span>, done.\nremote: Compressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">10</span>/10<span class="token punctuation">)</span>, done.\nremote: Total <span class="token number">11</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">11</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>\nUnpacking objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">11</span>/11<span class="token punctuation">)</span>, done.\nChecking connectivity<span class="token punctuation">..</span>. done.\nSubmodule path <span class="token string">&#39;DbConnector&#39;</span><span class="token builtin class-name">:</span> checked out <span class="token string">&#39;c3f01dc8862123d317dd46284b05b6892c7b29bc&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你已经克隆了项目但忘记了 <code>--recurse-submodules</code>，那么可以运行 <code>git submodule update --init</code> 将 git submodule init 和 git submodule update 合并成一步。如果还要初始化、抓取并检出任何嵌套的子模块， 请使用简明的 <code>git submodule update --init --recursive</code>。</p><h3 id="_4-更新子模块" tabindex="-1"><a class="header-anchor" href="#_4-更新子模块" aria-hidden="true">#</a> 4.更新子模块</h3><p><code>git submodule foreach git pull</code> 以下这段一般大家经常会遇到： 当你 clone 项目时，submodule 会以最新的 master 分支上的 commit id 作为本次的 tag 下载，类似一个副本，因为一般大家都是用 submodule，而不是修改它。所以当你的 submodule 需要更新的时候，需要先执行这段代码：</p><p><code>git submodule foreach git checkout master</code> 让 submodule 切换到 master 分支了，然后就可以用上面的 submodule pull 来更新了。</p><h3 id="_5-gradle-构建" tabindex="-1"><a class="header-anchor" href="#_5-gradle-构建" aria-hidden="true">#</a> 5.gradle 构建：</h3><p>鉴于上文对 gradle 优点的描述，我们采用 gradle 来构建。我们的项目最初都是基于 maven 来构建的，从 maven 切换到 gradle 很简单，在项目根目录下，先执行（假设你的机器已经安装了 gradle 环境，一般负责构建的人首次需要安装，开发人员可以不安装）：</p><p><code>gradle init wrapper</code> 这样，就会自动生成相关的 gradlew，build.gradle，settings.gradle 等文件和相关目录，并会自动下载对应版本的 gradle binary 包（所以以后不需要安装）。Gradle 会自动识别 Maven 里的配置，并相应的导入进来，有少量部分配置可能需要修改。</p><p>注：在已有的 gradle 项目里，尽量使用生成的 gradlew 这个 wrapper，因为它会自动下载对应版本的 Gradle，也就是说团队合作的其他人开发机上是不需要手动安装 Gradle 的，并且 wrapper 也让大家的 Gradle 版本一致，避免问题。</p><h3 id="_6-gradle-脚本修改" tabindex="-1"><a class="header-anchor" href="#_6-gradle-脚本修改" aria-hidden="true">#</a> 6.gradle 脚本修改</h3><p>上面执行完之后，环境已经准备好了，现在要做的就是修改构建脚本： 因为已经通过 git submodule 把公共项目放到独立目录（common）了，并且它本身也是独立可构建的项目，那么也就是说当前有两个项目了，一个是当前 project，一个是 common 项目，要做的就是告诉 gradle，要多项目构建，编辑 settings.gradle，增加项目配置： <code>include &quot;common&quot;</code> 如果你的 common 项目是多个项目的共同项目，那么可以在 common 项目的 settings.gradle 里面增加 include，比如： <code>include &quot;common:xxxx&quot;</code> 在 build.gradle 里面，增加项目配置： <code>compile project(&quot;:common:xxxx&quot;)</code></p><h2 id="扩展阅读" tabindex="-1"><a class="header-anchor" href="#扩展阅读" aria-hidden="true">#</a> 扩展阅读</h2>',26),o={href:"https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97",target:"_blank",rel:"noopener noreferrer"},i=(0,a.Uk)("Git 工具 - 子模块"),c={},l=(0,s(13860).Z)(c,[["render",function(n,e){const s=(0,a.up)("ExternalLinkIcon");return(0,a.wg)(),(0,a.iD)("div",null,[t,(0,a._)("p",null,[(0,a._)("a",o,[i,(0,a.Wm)(s)])])])}]])},13860:(n,e)=>{e.Z=(n,e)=>{const s=n.__vccOpts||n;for(const[n,a]of e)s[n]=a;return s}}}]);