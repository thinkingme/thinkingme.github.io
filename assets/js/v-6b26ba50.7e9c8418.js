"use strict";(self.webpackChunkcoding_road=self.webpackChunkcoding_road||[]).push([[7397],{99558:(a,t,n)=>{n.r(t),n.d(t,{data:()=>e});const e={key:"v-6b26ba50",path:"/coding-road/java-core/jvm/hsdb.html",title:"HSDB（Hotspot Debugger）从入门到实战",lang:"zh-CN",frontmatter:{category:["Java核心","JVM"],tag:["Java"],summary:"HSDB（Hotspot Debugger）从入门到实战 HSDB（Hotspot Debugger)，是一款内置于 SA 中的 GUI 调试工具，可用于调试 JVM 运行时数据，从而进行故障排除。 启动 HSDB 检测不同 JDK 版本需要使用不同的  HSDB  版本，否则容易出现无法扫描到对象等莫名其妙的问题 Mac：JDK7 和 JDK8 均可以采用",head:[["meta",{property:"og:url",content:"https://vuepress-theme-hope-v2-demo.mrhope.site/coding-road/java-core/jvm/hsdb.html"}],["meta",{property:"og:site_name",content:"coding-rode"}],["meta",{property:"og:title",content:"HSDB（Hotspot Debugger）从入门到实战"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-06-04T07:20:53.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:tag",content:"Java"}],["meta",{property:"article:modified_time",content:"2022-06-04T07:20:53.000Z"}]]},excerpt:"",headers:[{level:2,title:"启动 HSDB",slug:"启动-hsdb",children:[]},{level:2,title:"JVM 参数设置",slug:"jvm-参数设置",children:[]},{level:2,title:"获取应用进程 id",slug:"获取应用进程-id",children:[]},{level:2,title:"CLHSDB 常用指令",slug:"clhsdb-常用指令",children:[]},{level:2,title:"HSDB GUI 界面",slug:"hsdb-gui-界面",children:[{level:3,title:"可视化线程栈",slug:"可视化线程栈",children:[]},{level:3,title:"对象直方图",slug:"对象直方图",children:[]},{level:3,title:"OOP 信息",slug:"oop-信息",children:[]},{level:3,title:"堆信息",slug:"堆信息",children:[]},{level:3,title:"加载类列表",slug:"加载类列表",children:[]},{level:3,title:"元数据区",slug:"元数据区",children:[]},{level:3,title:"生成 class 文件",slug:"生成-class-文件",children:[]}]},{level:2,title:"实战",slug:"实战",children:[{level:3,title:"分析对象存储区域",slug:"分析对象存储区域",children:[]},{level:3,title:"分析字符串字面量存储区域",slug:"分析字符串字面量存储区域",children:[]},{level:3,title:"分析 String.intern",slug:"分析-string-intern",children:[]}]}],git:{createdTime:1653617096e3,updatedTime:1654327253e3,contributors:[{name:"林振辉",email:"linzhenhui@apexsoft.com",commits:2}]},readingTime:{minutes:8.79,words:2638},filePathRelative:"coding-road/java-core/jvm/hsdb.md"}},43748:(a,t,n)=>{n.r(t),n.d(t,{default:()=>i});var e=n(95393);const s=(0,e.uE)('<h1 id="hsdb-hotspot-debugger-从入门到实战" tabindex="-1"><a class="header-anchor" href="#hsdb-hotspot-debugger-从入门到实战" aria-hidden="true">#</a> HSDB（Hotspot Debugger）从入门到实战</h1><p><code>HSDB（Hotspot Debugger)</code>，是一款内置于 SA 中的 GUI 调试工具，可用于调试 JVM 运行时数据，从而进行故障排除。</p><h2 id="启动-hsdb" tabindex="-1"><a class="header-anchor" href="#启动-hsdb" aria-hidden="true">#</a> 启动 HSDB</h2><p>检测不同 JDK 版本需要使用不同的  <code>HSDB</code>  版本，否则容易出现无法扫描到对象等莫名其妙的问题</p><ul><li><strong>Mac</strong>：JDK7 和 JDK8 均可以采用以下的方式</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ sudo java -cp ,:/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home/lib/sa-jdi.jar sun.jvm.hotspot.HSDB\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>事实上经过测试，即使通过 JDK8 自带的  <code>sa-jdi.jar</code>  去扫描对象（<code>scanoops</code>）的时候也会发生扫不到的情况，但可以通过其他手段代替</p></blockquote><p>而 JDK11 的启动方式有些区别</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ /Library/Java/JavaVirtualMachines/jdk-11.0.1.jdk/Contents/Home/bin/jhsdb hsdb\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>事实上经过测试，该版本启动的  <code>HSDB</code>  会少支持一些指令（比如  <code>mem, whatis</code>），<strong>因此目前不推荐使用该版本</strong></p></blockquote><ul><li><strong>Windows</strong>:</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ java -classpath &quot;%JAVA_HOME%/lib/sa-jdi.jar&quot; sun.jvm.hotspot.HSDB\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中启动版本可以使用  <code>/usr/libexec/java_home -V</code>  获取</p><blockquote><p>若遇到 Unable to locate an executable at “/Users/xx/.jenv/versions/1.7/bin/jhsdb” (-1) 可通过  <code>Jenv</code>  切换到当前 Jdk 版本即可解决</p></blockquote><h2 id="jvm-参数设置" tabindex="-1"><a class="header-anchor" href="#jvm-参数设置" aria-hidden="true">#</a> JVM 参数设置</h2><p><code>HSDB</code>  对  <code>Serial GC</code>  支持的较好，因此 Debug 时增加参数  <code>-XX:+UseSerialGC</code>，Debug 工具可以使用 IDE 或 JDB</p><h2 id="获取应用进程-id" tabindex="-1"><a class="header-anchor" href="#获取应用进程-id" aria-hidden="true">#</a> 获取应用进程 id</h2><p>jps 仅查找当前用户的 Java 进程，而不是当前系统中的所有进程</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ jps\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>默认**显示 pid **以及  <strong>main 方法对应的 class 名称</strong></li><li>-v：<strong>输出传递给 JVM 的参数</strong></li><li>-l： <strong>输出 main 方法对应的 class 的完整 package 名</strong></li></ul><h2 id="clhsdb-常用指令" tabindex="-1"><a class="header-anchor" href="#clhsdb-常用指令" aria-hidden="true">#</a> CLHSDB 常用指令</h2><ul><li><p><code>universe</code>：查看堆空间信息</p></li><li><p><code>scanoops start end [type]</code>：扫描指定空间中的 type 类型及其子类的实例</p></li></ul><blockquote><p>JDK8 版本的  <code>HSDB</code>  的  <code>scanoops</code>  会无法扫描到对象，但可以通过 GUI 界面的  <code>Tools -&gt; Object Histogram</code>，输入想要查询的对象，之后双击来获取对象的地址，也可以继续在里面点击  <code>inspect</code>  来查看对象信息</p></blockquote><ul><li><p><code>inspect</code>：查看对象（<code>OOP</code>）信息【使用  <code>tools-&gt;inspect</code>，输入对象地址有更详细的信息哦】</p></li><li><p><code>revptrs</code>：反向指针，查找引用该对象的指针</p></li></ul><h2 id="hsdb-gui-界面" tabindex="-1"><a class="header-anchor" href="#hsdb-gui-界面" aria-hidden="true">#</a> HSDB GUI 界面</h2><h3 id="可视化线程栈" tabindex="-1"><a class="header-anchor" href="#可视化线程栈" aria-hidden="true">#</a> 可视化线程栈</h3><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/hsdb-a606c6ac-1cfc-44c3-8fdf-e0eeeabbf05a.png" alt="" loading="lazy"></p><h3 id="对象直方图" tabindex="-1"><a class="header-anchor" href="#对象直方图" aria-hidden="true">#</a> 对象直方图</h3><p><code>Tools -&gt; Object Histogram</code>，我们可以通过对象直方图快速定位某个类型的对象的地址以供我们进一步分析</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/hsdb-cf39737a-7d6a-42de-b843-123cba1f96aa.png" alt="" loading="lazy"></p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/hsdb-974d211c-e627-40d6-af13-9560ebae0bfa.png" alt="" loading="lazy"></p><h3 id="oop-信息" tabindex="-1"><a class="header-anchor" href="#oop-信息" aria-hidden="true">#</a> OOP 信息</h3><p>我们可以根据对象地址在  <code>Tools -&gt; Inspector</code>  获取对象的在 JVM 层的实例  <code>instanceOopDesc</code>  对象，它包括对象头  <code>_mark</code>  和  <code>_metadata</code>  以及实例信息</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/hsdb-026fb881-59a2-4e0f-ac4a-a2a7b505a707.png" alt="" loading="lazy"></p><h3 id="堆信息" tabindex="-1"><a class="header-anchor" href="#堆信息" aria-hidden="true">#</a> 堆信息</h3><p>我们可以通过  <code>Tools -&gt; Heap Parameters</code>  获取堆信息，可以结合对象地址判断对象位置</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/hsdb-3baabaf0-1681-4443-b8db-ae08128744d6.png" alt="" loading="lazy"></p><h3 id="加载类列表" tabindex="-1"><a class="header-anchor" href="#加载类列表" aria-hidden="true">#</a> 加载类列表</h3><p>我们可以通过  <code>Tools -&gt; Class Browser</code>  来获取所有加载类列表</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/hsdb-7e4ebd1f-ba9c-4862-b4c3-574de5c30d6b.png" alt="" loading="lazy"></p><h3 id="元数据区" tabindex="-1"><a class="header-anchor" href="#元数据区" aria-hidden="true">#</a> 元数据区</h3><p>HotSpot VM 里有一套对象专门用来存放元数据，它们包括：</p><ul><li><p><code>Klass</code>  系对象，用于描述类型的总体信息【<strong>通过  <code>OOP</code>  信息（<code>inspect</code>）可以看到  <code>instanceKlass</code>  对象</strong>】</p></li><li><p><code>ConstantPool/ConstantPoolCache</code>  对象：每个  <code>InstanceKlass</code>  关联着一个  <code>ConstantPool</code>，作为该类型的运行时常量池。这个常量池的结构跟 Class 文件里的常量池基本上是对应的</p></li></ul><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/hsdb-07d80d18-be4e-4861-bea3-291eea0ff262.png" alt="" loading="lazy"></p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/hsdb-b7b0ebed-cd38-42b7-bebc-41090409a1db.png" alt="" loading="lazy"></p><ul><li><p><code>Method</code>  对象，用来描述 Java 方法的总体信息，如方法入口地址、调用/循环计数器等等</p><ul><li><code>ConstMethod</code>  对象，记录着 Java 方法的不变的描述信息，包括方法名、方法的访问修饰符、<strong>字节码</strong>、行号表、局部变量表等等。<strong>注意，字节码指令被分配在  <code>constMethodOop</code>  对象的内存区域的末尾</strong></li><li><code>MethodData</code>  对象，记录着 Java 方法执行时的 profile 信息，例如某方法里的某个字节码之类是否从来没遇到过 null，某个条件跳转是否总是走同一个分支，等等。这些信息在解释器（多层编译模式下也在低层的编译生成的代码里）收集，然后供给 HotSpot Server Compiler 用于做激进优化。</li></ul></li></ul><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/hsdb-59231922-9ce3-4107-ab1a-b33818cbab96.png" alt="" loading="lazy"></p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/hsdb-85c6fca7-2d1f-4194-bc07-fd1e2ab18632.png" alt="" loading="lazy"></p><ul><li><code>Symbol</code>  对象，对应 Class 文件常量池里的  <code>JVM_CONSTANT_Utf8</code>  类型的常量。有一个 VM 全局的  <code>SymbolTable</code>  管理着所有  <code>Symbol</code>。<code>Symbol</code>  由所有 Java 类所共享。</li></ul><h3 id="生成-class-文件" tabindex="-1"><a class="header-anchor" href="#生成-class-文件" aria-hidden="true">#</a> 生成 class 文件</h3><p>到对应类下点击 create .class 后就可以在执行 HSDB 的目录下看到生成的 class 文件，适合查看动态代理生成的字节码</p><h2 id="实战" tabindex="-1"><a class="header-anchor" href="#实战" aria-hidden="true">#</a> 实战</h2><h3 id="分析对象存储区域" tabindex="-1"><a class="header-anchor" href="#分析对象存储区域" aria-hidden="true">#</a> 分析对象存储区域</h3><p>下面代码中的静态变量，成员变量分别存储在什么地方呢？</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">VMShow</span> <span class="token class-name">StaticVmShow</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VMShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">VMShow</span> objVmShow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VMShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">VMShow</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">VMShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">VMShow</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> basicInt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">Integer</span> objInt <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> staticInt <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> basicString <span class="token operator">=</span> <span class="token string">&quot;basicString&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> staticString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;staticString&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先查看对象直方图可以找到三个 VMShow 对象</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/hsdb-e5f0f200-83fd-4529-b5d6-416f9a6f626b.png" alt="" loading="lazy"></p><p>那么如何确定这三个地址分别属于哪些变量呢？首先找静态变量，它在 JDK8 中是在 Class 对象中的，因此我们可以找它们的反向指针，如果是<code>java.lang.Class</code>  的那么就是静态变量</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/hsdb-301ebfc3-c2c4-49de-946a-5d2f1660e669.png" alt="" loading="lazy"></p><p>我们可以从 ObjTest 的  <code>instanceKlass</code>  中的镜像找到 class 对象来验证是否是该对象的 class</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/hsdb-f22359ab-b066-405f-a754-197ccbd36884.png" alt="" loading="lazy"></p><p>那么成员变量和局部变量如何区分呢？成员变量会被类实例引用，而局部变量地址则在会被被放在栈区</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/hsdb-51cb7321-fb7a-42b0-9321-edd410e3d328.png" alt="" loading="lazy"></p><p>那么局部变量的反向指针都是 null，怎么确定它就被栈区所引用呢？我们可以看可视化线程栈</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/hsdb-51fb09f4-06d7-4518-8038-5dd69d765862.png" alt="" loading="lazy"></p><h3 id="分析字符串字面量存储区域" tabindex="-1"><a class="header-anchor" href="#分析字符串字面量存储区域" aria-hidden="true">#</a> 分析字符串字面量存储区域</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTest</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> s3 <span class="token operator">=</span> s1 <span class="token operator">+</span> s2<span class="token punctuation">;</span>\n        <span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;ab&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面一共涉及的字符串字面量和实例分别存储在什么地方呢？</p><ol><li><p>首先在 s2 处打上断点，启动  <code>HSDB</code>  监控该进程</p></li><li><p>打开对象直方图发现只有 1 个  <code>a</code>  的字符串对象</p></li></ol><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/hsdb-b5631e70-be3a-48de-99be-4468632d23e0.png" alt="" loading="lazy"></p><ol start="3"><li>查找 StringTable 中  <code>a</code>  的对象地址</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>jseval &quot;st = sa.vm.stringTable;st.stringsDo(function (s) { if (sapkg.oops.OopUtilities.stringOopToString(s).matches(&#39;^(a)&#39;)) {print(s + &#39;: &#39;);s.printValueOn(java.lang.System.out); println(&#39;&#39;)}})&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以根据需要改变  <code>matches</code>  中的值来匹配</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/hsdb-76084b8d-6134-4866-8891-c24a43a3b836.png" alt="" loading="lazy"></p><p>可以看到这个对象地址就是 StringTable 中引用的地址</p><ol start="4"><li><p>然后打断点在 sout 上，重新开始监控进程</p></li><li><p>重新使用对象直方图查看 String 值</p></li></ol><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/hsdb-f3c35027-2fe1-4b18-8a1c-b7243a9b5149.png" alt="" loading="lazy"></p><p>这里有 5 个值，<code>ab</code>  有 3 个：</p><ul><li><code>ab</code>  字面量</li><li>其中 s3 相当于  <code>new StringBuild().append(&quot;a&quot;).append(&quot;b&quot;).toString()</code>，会创建一个  <code>ab</code>  的实例</li><li>s4 会创建一个  <code>ab</code>  的实例</li></ul><ol start="6"><li>我们重新打印 StringTable 相应的值来验证</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>jseval &quot;st = sa.vm.stringTable;st.stringsDo(function (s) { if (sapkg.oops.OopUtilities.stringOopToString(s).matches(&#39;^(a|b).?&#39;)) {print(s + &#39;: &#39;);s.printValueOn(java.lang.System.out); println(&#39;&#39;)}})&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/hsdb-f07a9fc8-5744-4859-9df9-c3a1016e936a.png" alt="" loading="lazy"></p><p>那么运行时常量池中存放的是哪些呢？实际上它和 StringTable 一样是这些对象的引用，只不过 StringTable 是全局共享的，而运行时常量池只有该类的一些字面量。我们通过加载类列表可以查看</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/hsdb-25fa5e06-0250-424b-8b05-aea770e80963.png" alt="" loading="lazy"></p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/hsdb-88e8c10d-e09c-4a74-95e6-e5b21577459f.png" alt="" loading="lazy"></p><h3 id="分析-string-intern" tabindex="-1"><a class="header-anchor" href="#分析-string-intern" aria-hidden="true">#</a> 分析 String.intern</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringInternTest</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;he&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;llo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  1</span>\n        s1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>\n        <span class="token class-name">String</span> s2<span class="token operator">=</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token operator">==</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n        <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>\n        <span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">&quot;12&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>\n        s3<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述在编译器确定的字面量有  <code>he</code>, <code>llo</code>, <code>hello</code>, <code>1</code>,  <code>2</code>, <code>12</code>，但在真正执行到语句前，符号引用不一定解析成直接引用，即字面量对应的对象会在执行到语句时（<code>idc</code>  指令）才会创建</p><p>首先看通过加载类列表查看字节码指令：</p><table><thead><tr><th>line</th><th>bci</th><th>bytecode</th></tr></thead><tbody><tr><td>7</td><td>0</td><td><code>new #2 [Class java.lang.StringBuilder]</code></td></tr><tr><td>7</td><td>3</td><td>dup</td></tr><tr><td>7</td><td>4</td><td><code>invokespecial #3 [Method void ()]</code></td></tr><tr><td>7</td><td>7</td><td><code>new #4 [Class java.lang.String]</code></td></tr><tr><td>7</td><td>10</td><td>dup</td></tr><tr><td>7</td><td>11</td><td><code> ldc #5(0) [fast_aldc]</code></td></tr><tr><td>7</td><td>13</td><td><code>invokespecial #6 [Method void (java.lang.String)]</code></td></tr><tr><td>7</td><td>16</td><td><code>invokevirtual #7 [Method java.lang.StringBuilder append(java.lang.String)]</code></td></tr><tr><td>7</td><td>19</td><td><code>new #4 [Class java.lang.String]</code></td></tr><tr><td>7</td><td>22</td><td>dup</td></tr><tr><td>7</td><td>23</td><td><code>ldc #8(1) [fast_aldc]</code></td></tr><tr><td>7</td><td>25</td><td><code>invokespecial #6 [Method void (java.lang.String)]</code></td></tr><tr><td>7</td><td>28</td><td><code>invokevirtual #7 [Method java.lang.StringBuilder append(java.lang.String)]</code></td></tr><tr><td>7</td><td>31</td><td><code>invokevirtual #9 [Method java.lang.String toString()]</code></td></tr><tr><td>7</td><td>34</td><td>astore_1</td></tr><tr><td>8</td><td>35</td><td>aload_1</td></tr><tr><td>8</td><td>36</td><td><code>invokevirtual #10 [Method java.lang.String intern()]</code></td></tr><tr><td>8</td><td>39</td><td>pop</td></tr><tr><td>9</td><td>40</td><td><code>ldc #11(2) [fast_aldc]</code></td></tr><tr><td>9</td><td>42</td><td>astore_2</td></tr><tr><td>10</td><td>43</td><td><code>getstatic #12 [Field java.io.PrintStream out]</code></td></tr><tr><td>10</td><td>46</td><td>aload_1</td></tr><tr><td>10</td><td>47</td><td>aload_2</td></tr><tr><td>10</td><td>48</td><td>if_acmpne 55</td></tr><tr><td>10</td><td>51</td><td>iconst_1</td></tr><tr><td>10</td><td>52</td><td>goto 56</td></tr><tr><td>10</td><td>55</td><td>iconst_0</td></tr><tr><td>10</td><td>56</td><td><code>invokevirtual #13 [Method void println(boolean)]</code></td></tr><tr><td>12</td><td>59</td><td><code>new #2 [Class java.lang.StringBuilder]</code></td></tr><tr><td>12</td><td>62</td><td>dup</td></tr><tr><td>12</td><td>63</td><td><code>invokevirtual #13 [Method void println(boolean)]</code></td></tr><tr><td>12</td><td>66</td><td><code>new #4 [Class java.lang.String]</code></td></tr><tr><td>12</td><td>69</td><td>dup</td></tr><tr><td>12</td><td>70</td><td><code>ldc #14(3) [fast_aldc]</code></td></tr><tr><td>12</td><td>72</td><td><code>invokespecial #6 [Method void (java.lang.String)]</code></td></tr><tr><td>12</td><td>75</td><td><code>invokevirtual #7 [Method java.lang.StringBuilder append(java.lang.String)]</code></td></tr><tr><td>12</td><td>78</td><td><code>new #4 [Class java.lang.String]</code></td></tr><tr><td>12</td><td>81</td><td>dup</td></tr><tr><td>12</td><td>82</td><td><code>ldc #15(4) [fast_aldc]</code></td></tr><tr><td>12</td><td>84</td><td><code>invokespecial #6 [Method void (java.lang.String)]</code></td></tr><tr><td>12</td><td>87</td><td><code>invokevirtual #7 [Method java.lang.StringBuilder append(java.lang.String)]</code></td></tr><tr><td>12</td><td>90</td><td><code>invokevirtual #9 [Method java.lang.String toString()]</code></td></tr><tr><td>12</td><td>93</td><td>astore_3</td></tr><tr><td>13</td><td>94</td><td><code>ldc #16(5) [fast_aldc]</code></td></tr><tr><td>13</td><td>96</td><td>astore #4</td></tr><tr><td>14</td><td>98</td><td>aload_3</td></tr><tr><td>14</td><td>99</td><td><code>invokevirtual #10 [Method java.lang.String intern()]</code></td></tr><tr><td>14</td><td>102</td><td>pop</td></tr><tr><td>15</td><td>103</td><td><code>getstatic #12 [Field java.io.PrintStream out]</code></td></tr><tr><td>15</td><td>106</td><td>aload_3</td></tr><tr><td>15</td><td>107</td><td>aload #4</td></tr><tr><td>15</td><td>109</td><td>if_acmpne 116</td></tr><tr><td>15</td><td>112</td><td>iconst_1</td></tr><tr><td>15</td><td>113</td><td>goto 117</td></tr><tr><td>15</td><td>116</td><td>iconst_0</td></tr><tr><td>15</td><td>117</td><td><code>invokevirtual #13 [Method void println(boolean)]</code></td></tr><tr><td>16</td><td>120</td><td>return</td></tr></tbody></table><p>可以看到确实有 6 个<code>idc</code>，但如果我们在第一行语句打上断点，会发现它们都不在 StringTable（但这里的  <code>he</code>  在，它可能被其他类用到了），然后执行第一行，会发现  <code>he</code>  和  <code>llo</code>  在了，但  <code>hello</code>  不在</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>jseval &quot;st = sa.vm.stringTable;st.stringsDo(function (s) { if (sapkg.oops.OopUtilities.stringOopToString(s).matches(&#39;^(he|llo|hello|1|2|12)&#39;)) {print(s + &#39;: &#39;);s.printValueOn(java.lang.System.out); println(&#39;&#39;)}})&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/hsdb-ca5d06a0-1690-4a8f-98cb-aa6bd7800afe.png" alt="" loading="lazy"></p><p>但是  <code>hello</code>  对象还是存在的（new）</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/hsdb-85253e10-d0c2-442b-a26b-91b1b2588f1c.png" alt="" loading="lazy"></p><p>接着执行 s1.intern 会将  <code>hello</code>  对象的地址放入 StringTable</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/hsdb-801d35f2-0c8a-4699-afbf-057c1e6cac6c.png" alt="" loading="lazy"></p><p>再执行  <code>String s2=&quot;hello&quot;;</code>  会发现  <code>hello</code>  对象仍然只有一个，都指向同一个。</p><p>而继续在 6 打断点，即执行完  <code>String s4 = &quot;12&quot;;</code>，因为  <code>12</code>  不在字符串常量池，那么会新建一个  <code>12</code>的实例，并让字符串常量池引用它，这样会发现就有两个  <code>12</code>  了</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/hsdb-47a42bfa-7645-4c9b-bcd8-aeabea1ae44f.png" alt="" loading="lazy"></p><hr>',101),d=(0,e.Uk)("参考链接："),o={href:"https://zzcoder.cn/2019/12/06/HSDB%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98/",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("https://zzcoder.cn/2019/12/06/HSDB从入门到实战/"),l=(0,e._)("p",null,[(0,e._)("img",{src:"http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/xingbiaogongzhonghao.png",alt:"",loading:"lazy"})],-1),p={},i=(0,n(13860).Z)(p,[["render",function(a,t){const n=(0,e.up)("ExternalLinkIcon");return(0,e.wg)(),(0,e.iD)("div",null,[s,(0,e._)("blockquote",null,[(0,e._)("p",null,[d,(0,e._)("a",o,[c,(0,e.Wm)(n)])])]),l])}]])},13860:(a,t)=>{t.Z=(a,t)=>{const n=a.__vccOpts||a;for(const[a,e]of t)n[a]=e;return n}}}]);