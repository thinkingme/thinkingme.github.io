"use strict";(self.webpackChunkcoding_road=self.webpackChunkcoding_road||[]).push([[9210],{343:(n,e,a)=>{a.r(e),a.d(e,{data:()=>t});const t={key:"v-9342af48",path:"/coding-road/javaee/springboot/auto-generator.html",title:"MyBatis-Plus AutoGenerator：一款开发效率更高的代码生成工具",lang:"zh-CN",frontmatter:{category:["Java企业级开发"],tag:["辅助工具/轮子"],summary:"MyBatis-Plus AutoGenerator：一款开发效率更高的代码生成工具 作为一名 Java 后端开发，日常工作中免不了要生成数据库表对应的持久化对象 PO，操作数据库的接口 DAO，以及 CRUD 的 XML，也就是 mapper。 Mybatis Generator 是 MyBatis 官方提供的一个代码生成工具，完全可以胜任这个工作，不过最",head:[["meta",{property:"og:url",content:"https://vuepress-theme-hope-v2-demo.mrhope.site/coding-road/javaee/springboot/auto-generator.html"}],["meta",{property:"og:site_name",content:"coding-rode"}],["meta",{property:"og:title",content:"MyBatis-Plus AutoGenerator：一款开发效率更高的代码生成工具"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-06-04T08:56:49.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:tag",content:"辅助工具/轮子"}],["meta",{property:"article:modified_time",content:"2022-06-04T08:56:49.000Z"}]]},excerpt:"",headers:[{level:3,title:"一、使用 Mybatis Generator",slug:"一、使用-mybatis-generator",children:[]},{level:3,title:"二、使用 MyBatis-Plus 的 AutoGenerator",slug:"二、使用-mybatis-plus-的-autogenerator",children:[]},{level:3,title:"三、总结对比",slug:"三、总结对比",children:[]}],git:{createdTime:1653617096e3,updatedTime:1654333009e3,contributors:[{name:"林振辉",email:"linzhenhui@apexsoft.com",commits:2},{name:"thinkingme",email:"linzhenhuigg@gmail.com",commits:1}]},readingTime:{minutes:5.61,words:1684},filePathRelative:"coding-road/javaee/springboot/auto-generator.md"}},77206:(n,e,a)=>{a.r(e),a.d(e,{default:()=>h});var t=a(95393);const s=(0,t.uE)('<h1 id="mybatis-plus-autogenerator-一款开发效率更高的代码生成工具" tabindex="-1"><a class="header-anchor" href="#mybatis-plus-autogenerator-一款开发效率更高的代码生成工具" aria-hidden="true">#</a> MyBatis-Plus AutoGenerator：一款开发效率更高的代码生成工具</h1><p>作为一名 Java 后端开发，日常工作中免不了要生成数据库表对应的持久化对象 PO，操作数据库的接口 DAO，以及 CRUD 的 XML，也就是 mapper。</p><p>Mybatis Generator 是 MyBatis 官方提供的一个代码生成工具，完全可以胜任这个工作，不过最近在开发“编程猫”开源网站的时候试用了一下 MyBatis-Plus 官方提供 AutoGenerator，发现配置更简单，开发效率更高！于是就来给小伙伴们安利一波。</p><p>来个 GIF 感受一下 AutoGenerator 生成代码的快感吧。</p><p><img src="https://cdn.jsdelivr.net/gh/thinkingme/thinkingme.github.io@master/images/kaiyuan/auto-generator-1.gif" alt="" loading="lazy"></p><h3 id="一、使用-mybatis-generator" tabindex="-1"><a class="header-anchor" href="#一、使用-mybatis-generator" aria-hidden="true">#</a> 一、使用 Mybatis Generator</h3><p>为了形成鲜明的对比，我们先来使用 Mybatis Generator 生成一次代码，感受一下整个过程。</p><p>第一步，在 pom.xml 文件中添加 MySQL+MyBatis 的依赖（Mybatis Generator 的前置条件）。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;!-- MySQL 连接池 --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;mysql&lt;/groupId&gt;\n    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n    &lt;version&gt;${mysql.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!--MyBatis 的 Spring Boot starter --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;\n    &lt;version&gt;2.2.2&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加完成后，一定要执行一次 Maven 重载（见下图），确保 MyBatis 的依赖加载完毕后再执行第二步。</p><p><img src="https://cdn.jsdelivr.net/gh/thinkingme/thinkingme.github.io@master/images/kaiyuan/auto-generator-2.png" alt="" loading="lazy"></p><p>否则下一步可能不通过，但又得不到任何错误提示。不要问我为什么，踩过坑后痛苦的领悟。</p><p><img src="https://cdn.jsdelivr.net/gh/thinkingme/thinkingme.github.io@master/images/kaiyuan/auto-generator-3.png" alt="" loading="lazy"></p><p>添加完成后，可以通过 Maven 插件来生成代码，也可以通过 Java 代码来生成代码，这里以 Maven 插件的形式来演示。Java 代码的形式可参照 Mybatis Generator：</p>',14),i={href:"https://mybatis.org/generator/running/runningWithJava.html",target:"_blank",rel:"noopener noreferrer"},l=(0,t.Uk)("https://mybatis.org/generator/running/runningWithJava.html"),o=(0,t.uE)('<p>第二步，在 pom.xml 的 MyBatis Generator 插件，先来看一下整体的结构图，注意是在 build→plugins 下节点下添加。</p><p><img src="https://cdn.jsdelivr.net/gh/thinkingme/thinkingme.github.io@master/images/kaiyuan/auto-generator-4.png" alt="" loading="lazy"></p><p>首先是 MyBatis Generator 插件，目前最新版是 1.4.0，我们采用上一个稳定版本 1.3.7，稳一点。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;\n&lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;\n&lt;version&gt;1.3.7&lt;/version&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只添加插件还不够，还需要对其进行配置，我们使用 configurationFile 元素来指定一个配置文件 mybatis-generator-config.xml：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;configurationFile&gt;src/main/resources/mybatis-generator-config.xml&lt;/configurationFile&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://cdn.jsdelivr.net/gh/thinkingme/thinkingme.github.io@master/images/kaiyuan/auto-generator-5.png" alt="" loading="lazy"></p><p>来看一下 mybatis-generator-config.xml 的内容。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;generatorConfiguration&gt;\n    &lt;context id=&quot;myContext&quot; targetRuntime=&quot;MyBatis3&quot; defaultModelType=&quot;flat&quot;&gt;\n\n        &lt;!-- 注释 --&gt;\n        &lt;commentGenerator&gt;\n            &lt;!-- 是否不生成注释 --&gt;\n            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt;\n        &lt;/commentGenerator&gt;\n\n        &lt;!-- jdbc连接 --&gt;\n        &lt;jdbcConnection driverClass=&quot;com.mysql.cj.jdbc.Driver&quot;\n                        connectionURL=&quot;jdbc:mysql://ip:3306/codingmoretiny02?useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;serverTimezone=Asia/Shanghai&amp;amp;useSSL=false&quot;\n                        userId=&quot;codingmoretiny02&quot;\n                        password=&quot;123456&quot;&gt;\n            &lt;!--高版本的 mysql-connector-java 需要设置 nullCatalogMeansCurrent=true--&gt;\n            &lt;property name=&quot;nullCatalogMeansCurrent&quot; value=&quot;true&quot;/&gt;\n        &lt;/jdbcConnection&gt;\n\n        &lt;!-- 类型转换 --&gt;\n        &lt;javaTypeResolver&gt;\n            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;true&quot;/&gt;\n        &lt;/javaTypeResolver&gt;\n\n        &lt;!-- 生成实体类地址 --&gt;\n        &lt;javaModelGenerator targetPackage=&quot;com.codingmore.mbg.po&quot; targetProject=&quot;src/main/java&quot;&gt;\n            &lt;!-- 是否针对string类型的字段在set方法中进行修剪，默认false --&gt;\n            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt;\n        &lt;/javaModelGenerator&gt;\n\n\n        &lt;!-- 生成Mapper.xml文件 --&gt;\n        &lt;sqlMapGenerator targetPackage=&quot;com.codingmore.mbg.mapper&quot; targetProject=&quot;src/main/resources&quot;&gt;\n        &lt;/sqlMapGenerator&gt;\n\n        &lt;!-- 生成 XxxMapper.java 接口--&gt;\n        &lt;javaClientGenerator targetPackage=&quot;com.codingmore.mbg.dao&quot; targetProject=&quot;src/main/java&quot; type=&quot;XMLMAPPER&quot;&gt;\n        &lt;/javaClientGenerator&gt;\n\n        &lt;table schema=&quot;&quot; tableName=&quot;user&quot; domainObjectName=&quot;User&quot;\n               enableCountByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot;\n               enableUpdateByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt;\n        &lt;/table&gt;\n    &lt;/context&gt;\n&lt;/generatorConfiguration&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>配置文件至少得包含一个 context</li><li>commentGenerator 用来配置生成的注释</li><li>jdbcConnection 用来链接数据库</li><li>javaTypeResolver 配置 JDBC 与 Java 的类型转换规则</li><li>javaModelGenerator 配置 po 生成的包路径和项目路径</li><li>sqlMapGenerator 配置 mapper.xml 文件生成的目录</li><li>javaClientGenerator 配置 mapper.java 文件生成的目录</li><li>一个 table 对应一张表，如果想同时生成多张表，需要配置多个 table</li></ul><p>更多配置信息可以参照下面这篇文章：</p>',11),r={href:"https://juejin.cn/post/6844903982582743048",target:"_blank",rel:"noopener noreferrer"},c=(0,t.Uk)("https://juejin.cn/post/6844903982582743048"),u=(0,t.uE)('<p>由于数据库表可能会发生变动，因此我们需要追加一个配置 <code>&lt;overwrite&gt;true&lt;/overwrite&gt;</code>，允许覆盖旧的文件。为了防止我们编写的 SQL 语句被覆盖掉，MyBatis Generator 只会覆盖旧的 po、dao、而 *mapper.xml 不会覆盖，而是追加。</p><p>Mybatis Generator 需要链接数据库，所以还需要添加数据库驱动依赖，就像这样：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;configuration&gt;\n&lt;/configuration&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;mysql&lt;/groupId&gt;\n    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n    &lt;version&gt;${mysql.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就会显得比较冗余，因为我们之前添加过了。好在 Maven 提供了 includeCompileDependencies 属性，可以让我们在插件中引用之前添加的依赖。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;includeCompileDependencies&gt;true&lt;/includeCompileDependencies&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>到此为止，mybatis-generator-maven-plugin 就算是配置完成了，完整内容如下所示：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;build&gt;\n    &lt;plugins&gt;\n        &lt;plugin&gt;\n            &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;\n            &lt;version&gt;1.3.7&lt;/version&gt;\n            &lt;configuration&gt;\n                &lt;configurationFile&gt;src/main/resources/mybatis-generator-config.xml&lt;/configurationFile&gt;\n                &lt;overwrite&gt;true&lt;/overwrite&gt;&lt;includeCompileDependencies&gt;true&lt;/includeCompileDependencies&gt;\n            &lt;/configuration&gt;\n        &lt;/plugin&gt;\n    &lt;/plugins&gt;\n&lt;/build&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置完成后可以双击运行 Maven 的插件 Mybatis Generator，没有问题的话，可以看到生成后的文件。</p><p><img src="https://cdn.jsdelivr.net/gh/thinkingme/thinkingme.github.io@master/images/kaiyuan/auto-generator-6.png" alt="" loading="lazy"></p><h3 id="二、使用-mybatis-plus-的-autogenerator" tabindex="-1"><a class="header-anchor" href="#二、使用-mybatis-plus-的-autogenerator" aria-hidden="true">#</a> 二、使用 MyBatis-Plus 的 AutoGenerator</h3><p>MyBatis-Plus（简写 MP）是 MyBatis 的增强工具，官方宣称 MP 和 MyBatis 的关系就好像魂斗罗中的 1P 和 2P，可谓好基友，天下走。</p><p><img src="https://cdn.jsdelivr.net/gh/thinkingme/thinkingme.github.io@master/images/kaiyuan/auto-generator-7.png" alt="" loading="lazy"></p><p>AutoGenerator 是 MyBatis-Plus 推出的代码生成器，可以快速生成 Entity、Mapper、Mapper XML、Service、Controller 等各个模块的代码，比 Mybatis Generator 更强大，开发效率更高。</p><p>通过前面的体验，想必大家确实感觉到了 Mybatis Generator 的繁琐，接下来，我们来体验一下 AutoGenerator，对比过后，大家心里就有答案了。</p><p>第一步，在 pom.xml 文件中添加 AutoGenerator 的依赖。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;\n    &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;\n    &lt;version&gt;3.4.1&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二步，添加模板引擎依赖，MyBatis-Plus 支持 Velocity（默认）、Freemarker、Beetl，这里使用默认的 Velocity 引擎。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;\n    &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt;\n    &lt;version&gt;2.3&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第三步，进行全局配置。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 全局配置</span>\n<span class="token class-name">GlobalConfig</span> gc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GlobalConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> projectPath <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;user.dir&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ngc<span class="token punctuation">.</span><span class="token function">setOutputDir</span><span class="token punctuation">(</span>projectPath <span class="token operator">+</span> <span class="token string">&quot;/src/main/java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ngc<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">&quot;沉默王二&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ngc<span class="token punctuation">.</span><span class="token function">setOpen</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ngc<span class="token punctuation">.</span><span class="token function">setDateType</span><span class="token punctuation">(</span><span class="token class-name">DateType</span><span class="token punctuation">.</span>ONLY_DATE<span class="token punctuation">)</span><span class="token punctuation">;</span>\ngc<span class="token punctuation">.</span><span class="token function">setSwagger2</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ngc<span class="token punctuation">.</span><span class="token function">setIdType</span><span class="token punctuation">(</span><span class="token class-name">IdType</span><span class="token punctuation">.</span>AUTO<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第四步，配置数据源。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 数据源配置</span>\n<span class="token class-name">DataSourceConfig</span> dsc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndsc<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql://ip:3306/codingmoretiny02?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndsc<span class="token punctuation">.</span><span class="token function">setDriverName</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.cj.jdbc.Driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndsc<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;codingmoretiny02&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndsc<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第五步，配置包。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 包配置</span>\n<span class="token class-name">PackageConfig</span> pc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\npc<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span><span class="token string">&quot;top.codingmore.mpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更多配置项可以到官方查看：</p>',25),p={href:"https://baomidou.com/pages/061573/",target:"_blank",rel:"noopener noreferrer"},d=(0,t.Uk)("https://baomidou.com/pages/061573/"),g=(0,t.uE)('<p>示例代码示例如下所示：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public class CodeGenerator {\n    public static void main(String[] args) {\n        // 代码生成器\n        AutoGenerator mpg = new AutoGenerator();\n        GlobalConfig gc = new GlobalConfig();\n        String projectPath = System.getProperty(&quot;user.dir&quot;);\n        gc.setOutputDir(projectPath + &quot;/src/main/java&quot;);\n        gc.setAuthor(&quot;沉默王二&quot;);\n\n        mpg.setGlobalConfig(gc);\n        DataSourceConfig dsc = new DataSourceConfig();\n        dsc.setDriverName(&quot;com.mysql.cj.jdbc.Driver&quot;);\n        mpg.setDataSource(dsc);\n\n        mpg.execute();\n    }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再来看一下运行后的效果，可以看到数据库表对应的 controller、service、entity、mapper 等等全有了——爽歪歪：</p><p><img src="https://cdn.jsdelivr.net/gh/thinkingme/thinkingme.github.io@master/images/kaiyuan/auto-generator-1.gif" alt="" loading="lazy"></p><h3 id="三、总结对比" tabindex="-1"><a class="header-anchor" href="#三、总结对比" aria-hidden="true">#</a> 三、总结对比</h3><p>对比 Mybatis 的 Generator 和 MyBatis-Plus 的 AutoGenerator，就可以得出这样一条结论：后者的配置更简单，开发效率也更高，功能也更强大——可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码。</p><p><strong>MyBatis-Plus 的确配得上 Plus 啊，确实优秀</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/thinkingme/thinkingme.github.io@master/images/kaiyuan/auto-generator-9.png" alt="" loading="lazy"></p><p>想要完整示例的话，可以到 GitHub 上查看：</p>',9),m={href:"https://github.com/itwanger/codingmore-learning/tree/main/codingmore-tiny-02",target:"_blank",rel:"noopener noreferrer"},v=(0,t.Uk)("https://github.com/itwanger/codingmore-learning/tree/main/codingmore-tiny-02"),b=(0,t._)("hr",null,null,-1),k=(0,t._)("p",null,[(0,t._)("img",{src:"https://cdn.jsdelivr.net/gh/thinkingme/thinkingme.github.io@master/images/xingbiaogongzhonghao.png",alt:"",loading:"lazy"})],-1),y={},h=(0,a(13860).Z)(y,[["render",function(n,e){const a=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)("div",null,[s,(0,t._)("blockquote",null,[(0,t._)("p",null,[(0,t._)("a",i,[l,(0,t.Wm)(a)])])]),o,(0,t._)("blockquote",null,[(0,t._)("p",null,[(0,t._)("a",r,[c,(0,t.Wm)(a)])])]),u,(0,t._)("blockquote",null,[(0,t._)("p",null,[(0,t._)("a",p,[d,(0,t.Wm)(a)])])]),g,(0,t._)("blockquote",null,[(0,t._)("p",null,[(0,t._)("a",m,[v,(0,t.Wm)(a)])])]),b,k])}]])},13860:(n,e)=>{e.Z=(n,e)=>{const a=n.__vccOpts||n;for(const[n,t]of e)a[n]=t;return a}}}]);