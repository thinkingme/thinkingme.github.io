"use strict";(self.webpackChunkcoding_road=self.webpackChunkcoding_road||[]).push([[8372],{6855:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-1917f792",path:"/coding-road/javaee/springboot/oss.html",title:"崩溃！我带的实习生竟然把图片直接存到了服务器上！",lang:"zh-CN",frontmatter:{category:["Java企业级开发"],tag:["Spring Boot"],summary:"崩溃！我带的实习生竟然把图片直接存到了服务器上！ 小二是新来的实习生，作为技术 leader，我给他安排了一个非常简单的练手任务，把前端 markdown 编辑器里上传的图片保存到服务器端，结果他真的就把图片直接保存到了服务器上，这下可把我气坏了，就不能搞个对象存储服务，比如说 OSS、MinIO？ 他理直气壮地反驳道：“谁让你不讲清楚，我去找老板把你开掉！",head:[["meta",{property:"og:url",content:"https://vuepress-theme-hope-v2-demo.mrhope.site/coding-road/javaee/springboot/oss.html"}],["meta",{property:"og:site_name",content:"coding-rode"}],["meta",{property:"og:title",content:"崩溃！我带的实习生竟然把图片直接存到了服务器上！"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-06-04T07:20:53.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:tag",content:"Spring Boot"}],["meta",{property:"article:modified_time",content:"2022-06-04T07:20:53.000Z"}]]},excerpt:"",headers:[{level:3,title:"一、开通 OSS",slug:"一、开通-oss",children:[]},{level:3,title:"二、整合 OSS",slug:"二、整合-oss",children:[]},{level:3,title:"三、拉取前端代码来测试 OSS 上传接口",slug:"三、拉取前端代码来测试-oss-上传接口",children:[]},{level:3,title:"四、利用 OSS 进行自动转链",slug:"四、利用-oss-进行自动转链",children:[]},{level:3,title:"五、小结",slug:"五、小结",children:[]}],git:{createdTime:1653617096e3,updatedTime:1654327253e3,contributors:[{name:"林振辉",email:"linzhenhui@apexsoft.com",commits:2}]},readingTime:{minutes:5.03,words:1508},filePathRelative:"coding-road/javaee/springboot/oss.md"}},93753:(n,s,a)=>{a.r(s),a.d(s,{default:()=>b});var t=a(95393);const p=(0,t.uE)('<h1 id="崩溃-我带的实习生竟然把图片直接存到了服务器上" tabindex="-1"><a class="header-anchor" href="#崩溃-我带的实习生竟然把图片直接存到了服务器上" aria-hidden="true">#</a> 崩溃！我带的实习生竟然把图片直接存到了服务器上！</h1><p>小二是新来的实习生，作为技术 leader，我给他安排了一个非常简单的练手任务，把前端 markdown 编辑器里上传的图片保存到服务器端，结果他真的就把图片直接保存到了服务器上，这下可把我气坏了，就不能搞个对象存储服务，比如说 OSS、MinIO？</p><p>他理直气壮地反驳道：“谁让你不讲清楚，我去找老板把你开掉！”我瞬间就怂了，说，“来来来，我手把手教你怎么把图片保存到 OSS 上，好不好？”</p><p>“不用了，还是我来教你吧。”小二非常自信，下面是他在 Spring Boot 应用中整合 OSS 做的记录。</p><p>特此声明：阿里云 OSS 的产品负责人看到后请自觉过来结算下推广费用（狗头）。真心讲：Spring Boot+OSS 在实际开发中挺常见的。</p><h3 id="一、开通-oss" tabindex="-1"><a class="header-anchor" href="#一、开通-oss" aria-hidden="true">#</a> 一、开通 OSS</h3><p>OSS 也就是 Object Storage Service，是阿里云提供的一套对象存储服务，国内的竞品还有七牛云的 Kodo 和腾讯云的 COS。</p><p>第一步，登录阿里云官网，搜索“OSS”关键字，进入 OSS 产品页。</p><p>第二步，如果是 OSS 新用户的话，可以享受 6 个月的新人专享优惠价，不过续费的时候还是会肉疼。</p><p>第三步，进入 OSS 管理控制台，点击「Bucket 列表」，点击「创建 Bucket」。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/90545c542bb7576f37d3e7d214d65ea2.png" alt="" loading="lazy"></p><p>Bucket 的词面意思是桶，这里指存储空间，就是用于存储对象的容器。注意读写权限为“公共读”，也就是允许互联网用户访问云空间上的图片。</p><p>第四步，点击「确定」就算是开通成功了。</p><h3 id="二、整合-oss" tabindex="-1"><a class="header-anchor" href="#二、整合-oss" aria-hidden="true">#</a> 二、整合 OSS</h3><p>第一步，在 pom.xml 文件中添加 OSS 的依赖。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;!-- 阿里云 OSS --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.aliyun.oss&lt;/groupId&gt;\n    &lt;artifactId&gt;aliyun-sdk-oss&lt;/artifactId&gt;\n    &lt;version&gt;3.10.2&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二步，在 application.yml 文件中添加 OSS 配置项。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>aliyun:\n  oss:\n      # oss对外服务的访问域名\n    endpoint: oss-cn-beijing.aliyuncs.com\n      # 访问身份验证中用到用户标识\n    accessKeyId: LTAI5\n      # 用户用于加密签名字符串和oss用来验证签名字符串的密钥\n    accessKeySecret: RYN\n      # oss的存储空间\n    bucketName: itwanger-oss1\n      # 上传文件大小(M)\n    maxSize: 3\n      # 上传文件夹路径前缀\n    dir:\n      prefix: codingmore/images/\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第三步，新增 OssClientConfig.java 配置类，主要就是通过 @Value 注解从配置文件中获取配置项，然后创建 OSSClient。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OssClientConfig</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;${aliyun.oss.endpoint}&quot;</span><span class="token punctuation">)</span>\n    <span class="token class-name">String</span> endpoint <span class="token punctuation">;</span>\n    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;${aliyun.oss.accessKeyId}&quot;</span><span class="token punctuation">)</span>\n    <span class="token class-name">String</span> accessKeyId <span class="token punctuation">;</span>\n    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;${aliyun.oss.accessKeySecret}&quot;</span><span class="token punctuation">)</span>\n    <span class="token class-name">String</span> accessKeySecret<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">OSSClient</span> <span class="token function">createOssClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">OSSClient</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">OSSClientBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">,</span> accessKeyId<span class="token punctuation">,</span> accessKeySecret<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第四步，新增文件上传接口 OssController.java，参数为 MultipartFile。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>\n<span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token string">&quot;上传&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/ossController&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OssController</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token keyword">private</span> <span class="token class-name">IOssService</span> ossService<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/upload&quot;</span><span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">)</span>\n    <span class="token annotation punctuation">@ResponseBody</span>\n    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">&quot;上传&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">ResultObject</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;file&quot;</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span> file<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">)</span>  <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">ResultObject</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>ossService<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第五步，新增 Service，将文件上传到 OSS，并返回文件保存路径。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OssServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IOssService</span><span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;${aliyun.oss.maxSize}&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> maxSize<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;${aliyun.oss.bucketName}&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> bucketName<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;${aliyun.oss.dir.prefix}&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> dirPrefix<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token keyword">private</span> <span class="token class-name">OSSClient</span> ossClient<span class="token punctuation">;</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token function">upload</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> inputStream<span class="token punctuation">,</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> objectName <span class="token operator">=</span> <span class="token function">getBucketName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 创建PutObject请求。</span>\n        ossClient<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> objectName<span class="token punctuation">,</span> inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token function">formatPath</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getBucketName</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">String</span> ext <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> extItem<span class="token operator">:</span>imageExtension<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>extItem<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                ext <span class="token operator">=</span> extItem<span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> dirPrefix<span class="token operator">+</span> <span class="token class-name">DateUtil</span><span class="token punctuation">.</span><span class="token function">today</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;/&quot;</span><span class="token operator">+</span> <span class="token class-name">IdUtil</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>ext<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">formatPath</span><span class="token punctuation">(</span><span class="token class-name">String</span> objectName<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;https://&quot;</span>  <span class="token operator">+</span>bucketName<span class="token operator">+</span><span class="token string">&quot;.&quot;</span><span class="token operator">+</span> ossClient<span class="token punctuation">.</span><span class="token function">getEndpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> objectName<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第六步，打开 Apipost，测试 OSS 上传接口，注意参数选择文件，点击发送后可以看到服务器端返回的图片链接。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d8c828ba200687eb61e86a7c474bcaaa.png" alt="" loading="lazy"></p><p>第七步，进入阿里云 OSS 后台管理，可以确认图片确实已经上传成功。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3b861901786b72335c400da1cd587007.png" alt="" loading="lazy"></p><h3 id="三、拉取前端代码来测试-oss-上传接口" tabindex="-1"><a class="header-anchor" href="#三、拉取前端代码来测试-oss-上传接口" aria-hidden="true">#</a> 三、拉取前端代码来测试 OSS 上传接口</h3><p>codingmore-admin-web 是编程喵（Codingmore）的前端管理项目，可以通过下面的地址拉取到本地。</p>',30),e={href:"https://github.com/itwanger/codingmore-admin-web",target:"_blank",rel:"noopener noreferrer"},o=(0,t.Uk)("https://github.com/itwanger/codingmore-admin-web"),c=(0,t.uE)('<p>执行 <code>yarn run dev</code> 命令后就可以启动 Web 管理端了，进入到文章编辑页面，选择一张图片进行上传，可以确认图片是可以正常从前端上传到服务器端，服务器端再上传到 OSS，之后再返回前端图片访问链接的。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/51dbf95c222354de4d9653a0ef270944.png" alt="" loading="lazy"></p><h3 id="四、利用-oss-进行自动转链" tabindex="-1"><a class="header-anchor" href="#四、利用-oss-进行自动转链" aria-hidden="true">#</a> 四、利用 OSS 进行自动转链</h3><p>第一步，在 PostsServiceImpl.java 中添加图片转链的方法，主要利用正则表达式找出文章内容中的外链，然后将外链的图片上传到 OSS，然后再替换掉原来的外链图片。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 匹配图片的 markdown 语法</span>\n<span class="token comment">// ![](hhhx.png)</span>\n<span class="token comment">// ![xx](hhhx.png?ax)</span>\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> IMG_PATTERN <span class="token operator">=</span> <span class="token string">&quot;\\\\!\\\\[.*\\\\]\\\\((.*)\\\\)&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleContentImg</span><span class="token punctuation">(</span><span class="token class-name">Posts</span> posts<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> content <span class="token operator">=</span> posts<span class="token punctuation">.</span><span class="token function">getPostContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Pattern</span> p <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>IMG_PATTERN<span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span>CASE_INSENSITIVE<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Matcher</span> m <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> imageTag <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;使用分组进行替换{}&quot;</span><span class="token punctuation">,</span> imageTag<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">String</span> imageUrl <span class="token operator">=</span> imageTag<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>imageTag<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;(&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> imageTag<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 确认是本站链接，不处理</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>imageUrl<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>iOssService<span class="token punctuation">.</span><span class="token function">getEndPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">continue</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// 通过线程池将图片上传到 OSS</span>\n        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> ossUploadImageExecutor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> iOssService<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span>imageUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>imageUrl<span class="token punctuation">,</span> future<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> oldUrl <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>oldUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n           <span class="token class-name">String</span> imageUrl <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n           content <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>oldUrl<span class="token punctuation">,</span> imageUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> <span class="token operator">|</span> <span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;获取图片链接出错{}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n    <span class="token punctuation">}</span>\n    posts<span class="token punctuation">.</span><span class="token function">setPostContent</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二步，在 OssServiceImpl.java 中添加根据外链地址上传图片到 OSS 的方法。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> objectName <span class="token operator">=</span> <span class="token function">getFileName</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        ossClient<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> objectName<span class="token punctuation">,</span> inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token function">formatOSSPath</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第三步，通过 Web 管理端来测试外链是否转链成功。先找两张外链的图片，可以看到 markdown 在预览的时候就不显示。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5d7f479d69f7139d1ceb26ac27e2b19f.png" alt="" loading="lazy"></p><p>然后我们点击发布，可以看到两张图片都正常显示了，因为转成了 OSS 的图片访问地址。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5acb7ffa8c9856b6c5471632ae2e9ecf.png" alt="" loading="lazy"></p><h3 id="五、小结" tabindex="-1"><a class="header-anchor" href="#五、小结" aria-hidden="true">#</a> 五、小结</h3>',12),i=(0,t.Uk)("综上来看，实习生小二在 Spring Boot 中整合 OSS 的代码还是挺靠谱的。也许 OSS+CDN 才是图床的最好解决方案，不过"),l={href:"https://mp.weixin.qq.com/s/VRmXn2_71yy3w-SvKTs1Fg",target:"_blank",rel:"noopener noreferrer"},u=(0,t.Uk)("阿里云的 HTTPS CDN 在 GitHub 上无法回源"),r=(0,t.Uk)("导致图片不显示的问题仍然没有得到有效的解决。"),k=(0,t._)("p",null,"需要源码的小伙伴可以直接到编程喵 🐱 源码路径拉取：",-1),d={href:"https://github.com/itwanger/coding-more",target:"_blank",rel:"noopener noreferrer"},m=(0,t.Uk)("https://github.com/itwanger/coding-more"),v=(0,t._)("hr",null,null,-1),g={},b=(0,a(13860).Z)(g,[["render",function(n,s){const a=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)("div",null,[p,(0,t._)("blockquote",null,[(0,t._)("p",null,[(0,t._)("a",e,[o,(0,t.Wm)(a)])])]),c,(0,t._)("p",null,[i,(0,t._)("a",l,[u,(0,t.Wm)(a)]),r]),k,(0,t._)("blockquote",null,[(0,t._)("p",null,[(0,t._)("a",d,[m,(0,t.Wm)(a)])])]),v])}]])},13860:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);