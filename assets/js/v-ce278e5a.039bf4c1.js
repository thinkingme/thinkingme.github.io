"use strict";(self.webpackChunkcoding_road=self.webpackChunkcoding_road||[]).push([[8379],{20391:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-ce278e5a",path:"/coding-road/java-core/basic-extra-meal/instanceof-jvm.html",title:"instanceof 关键字是如何实现的？",lang:"zh-CN",frontmatter:{category:["Java核心"],tag:["Java"],summary:'instanceof 关键字是如何实现的？ 小二那天去面试，碰到了这个问题：“instanceof 关键字是如何实现的？”面试官希望他能从底层来分析一下，结果小二没答上来，就来问我。 我唯唯诺诺，强装镇定，只好把 R 大的一篇回答甩给了他，并且叮嘱他：“认认真真看，玩完后要是还不明白，再来问我。。。” " 作者：RednaxelaFX，整理：沉默王二，链接：',head:[["meta",{property:"og:url",content:"https://vuepress-theme-hope-v2-demo.mrhope.site/coding-road/java-core/basic-extra-meal/instanceof-jvm.html"}],["meta",{property:"og:site_name",content:"coding-rode"}],["meta",{property:"og:title",content:"instanceof 关键字是如何实现的？"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-06-04T07:20:53.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:tag",content:"Java"}],["meta",{property:"article:modified_time",content:"2022-06-04T07:20:53.000Z"}]]},excerpt:"",headers:[{level:3,title:"场景一：月薪 3000 元一下的码农职位",slug:"场景一-月薪-3000-元一下的码农职位",children:[]},{level:3,title:"场景二：月薪 6000-8000 的 Java 研发职位",slug:"场景二-月薪-6000-8000-的-java-研发职位",children:[]},{level:3,title:"场景三：月薪 10000 的 Java 高级研发职位",slug:"场景三-月薪-10000-的-java-高级研发职位",children:[]},{level:3,title:"场景四：月薪 10000 以上的 Java 资深研发职位",slug:"场景四-月薪-10000-以上的-java-资深研发职位",children:[]}],git:{createdTime:1653617096e3,updatedTime:1654327253e3,contributors:[{name:"林振辉",email:"linzhenhui@apexsoft.com",commits:2}]},readingTime:{minutes:3.53,words:1058},filePathRelative:"coding-road/java-core/basic-extra-meal/instanceof-jvm.md"}},49528:(n,a,s)=>{s.r(a),s.d(a,{default:()=>U});var e=s(95393);const t=(0,e._)("h1",{id:"instanceof-关键字是如何实现的",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#instanceof-关键字是如何实现的","aria-hidden":"true"},"#"),(0,e.Uk)(" instanceof 关键字是如何实现的？")],-1),o=(0,e._)("p",null,[(0,e.Uk)("小二那天去面试，碰到了这个问题：“"),(0,e._)("strong",null,"instanceof 关键字是如何实现的"),(0,e.Uk)("？”面试官希望他能从底层来分析一下，结果小二没答上来，就来问我。")],-1),p=(0,e._)("p",null,"我唯唯诺诺，强装镇定，只好把 R 大的一篇回答甩给了他，并且叮嘱他：“认认真真看，玩完后要是还不明白，再来问我。。。”",-1),l=(0,e.Uk)("作者：RednaxelaFX，整理：沉默王二，链接："),c={href:"https://www.zhihu.com/question/21574535/answer/18998914",target:"_blank",rel:"noopener noreferrer"},i=(0,e.Uk)("https://www.zhihu.com/question/21574535/answer/18998914"),r=(0,e.uE)('<p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/basic-extra-meal/instanceof-jvm-b676fee6-bfd4-4ae9-9c7b-e488e345f775.gif" alt="" loading="lazy"></p><hr><h3 id="场景一-月薪-3000-元一下的码农职位" tabindex="-1"><a class="header-anchor" href="#场景一-月薪-3000-元一下的码农职位" aria-hidden="true">#</a> 场景一：月薪 3000 元一下的码农职位</h3><p>用 Java 伪代码来表现 instanceof 关键字在 Java 语言规范所描述的运行时语义，是这样的：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// obj instanceof T</span>\n<span class="token keyword">boolean</span> result<span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token class-name">T</span> temp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span> <span class="token comment">// checkcast</span>\n      result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassCastException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用中文说就是：如果有表达式 <code>obj instanceof T</code>，那么如果 obj 不为 null 并且 (T) obj 不抛 ClassCastException 异常则该表达式值为 true ，否则值为 false 。</p><p>如果面试官说“这不是废话嘛”，进入场景二。</p><h3 id="场景二-月薪-6000-8000-的-java-研发职位" tabindex="-1"><a class="header-anchor" href="#场景二-月薪-6000-8000-的-java-研发职位" aria-hidden="true">#</a> 场景二：月薪 6000-8000 的 Java 研发职位</h3><p>JVM 有一条名为 instanceof 的指令，而 Java 源码编译到 Class 文件时会把 Java 语言中的 instanceof 运算符映射到 JVM 的 instanceof 指令上。</p><p>javac 是这样做的：</p>',10),u=(0,e._)("li",null,'instanceof 是 javac 能识别的一个关键字，对应到 Token.INSTANCEOF 的 token 类型。做词法分析的时候扫描到"instanceof"关键字就映射到了一个 Token.INSTANCEOF token。',-1),d=(0,e.Uk)("该编译器的抽象语法树节点有一个 JCTree.JCInstanceOf 类用于表示 instanceof 运算。做语法分析的时候解析到"),k={href:"https://tobebetterjavaer.com/oo/instanceof.html",target:"_blank",rel:"noopener noreferrer"},v=(0,e.Uk)("instanceof 运算符"),m=(0,e.Uk)("就会生成这个 JCTree.JCInstanceof 类型的节点。"),b=(0,e._)("li",null,"中途还得根据 Java 语言规范对 instanceof 运算符的编译时检查的规定把有问题的情况找出来。",-1),f=(0,e._)("li",null,"到最后生成字节码的时候为 JCTree.JCInstanceof 节点生成 instanceof 字节码指令。",-1),h=(0,e.uE)('<p>回答到这层面就已经能解决好些实际问题了，如果面试官还说，“这不还是废话嘛”，进入场景三。</p><h3 id="场景三-月薪-10000-的-java-高级研发职位" tabindex="-1"><a class="header-anchor" href="#场景三-月薪-10000-的-java-高级研发职位" aria-hidden="true">#</a> 场景三：月薪 10000 的 Java 高级研发职位</h3><p>先简单介绍一下 instanceof 的字节码：</p><ul><li>操作：确定对象是否为给定的类型</li><li>指令格式：instanceof|indexbyte1|indexbyte2</li><li>指令执行前后的栈顶状态： <ul><li>……，objectref=&gt;</li><li>……，result</li></ul></li></ul><p>再简单描述下：indexbyte1 和 indexbyte2 用于构造对当前类的常量池的索引，objectref 为 reference 类型，可以是某个类，数组的实例或者是接口。</p><p>基本的实现过程：对 indexbyte1 和 indexbyte2 构造的常量池索引进行解析，然后根据 java 规范判断解析的类是不是 objectref 的一个实例，最后在栈顶写入结果。</p><p>基本上就是根据规范来 YY 下实现，就能八九不离十蒙混过关了。</p><p>如果面试官还不满意，进入场景四。</p><h3 id="场景四-月薪-10000-以上的-java-资深研发职位" tabindex="-1"><a class="header-anchor" href="#场景四-月薪-10000-以上的-java-资深研发职位" aria-hidden="true">#</a> 场景四：月薪 10000 以上的 Java 资深研发职位</h3><p>这个岗位注重性能调优什么的，R 大说可以上论文了：</p>',10),g={href:"https://dl.acm.org/doi/10.1145/583810.583821",target:"_blank",rel:"noopener noreferrer"},j=(0,e.Uk)("https://dl.acm.org/doi/10.1145/583810.583821"),y=(0,e.uE)('<p>论文我也看不懂，所以这里就不 BB 了。（逃</p><p>篇论文描述了 HotSpot VM 做子类型判断的算法，这里简单补充一下 JDK6 至今的 HotSpot VM 实际采用的算法：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">S</span><span class="token punctuation">.</span><span class="token function">is_subtype_of</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">int</span> off <span class="token operator">=</span> <span class="token class-name">T</span><span class="token punctuation">.</span>offset<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">S</span> <span class="token operator">==</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">T</span> <span class="token operator">==</span> <span class="token class-name">S</span><span class="token punctuation">[</span>off<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>off <span class="token operator">!=</span> <span class="token operator">&amp;</span>cache<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token class-name">S</span><span class="token punctuation">.</span><span class="token function">scan_secondary_subtype_array</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">S</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token class-name">T</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HotSpot VM 的两个编译器，Client Compiler (C1) 与 Server Compiler (C2) 各自对子类型判断的实现有更进一步的优化。实际上在 JVM 里，instanceof 的功能就实现了 4 份，VM runtime、解释器、C1、C2 各一份。</p><p>VM runtime 的：</p>',5),_={href:"http://hg.openjdk.java.net/jdk7u/jdk7u/hotspot/file/tip/src/share/vm/oops/oop.inline.hpp",target:"_blank",rel:"noopener noreferrer"},w=(0,e.Uk)("http://hg.openjdk.java.net/jdk7u/jdk7u/hotspot/file/tip/src/share/vm/oops/oop.inline.hpp"),x=(0,e._)("p",null,"分享的最后，二哥简单来说一下。",-1),J=(0,e._)("p",null,"这个问题涉及语法细节，涉及 jvm 实现，涉及编译器，还涉及一点点数据结构设计，比较考验一个 Java 程序员的内功，如果要回答到论文的程度，那真的是，面试官也得提前备好知识点，不然应聘者的回答啥也听不懂就挺尴尬的。",-1),C=(0,e._)("p",null,"反正 R 大回答里的很多细节我都是第一次听，逃了逃了。。。。。。",-1),T=(0,e._)("p",null,[(0,e._)("img",{src:"http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/xingbiaogongzhonghao.png",alt:"",loading:"lazy"})],-1),S={},U=(0,s(13860).Z)(S,[["render",function(n,a){const s=(0,e.up)("ExternalLinkIcon");return(0,e.wg)(),(0,e.iD)("div",null,[t,o,p,(0,e._)("blockquote",null,[(0,e._)("p",null,[l,(0,e._)("a",c,[i,(0,e.Wm)(s)])])]),r,(0,e._)("ul",null,[u,(0,e._)("li",null,[d,(0,e._)("a",k,[v,(0,e.Wm)(s)]),m]),b,f]),h,(0,e._)("blockquote",null,[(0,e._)("p",null,[(0,e._)("a",g,[j,(0,e.Wm)(s)])])]),y,(0,e._)("blockquote",null,[(0,e._)("p",null,[(0,e._)("a",_,[w,(0,e.Wm)(s)])])]),x,J,C,T])}]])},13860:(n,a)=>{a.Z=(n,a)=>{const s=n.__vccOpts||n;for(const[n,e]of a)s[n]=e;return s}}}]);