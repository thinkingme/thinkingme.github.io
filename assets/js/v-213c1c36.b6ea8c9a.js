"use strict";(self.webpackChunkcoding_road=self.webpackChunkcoding_road||[]).push([[259],{20245:(n,a,s)=>{s.r(a),s.d(a,{data:()=>t});const t={key:"v-213c1c36",path:"/coding-road/java-core/juc/LockSupport.html",title:"深入理解 Java 并发线程阻塞唤醒类 LockSupport",lang:"zh-CN",frontmatter:{category:["Java核心","并发编程"],tag:["Java"],summary:"深入理解 Java 并发线程阻塞唤醒类 LockSupport LockSupport 位于 java.util.concurrent.locks 包下，有兴趣的可以直接去看源码，该类的方法并不是很多。LockSupprot 是线程的阻塞原语，用来阻塞线程和唤醒线程。每个使用 LockSupport 的线程都会与一个许可关联，如果该许可可用，并且可在线程中使",head:[["meta",{property:"og:url",content:"https://vuepress-theme-hope-v2-demo.mrhope.site/coding-road/java-core/juc/LockSupport.html"}],["meta",{property:"og:site_name",content:"coding-rode"}],["meta",{property:"og:title",content:"深入理解 Java 并发线程阻塞唤醒类 LockSupport"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-06-04T07:20:53.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:tag",content:"Java"}],["meta",{property:"article:modified_time",content:"2022-06-04T07:20:53.000Z"}]]},excerpt:"",headers:[{level:2,title:"阻塞线程",slug:"阻塞线程",children:[]},{level:2,title:"唤醒线程",slug:"唤醒线程",children:[]}],git:{createdTime:1653617096e3,updatedTime:1654327253e3,contributors:[{name:"林振辉",email:"linzhenhui@apexsoft.com",commits:2}]},readingTime:{minutes:3.4,words:1020},filePathRelative:"coding-road/java-core/juc/LockSupport.md"}},57149:(n,a,s)=>{s.r(a),s.d(a,{default:()=>m});var t=s(95393);const p=(0,t.uE)('<h1 id="深入理解-java-并发线程阻塞唤醒类-locksupport" tabindex="-1"><a class="header-anchor" href="#深入理解-java-并发线程阻塞唤醒类-locksupport" aria-hidden="true">#</a> 深入理解 Java 并发线程阻塞唤醒类 LockSupport</h1><p>LockSupport 位于 java.util.concurrent.locks 包下，有兴趣的可以直接去看源码，该类的方法并不是很多。LockSupprot 是线程的阻塞原语，用来阻塞线程和唤醒线程。每个使用 LockSupport 的线程都会与一个许可关联，如果该许可可用，并且可在线程中使用，则调用 park()将会立即返回，否则可能阻塞。如果许可尚不可用，则可以调用 unpark 使其可用。但是注意许可<strong>不可重入</strong>，也就是说只能调用一次 park()方法，否则会一直阻塞。</p><p>LockSupport 中的方法不多，这里将这些方法做一个总结：</p><h2 id="阻塞线程" tabindex="-1"><a class="header-anchor" href="#阻塞线程" aria-hidden="true">#</a> <strong>阻塞线程</strong></h2><ol><li><code>void park()</code>：阻塞当前线程，如果调用 unpark 方法或者当前线程被中断，从能从 park()方法中返回</li><li><code>void park(Object blocker)</code>：功能同方法 1，入参增加一个 Object 对象，用来记录导致线程阻塞的阻塞对象，方便进行问题排查；</li><li><code>void parkNanos(long nanos)</code>：阻塞当前线程，最长不超过 nanos 纳秒，增加了超时返回的特性；</li><li><code>void parkNanos(Object blocker, long nanos)</code>：功能同方法 3，入参增加一个 Object 对象，用来记录导致线程阻塞的阻塞对象，方便进行问题排查；</li><li><code>void parkUntil(long deadline)</code>：阻塞当前线程，知道 deadline；</li><li><code>void parkUntil(Object blocker, long deadline)</code>：功能同方法 5，入参增加一个 Object 对象，用来记录导致线程阻塞的阻塞对象，方便进行问题排查；</li></ol><h2 id="唤醒线程" tabindex="-1"><a class="header-anchor" href="#唤醒线程" aria-hidden="true">#</a> <strong>唤醒线程</strong></h2><p><code>void unpark(Thread thread)</code>:唤醒处于阻塞状态的指定线程</p><p>实际上 LockSupport 阻塞和唤醒线程的功能是依赖于 sun.misc.Unsafe，这是一个很底层的类，有兴趣的可以去查阅资料，比如 park()方法的功能实现则是靠 unsafe.park()方法。</p><p>另外在阻塞线程这一系列方法中还有一个很有意思的现象就是，每个方法都会新增一个带有 Object 的阻塞对象的重载方法。那么增加了一个 Object 对象的入参会有什么不同的地方了？示例代码很简单就不说了，直接看 dump 线程的信息。</p><p><strong>调用 park()方法 dump 线程</strong>：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token string">&quot;main&quot;</span> #<span class="token number">1</span> prio<span class="token operator">=</span><span class="token number">5</span> os_prio<span class="token operator">=</span><span class="token number">0</span> tid<span class="token operator">=</span><span class="token number">0x02cdcc00</span> nid<span class="token operator">=</span><span class="token number">0x2b48</span> waiting on condition <span class="token punctuation">[</span><span class="token number">0x00d6f000</span><span class="token punctuation">]</span>\n   <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Thread<span class="token punctuation">.</span>State</span><span class="token operator">:</span> WAITING <span class="token punctuation">(</span>parking<span class="token punctuation">)</span>\n        at <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>Unsafe</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token class-name">Native</span> <span class="token class-name">Method</span><span class="token punctuation">)</span>\n        at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span>LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token class-name">LockSupport</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">304</span><span class="token punctuation">)</span>\n        at <span class="token class-name"><span class="token namespace">learn<span class="token punctuation">.</span></span>LockSupportDemo</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">LockSupportDemo</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">7</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>调用 park(Object blocker)方法 dump 线程</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&quot;main&quot; #1 prio=5 os_prio=0 tid=0x0069cc00 nid=0x6c0 waiting on condition [0x00dcf000]\n   java.lang.Thread.State: WAITING (parking)\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  &lt;0x048c2d18&gt; (a java.lang.String)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\n        at learn.LockSupportDemo.main(LockSupportDemo.java:7)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过分别调用这两个方法然后 dump 线程信息可以看出，带 Object 的 park 方法相较于无参的 park 方法会增加 <code>parking to wait for &lt;0x048c2d18&gt; (a java.lang.String）</code>的信息，这种信息就类似于记录“案发现场”，有助于工程人员能够迅速发现问题解决问题。</p><p>有个有意思的事情是，我们都知道如果使用 synchronzed 阻塞了线程 dump 线程时都会有阻塞对象的描述，在 java 5 推出 LockSupport 时遗漏了这一点，在 java 6 时进行了补充。</p><p>还有一点需要需要的是：<strong>synchronzed 致使线程阻塞，线程会进入到 BLOCKED 状态，而调用 LockSupprt 方法阻塞线程会致使线程进入到 WAITING 状态。</strong></p><p>用一个很简单的例子说说这些方法怎么用。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockSupportDemo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n            <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;被唤醒&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>thread 线程调用 LockSupport.park()致使 thread 阻塞，当 mian 线程睡眠 3 秒结束后通过 LockSupport.unpark(thread)方法唤醒 thread 线程,thread 线程被唤醒执行后续操作。另外，还有一点值得关注的是，<strong><code>LockSupport.unpark(thread)</code>可以指定线程对象唤醒指定的线程</strong>。</p><hr>',20),e=(0,t._)("p",null,"编辑：沉默王二，内容大部分来源以下三个开源仓库：",-1),o={href:"http://concurrent.redspider.group/",target:"_blank",rel:"noopener noreferrer"},c=(0,t.Uk)("深入浅出 Java 多线程"),l={href:"https://github.com/CL0610/Java-concurrency",target:"_blank",rel:"noopener noreferrer"},i=(0,t.Uk)("并发编程知识总结"),u={href:"https://github.com/CoderLeixiaoshuai/java-eight-part",target:"_blank",rel:"noopener noreferrer"},r=(0,t.Uk)("Java 八股文"),k=(0,t._)("img",{src:"http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/xingbiaogongzhonghao.png"},null,-1),d={},m=(0,s(13860).Z)(d,[["render",function(n,a){const s=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)("div",null,[p,(0,t._)("blockquote",null,[e,(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("a",o,[c,(0,t.Wm)(s)])]),(0,t._)("li",null,[(0,t._)("a",l,[i,(0,t.Wm)(s)])]),(0,t._)("li",null,[(0,t._)("a",u,[r,(0,t.Wm)(s)])])])]),k])}]])},13860:(n,a)=>{a.Z=(n,a)=>{const s=n.__vccOpts||n;for(const[n,t]of a)s[n]=t;return s}}}]);