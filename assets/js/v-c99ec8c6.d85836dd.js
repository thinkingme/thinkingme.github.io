"use strict";(self.webpackChunkcoding_road=self.webpackChunkcoding_road||[]).push([[592],{90966:(n,e,a)=>{a.r(e),a.d(e,{data:()=>s});const s={key:"v-c99ec8c6",path:"/coding-road/java-core/basic-extra-meal/jdk-while-for-wuxian-xunhuan.html",title:"为什么 JDK 源码中，无限循环大多使用 for(;;)而不是 while(true)?",lang:"zh-CN",frontmatter:{category:["Java核心"],tag:["Java"],summary:'为什么 JDK 源码中，无限循环大多使用 for(;;)而不是 while(true)? 在知乎上看到 R 大的这篇回答，着实感觉需要分享给在座的各位 javaer 们，真心透彻。 " https://www.zhihu.com/question/52311366/answer/130090347" --- 首先是先问是不是再问为什么系列。 在 JDK8u ',head:[["meta",{property:"og:url",content:"https://vuepress-theme-hope-v2-demo.mrhope.site/coding-road/java-core/basic-extra-meal/jdk-while-for-wuxian-xunhuan.html"}],["meta",{property:"og:site_name",content:"coding-rode"}],["meta",{property:"og:title",content:"为什么 JDK 源码中，无限循环大多使用 for(;;)而不是 while(true)?"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-06-04T08:56:49.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:tag",content:"Java"}],["meta",{property:"article:modified_time",content:"2022-06-04T08:56:49.000Z"}]]},excerpt:"",headers:[],git:{createdTime:1653617096e3,updatedTime:1654333009e3,contributors:[{name:"林振辉",email:"linzhenhui@apexsoft.com",commits:2},{name:"thinkingme",email:"linzhenhuigg@gmail.com",commits:1}]},readingTime:{minutes:2.62,words:786},filePathRelative:"coding-road/java-core/basic-extra-meal/jdk-while-for-wuxian-xunhuan.md"}},67260:(n,e,a)=>{a.r(e),a.d(e,{default:()=>p});var s=a(95393);const i=(0,s._)("h1",{id:"为什么-jdk-源码中-无限循环大多使用-for-而不是-while-true",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#为什么-jdk-源码中-无限循环大多使用-for-而不是-while-true","aria-hidden":"true"},"#"),(0,s.Uk)(" 为什么 JDK 源码中，无限循环大多使用 for(;;)而不是 while(true)?")],-1),t=(0,s._)("p",null,"在知乎上看到 R 大的这篇回答，着实感觉需要分享给在座的各位 javaer 们，真心透彻。",-1),o={href:"https://www.zhihu.com/question/52311366/answer/130090347",target:"_blank",rel:"noopener noreferrer"},l=(0,s.Uk)("https://www.zhihu.com/question/52311366/answer/130090347"),r=(0,s.uE)('<hr><p>首先是先问是不是再问为什么系列。</p><p>在 JDK8u 的 jdk 项目下做个很粗略的搜索：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>mymbp:/Users/me/workspace/jdk8u/jdk/src\n$ egrep -nr &quot;for \\\\(\\\\s?;\\\\s?;&quot; . | wc -l\n     369\nmymbp:/Users/me/workspace/jdk8u/jdk/src\n$ egrep -nr &quot;while \\\\(true&quot; . | wc -l\n     323\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并没有差多少。</p><p>其次，for (;😉 在 Java 中的来源。个人看法是喜欢用这种写法的人，追根溯源是受到 C 语言里的写法的影响。这些人不一定是自己以前写 C 习惯了这样写，而可能是间接受以前写 C 的老师、前辈的影响而习惯这样写的。</p><p>在 C 语言里，如果不 include 某些头文件或者自己声明的话，是没有内建的_Bool / bool 类型，也没有 TRUE / FALSE / true / false 这些_Bool / bool 类型值的字面量的。</p><p>所以，假定没有 include 那些头文件或者自己 define 出上述字面量，一个不把循环条件写在 while (...)括号里的 while 语句，最常见的是这样：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>while (1) {\n    /* ... */\n  }\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>…但不是所有人都喜欢看到那个魔数“1”的。</p><p>而用 for (;;)来表达不写循环条件（也就是循环体内不用 break 或 goto 就会是无限循环）则非常直观——这就是 for 语句本身的功能，而且不需要写任何魔数。所以这个写法就流传下来了。</p><p>顺带一提，在 Java 里我是倾向于写 while (true)的，不过我也不介意别人在他们自己的项目里写 for (;😉。</p><p>=====================================</p><p>至于 Java 里 while (true)与 for (;;)哪个“效率更高”。这种规范没有规定的问题，答案都是“看实现”，毕竟实现只要保证语义符合规范就行了，而效率并不在规范管得着的范畴内。</p><p>以 Oracle/Sun JDK8u / OpenJDK8u 的实现来看，首先看 javac 对下面俩语句的编译结果：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n<span class="token comment">/*\n  public void foo();\n    Code:\n      stack=1, locals=2, args_size=1\n         0: iconst_0\n         1: istore_1\n         2: iinc          1, 1\n         5: goto          2\n*/</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>```\n\n<span class="token comment">/*\n  public void bar();\n    Code:\n      stack=1, locals=2, args_size=1\n         0: iconst_0\n         1: istore_1\n         2: iinc          1, 1\n         5: goto          2\n*/</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>连 javac 这种几乎什么优化都不做（只做了 Java 语言规范规定一定要做的常量折叠，和非常少量别的优化）的编译器，对上面俩版本的代码都生成了一样的字节码。后面到解释执行、JIT 编译之类的就不用说了，输入都一样，输出也不会不同。</p><hr><p>分享的最后，二哥简单说几句。</p><p>可能在我们普通人眼中，这种问题完全没有求真的必要性，但 R 大认真去研究了，并且得出了非常令人信服的答案。</p><p>所以，牛逼之人必有三连之处啊。</p><p>以后就可以放心大胆在代码里写 <code>for(;;) while(true)</code> 这样的死循环了。</p><p><img src="https://cdn.jsdelivr.net/gh/thinkingme/thinkingme.github.io@master/images/xingbiaogongzhonghao.png" alt="" loading="lazy"></p>',25),c={},p=(0,a(13860).Z)(c,[["render",function(n,e){const a=(0,s.up)("ExternalLinkIcon");return(0,s.wg)(),(0,s.iD)("div",null,[i,t,(0,s._)("blockquote",null,[(0,s._)("p",null,[(0,s._)("a",o,[l,(0,s.Wm)(a)])])]),r])}]])},13860:(n,e)=>{e.Z=(n,e)=>{const a=n.__vccOpts||n;for(const[n,s]of e)a[n]=s;return a}}}]);