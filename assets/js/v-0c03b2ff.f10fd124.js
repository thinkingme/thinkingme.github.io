"use strict";(self.webpackChunkcoding_road=self.webpackChunkcoding_road||[]).push([[7018],{68128:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-0c03b2ff",path:"/coding-road/design-patterns/observe.html",title:"Java 中的观察者，监听器，发布订阅模式",lang:"zh-CN",frontmatter:{summary:"Java 中的观察者，监听器，发布订阅模式 一、基础：类的四大基本关系 a.关联关系：如 A 类调用 B 类。 b.继承关系：如 A 类是 B 类的父类。 c.聚合关系：如装橘子的箱子，箱子是否存在与里面装没装橘子没有任何关系，也就是说橘子不会影响箱子的存在。 d.组合关系：如一个小组，小组是否存在与小组中是否有组员是息息相关的，如果没有组员，小组就不存在了",head:[["meta",{property:"og:url",content:"https://vuepress-theme-hope-v2-demo.mrhope.site/coding-road/design-patterns/observe.html"}],["meta",{property:"og:site_name",content:"coding-rode"}],["meta",{property:"og:title",content:"Java 中的观察者，监听器，发布订阅模式"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-06-04T07:20:53.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:modified_time",content:"2022-06-04T07:20:53.000Z"}]]},excerpt:"",headers:[{level:2,title:"一、基础：类的四大基本关系",slug:"一、基础-类的四大基本关系",children:[]},{level:2,title:"二、概念解析",slug:"二、概念解析",children:[{level:3,title:"监听器模式：",slug:"监听器模式",children:[]},{level:3,title:"观察者模式：",slug:"观察者模式",children:[]},{level:3,title:"观察者和发布订阅模式的区别",slug:"观察者和发布订阅模式的区别",children:[]},{level:3,title:"观察者和监听器模式区别",slug:"观察者和监听器模式区别",children:[]},{level:3,title:"类图解析",slug:"类图解析",children:[]}]},{level:2,title:"三、代码解析",slug:"三、代码解析",children:[{level:3,title:"监听器模式",slug:"监听器模式-1",children:[]},{level:3,title:"观察者模式",slug:"观察者模式-1",children:[]}]},{level:2,title:"总结",slug:"总结",children:[]},{level:2,title:"应用",slug:"应用",children:[{level:3,title:"Eureka 中的监听模式",slug:"eureka-中的监听模式",children:[]}]}],git:{createdTime:1654327253e3,updatedTime:1654327253e3,contributors:[{name:"林振辉",email:"linzhenhui@apexsoft.com",commits:1}]},readingTime:{minutes:10.92,words:3276},filePathRelative:"coding-road/design-patterns/observe.md"}},47942:(n,s,a)=>{a.r(s),a.d(s,{default:()=>S});var e=a(95393);const t=(0,e.uE)('<h1 id="java-中的观察者-监听器-发布订阅模式" tabindex="-1"><a class="header-anchor" href="#java-中的观察者-监听器-发布订阅模式" aria-hidden="true">#</a> Java 中的观察者，监听器，发布订阅模式</h1><h2 id="一、基础-类的四大基本关系" tabindex="-1"><a class="header-anchor" href="#一、基础-类的四大基本关系" aria-hidden="true">#</a> 一、基础：类的四大基本关系</h2><p>a.关联关系：如 A 类调用 B 类。</p><p>b.继承关系：如 A 类是 B 类的父类。</p><p>c.聚合关系：如装橘子的箱子，箱子是否存在与里面装没装橘子没有任何关系，也就是说橘子不会影响箱子的存在。</p><p>d.组合关系：如一个小组，小组是否存在与小组中是否有组员是息息相关的，如果没有组员，小组就不存在了。</p><h2 id="二、概念解析" tabindex="-1"><a class="header-anchor" href="#二、概念解析" aria-hidden="true">#</a> 二、概念解析</h2><h3 id="监听器模式" tabindex="-1"><a class="header-anchor" href="#监听器模式" aria-hidden="true">#</a> 监听器模式：</h3><p>事件源经过事件的封装传给监听器，当事件源触发事件后，监听器接收到事件对象可以回调事件的方法</p><h3 id="观察者模式" tabindex="-1"><a class="header-anchor" href="#观察者模式" aria-hidden="true">#</a> 观察者模式：</h3><p>观察者(Observer)相当于事件监听者，被观察者(Observable)相当于事件源和事件，执行逻辑时通知 observer 即可触发 oberver 的 update,同时可传被观察者和参数</p><h3 id="观察者和发布订阅模式的区别" tabindex="-1"><a class="header-anchor" href="#观察者和发布订阅模式的区别" aria-hidden="true">#</a> 观察者和发布订阅模式的区别</h3><p>大多数的回答都是：Publishers + Subscribers = Observer Pattern，24 种基本的设计模式并没有发布-订阅模式，发布订阅模式属于并发型模式；像典型的 Mq；这两种相似单并不可以划等号。 我们来重新来回顾一下这两种模式： <strong>Observer Pattern</strong>     观察者模式定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。而观察者模式属于行为型模式，行为型模式关注的是对象之间的通讯，观察者模式就是观察者和被观察者之间的通讯。     观察者模式有一个别名叫“订阅—发布模式”。报纸大家都订过吧，当你订阅了一份报纸，每天都会有一份最新的报纸送到你手上，有多少人订阅报纸，报社就会发多少份报纸，这是典型的订阅—发布模式，报社和订报纸的客户就是上面文章开头所说的“一对多”的依赖关系。</p><p><img src="D:\\workspace\\coding-road\\docs\\coding-road\\design-patterns\\observe.assets\\image-20220530095543437.png" alt="image-20220530095543437" loading="lazy"></p><p><strong>Pub-Sub Pattern</strong>     在“发布者-订阅者”模式中，称为发布者的消息发送者不会将消息编程为直接发送给称为订阅者的特定接收者。这意味着发布者和订阅者不知道彼此的存在。存在第三个组件，称为代理或消息代理或事件总线，它由发布者和订阅者都知道，它过滤所有传入的消息并相应地分发它们。换句话说，pub-sub 是用于在不同系统组件之间传递消息的模式，而这些组件不知道关于彼此身份的任何信息。经纪人如何过滤所有消息？实际上，有几个消息过滤过程。最常用的方法有：基于主题和基于内容的。</p><p><img src="D:\\workspace\\coding-road\\docs\\coding-road\\design-patterns\\observe.assets\\image-20220530095601089.png" alt="image-20220530095601089" loading="lazy"></p><p>简而言之，这两种模式之间的主要区别可以如下所示：</p><p><img src="D:\\workspace\\coding-road\\docs\\coding-road\\design-patterns\\observe.assets\\image-20220530095609730.png" alt="image-20220530095609730" loading="lazy"></p><p>观察者模式和发布订阅模式最大的区别就是发布订阅模式有个<strong>事件调度中心</strong>。</p><p><img src="D:\\workspace\\coding-road\\docs\\coding-road\\design-patterns\\observe.assets\\image-20220530095638802.png" alt="image-20220530095638802" loading="lazy"></p><p>从图中可以看出，观察者模式中观察者和目标直接进行交互，而发布订阅模式中统一由调度中心进行处理，订阅者和发布者互不干扰。这样一方面实现了解耦，还有就是可以实现更细粒度的一些控制。比如发布者发布了很多消息，但是不想所有的订阅者都接收到，就可以在调度中心做一些处理，类似于权限控制之类的。还可以做一些节流操作。</p><h3 id="观察者和监听器模式区别" tabindex="-1"><a class="header-anchor" href="#观察者和监听器模式区别" aria-hidden="true">#</a> 观察者和监听器模式区别</h3><p>监听器监听自己感兴趣的事件，一旦该事件被触发或改变，立即得到通知，做出响应，监听器一般是接口，用来约定调用的方式。当事件源对象上发生操作时，它会将调用事件监听器的一个方法，并在调用该方法时传递事件对象过去。事件监听器实现类通常是由开发人员编写，开发人员通过事件对象拿到事件源，从而对事件源上的操作进行处理。  <strong>总结</strong>： 当事件源对象上发生操作时，将会调用事件监听器的一个方法，并在调用该方法时把事件对象传递过去。  <img src="D:\\workspace\\coding-road\\docs\\coding-road\\design-patterns\\observe.assets\\image-20220530095729566.png" alt="image-20220530095729566" loading="lazy"></p><p><img src="D:\\workspace\\coding-road\\docs\\coding-road\\design-patterns\\observe.assets\\image-20220530095752334.png" alt="image-20220530095752334" loading="lazy"></p><p>观察者模式原理和监听器一样的，使用的关键在搞清楚什么是观察者、什么是被观察者。观察者(Observer)相当于事件监听器。被观察者(Observable)相当于事件源和事件，执行事件源通知逻辑时，将会回调 Observer 的回调方法 update，只是在观察者模式中常用的是反射，而在监听器模式中使用的是 callback。</p><p>图解两者区别：</p><p><img src="D:\\workspace\\coding-road\\docs\\coding-road\\design-patterns\\observe.assets\\image-20220530095809635.png" alt="image-20220530095809635" loading="lazy"></p><h3 id="类图解析" tabindex="-1"><a class="header-anchor" href="#类图解析" aria-hidden="true">#</a> 类图解析</h3><ol><li><strong>事件-监听机制</strong></li></ol><p>事件源经过事件的封装传给监听器，当事件源触发事件后，监听器接收到事件对象可以回调事件的方法。</p><p><img src="D:\\workspace\\coding-road\\docs\\coding-road\\design-patterns\\observe.assets\\image-20220530100607110.png" alt="image-20220530100607110" loading="lazy"></p><ol start="2"><li><strong>观察者模式</strong> 观察者(Observer)相当于事件监听者（监听器），被观察者(Observable)相当于事件源和事件，执行逻辑时通知 observer 即可触发 oberver 的 update,同时可传被观察者和参数。简化了事件-监听模式的实现。</li></ol><p><img src="D:\\workspace\\coding-road\\docs\\coding-road\\design-patterns\\observe.assets\\image-20220530100633169.png" alt="image-20220530100633169" loading="lazy"></p><ol start="3"><li><strong>对比</strong></li></ol><p>（1） 从 uml 图上也可以看出，Observer 的实现相对简单，event-listener 需要实现三个角色，observer-observable 需要实现两个角色。</p><p>（2）Observable 的 api 已经把对观察者的注册，删除等定义好了，而且是线程安全的。而 event-listener 需要使用者自己实现。</p><p>（3）两者都需要自己定义并实现触发事件的通知。但 Observable 需要注意要在通知 Observer 之前调用 jdk 提供的 setChanged()。</p><p>（4）event-listener 是传统的 c/s 界面事件模型，分事件源和事件（状态）角色，事件源要经过事件的包装、成为事件的属性之一再传递给事件监听/处理者，这个事件监听者就相当于观察者。Observer 更简洁一些。两者在思想上是统一的，很多框架仍然使用了 event-listener 模式，比如 spring 框架的 ApplicationEvent,ApplicationListener。 其他：</p><p>观察者模式存在目标对象和观察者两个概念，做到解耦，但通知却依赖了抽象的观察者，假如观察者无法抽象就无法通知更新。 观察者模式所有的观察者的动作都一样。如果不一样就不能实现 事件监听模式 就可以解决以上的问题，不需要观察者的抽象。通过相应的 listener 代替观察者，类似观察者模式却解耦目标和观察。一般把事件对象作为业务接口的参数，再根据相应的条件触发</p><h2 id="三、代码解析" tabindex="-1"><a class="header-anchor" href="#三、代码解析" aria-hidden="true">#</a> 三、代码解析</h2><h3 id="监听器模式-1" tabindex="-1"><a class="header-anchor" href="#监听器模式-1" aria-hidden="true">#</a> 监听器模式</h3><p>事件监听器就是自己监听的事件一旦被触发或改变，立即得到通知，做出响应。</p><p>Java 的事件监听机制可概括为 3 点：</p><p>Java 的事件监听机制涉及到事件源，事件监听器，事件对象三个组件,监听器一般是接口，用来约定调用方式 当事件源对象上发生操作时，它将调用事件监听器的一个方法，并将事件对象传递过去 事件监听器实现类，通常是由开发人员编写，开发人员通过事件对象拿到事件源，从而对事件源上的操作进行处理 这里为了方便，直接用了 jdk，EventListener 监听器</p><ul><li>监听器接口</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EventListener</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>EventListener</span> <span class="token punctuation">{</span>\n    <span class="token doc-comment comment">/**\n     * 事件处理\n     */</span>\n    <span class="token keyword">void</span> <span class="token function">handleEvent</span><span class="token punctuation">(</span><span class="token class-name">EventObject</span> eventObject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>事件对象</p><p>public class EventObject extends java.util.EventObject { public EventObject(Object source) { super(source); }</p><pre><code>  public void doEvent() {\n      System.out.println(&quot;通知一个事件源 source:&quot; + this.getSource());\n  }\n</code></pre><p>}</p></li><li><p>事件源</p></li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EventSource</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 监听器列表，监听器的注册 加入此列表</span>\n    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EventListener</span><span class="token punctuation">&gt;</span></span> listeners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addListener</span><span class="token punctuation">(</span><span class="token class-name">EventListener</span> eventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        listeners<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>eventListener<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token class-name">EventListener</span> eventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        listeners<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>eventListener<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyListenerEvent</span><span class="token punctuation">(</span><span class="token class-name">EventObject</span> eventObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">EventListener</span> eventListener <span class="token operator">:</span> listeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            eventListener<span class="token punctuation">.</span><span class="token function">handleEvent</span><span class="token punctuation">(</span>eventObject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试执行</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EventDemo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">EventSource</span> eventSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 事件源</span>\n        eventSource<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 事件源 调用监听器的一个方法，并传递事件对象</span>\n            <span class="token annotation punctuation">@Override</span>\n            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleEvent</span><span class="token punctuation">(</span><span class="token class-name">EventObject</span> eventObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                eventObject<span class="token punctuation">.</span><span class="token function">doEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>eventObject<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;closeWindow&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;doClose&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 回调</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">EventObject</span> eventObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventObject</span><span class="token punctuation">(</span><span class="token string">&quot;closeWindow&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 事件对象</span>\n\n        eventSource<span class="token punctuation">.</span><span class="token function">notifyListenerEvent</span><span class="token punctuation">(</span>eventObject<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 触发事件</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>控制台输出</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>通知一个事件源 source<span class="token operator">:</span>closeWindow\ndoClose\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里我们了解了什么是监听器模式了。EventListener 是一个回调接口类，handleEvent 是一个回调函数接口，通过回调模型，EventSource 事件源便可回调具体监听器动作。</p><h3 id="观察者模式-1" tabindex="-1"><a class="header-anchor" href="#观察者模式-1" aria-hidden="true">#</a> 观察者模式</h3><p>观察者模式的原理其实和监听器一样，使用的关键在于搞清楚什么是观察者、什么是被观察者</p><p>观察者相当于事件监听 被观察者相当于事件源和事件 为了方便，同样直接使用 jdk 自带的 Observer</p><ul><li><p>观察者</p><p>public class Watcher implements Observer { @Override public void update(Observable o, Object arg) { if (arg.toString().equals(&quot;openWindow&quot;)) { System.out.println(&quot;打开窗口&quot;); } } }</p></li><li><p>被观察者</p><pre><code>public class Watched extends Observable {\n    public void notifyObservers(Object arg) {\n        /**\n         * 为了避免并发冲突，设置了 changed 标志位 changed=true，则当前线程可以通知所有观察者，内部同步块会设置为false；\n         * 通知过程中，正在新注册的和撤销的无法通知到\n         */\n        super.setChanged();\n\n        /**\n         * 事件触发，通知所有感兴趣的观察者\n         */\n        super.notifyObservers(arg);\n    }\n}\n</code></pre><p>测试执行</p></li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WatcherDemo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Watched</span> watched <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watched</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Watcher</span> watcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        watched<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        watched<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token annotation punctuation">@Override</span>\n        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Observable</span> o<span class="token punctuation">,</span> <span class="token class-name">Object</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>arg<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;closeWindow&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;关闭窗口&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        watched<span class="token punctuation">.</span><span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token string">&quot;openWindow&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        watched<span class="token punctuation">.</span><span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token string">&quot;closeWindow&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>控制台输出</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>打开窗口\n关闭窗口\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>从实现和调用过程来看，观察者和监听器模式基本一样。基本上都是这个逻辑当事件源对象上发生操作时，它将调用事件监听器的一个方法，并将事件对象传递过去，套用到观察者模式上面就是，当被观察者发生操作时，观察者将根据被观察者所做出的操作 进行对应的操作。</p><h2 id="应用" tabindex="-1"><a class="header-anchor" href="#应用" aria-hidden="true">#</a> 应用</h2><p>netty 中监听连接 guava 中的 ListenableFuture，采用监听器模型解决了原生 JDK 中 future.get() 一直阻塞结果的问题。</p><p>在 spirng 中 ServletContextListener 接口通过 web 中的 listener 就可以在 web 启动时初始化 spirng 也是事件的一种应用。</p><h3 id="eureka-中的监听模式" tabindex="-1"><a class="header-anchor" href="#eureka-中的监听模式" aria-hidden="true">#</a> Eureka 中的监听模式</h3><p>ureka 中提供了五种监听可供使用，分别是：</p><p>EurekaInstanceCanceledEvent 服务下线事件 EurekaInstanceRegisteredEvent 服务注册事件 EurekaInstanceRenewedEvent 服务续约事件 EurekaRegistryAvailableEvent Eureka 注册中心启动事件 EurekaServerStartedEvent Eureka Server 启动事件</p><p>都是继承 spring 的 ApplicationEvent</p><p><img src="D:\\workspace\\coding-road\\docs\\coding-road\\design-patterns\\observe.assets\\image-20220530111430305.png" alt="image-20220530111430305" loading="lazy"></p><p>（1)在 Eureka 的服务端：可以在监听到各种事件后将其存储到数据库中：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>googosoft<span class="token punctuation">.</span>register<span class="token punctuation">.</span>listener</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>googosoft<span class="token punctuation">.</span>register<span class="token punctuation">.</span>info<span class="token punctuation">.</span></span><span class="token class-name">ListenerType</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>googosoft<span class="token punctuation">.</span>register<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">InstanceLog</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>googosoft<span class="token punctuation">.</span>register<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">ServerLog</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>googosoft<span class="token punctuation">.</span>register<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">InstanceLogService</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>googosoft<span class="token punctuation">.</span>register<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">ServerLogService</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>appinfo<span class="token punctuation">.</span></span><span class="token class-name">InstanceInfo</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>eureka<span class="token punctuation">.</span>server<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">EurekaInstanceCanceledEvent</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>eureka<span class="token punctuation">.</span>server<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">EurekaInstanceRegisteredEvent</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>eureka<span class="token punctuation">.</span>server<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">EurekaInstanceRenewedEvent</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>eureka<span class="token punctuation">.</span>server<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">EurekaRegistryAvailableEvent</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>eureka<span class="token punctuation">.</span>server<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">EurekaServerStartedEvent</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">EventListener</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * <span class="token keyword">@author</span> songyan\n * <span class="token keyword">@version</span> 2020年1月9日 下午3:20:39\n * <span class="token keyword">@desc</span>\n */</span>\n<span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaStateChangeListener</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token keyword">private</span> <span class="token class-name">ServerLogService</span> serverLogService<span class="token punctuation">;</span>\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token keyword">private</span> <span class="token class-name">InstanceLogService</span> instanceLogService<span class="token punctuation">;</span>\n\n    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token doc-comment comment">/**\n     *    监听：服务下线事件\n     * <span class="token keyword">@param</span> <span class="token parameter">eurekaInstanceCanceledEvent</span>\n     */</span>\n    <span class="token annotation punctuation">@EventListener</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name">EurekaInstanceCanceledEvent</span> eurekaInstanceCanceledEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;*************服务下线********&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">String</span> appName <span class="token operator">=</span> eurekaInstanceCanceledEvent<span class="token punctuation">.</span><span class="token function">getAppName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">String</span> serverId <span class="token operator">=</span> eurekaInstanceCanceledEvent<span class="token punctuation">.</span><span class="token function">getServerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">ServerLog</span> log <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerLog</span><span class="token punctuation">(</span>appName<span class="token punctuation">,</span>serverId<span class="token punctuation">,</span><span class="token class-name">ListenerType<span class="token punctuation">.</span>Listener_Canceled</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            serverLogService<span class="token punctuation">.</span><span class="token function">addLog</span><span class="token punctuation">(</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     *    监听：服务注册事件\n     * <span class="token keyword">@param</span> <span class="token parameter">eurekaInstanceCanceledEvent</span>\n     */</span>\n    <span class="token annotation punctuation">@EventListener</span><span class="token punctuation">(</span>condition <span class="token operator">=</span> <span class="token string">&quot;#event.replication==false&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name">EurekaInstanceRegisteredEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;*************服务注册事件********&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">InstanceInfo</span> instanceInfo <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getInstanceInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">String</span> appName <span class="token operator">=</span> instanceInfo<span class="token punctuation">.</span><span class="token function">getAppName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">String</span> instanceId <span class="token operator">=</span> instanceInfo<span class="token punctuation">.</span><span class="token function">getInstanceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">InstanceLog</span> log <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InstanceLog</span><span class="token punctuation">(</span>appName<span class="token punctuation">,</span>instanceId<span class="token punctuation">,</span><span class="token class-name">ListenerType<span class="token punctuation">.</span>Listener_Registered</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            instanceLogService<span class="token punctuation">.</span><span class="token function">addLog</span><span class="token punctuation">(</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     *    监听：服务续约事件\n     * <span class="token keyword">@param</span> <span class="token parameter">eurekaInstanceCanceledEvent</span>\n     */</span>\n    <span class="token annotation punctuation">@EventListener</span><span class="token punctuation">(</span>condition <span class="token operator">=</span> <span class="token string">&quot;#event.replication==false&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name">EurekaInstanceRenewedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;*************服务续约事件********&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">String</span> appName <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getAppName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">String</span> serverId <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getServerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">//ServerLog log = new ServerLog(appName,serverId,ListenerType.Listener_Renewed);</span>\n            <span class="token comment">//serverLogService.addLog(log);</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     *    监听：注册中心启动事件\n     * <span class="token keyword">@param</span> <span class="token parameter">eurekaInstanceCanceledEvent</span>\n     */</span>\n    <span class="token annotation punctuation">@EventListener</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name">EurekaRegistryAvailableEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;*************注册中心启动事件********&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token class-name">ServerLog</span> log <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerLog</span><span class="token punctuation">(</span><span class="token string">&quot;服务注册中心&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token class-name">ListenerType<span class="token punctuation">.</span>Listener_RegistryAvailable</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            serverLogService<span class="token punctuation">.</span><span class="token function">addLog</span><span class="token punctuation">(</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     *    监听：Eureka Server启动事件\n     * <span class="token keyword">@param</span> <span class="token parameter">eurekaInstanceCanceledEvent</span>\n     */</span>\n    <span class="token annotation punctuation">@EventListener</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name">EurekaServerStartedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;*************Eureka Server启动事件********&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token class-name">ServerLog</span> log <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerLog</span><span class="token punctuation">(</span><span class="token string">&quot;Eureka Server&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token class-name">ListenerType<span class="token punctuation">.</span>Listener_ServerStarted</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            serverLogService<span class="token punctuation">.</span><span class="token function">addLog</span><span class="token punctuation">(</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>[<img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" loading="lazy">](&lt;javascript:void(0);&gt;)</p><p>（2）在客户端：直接读取数据库中日志展现即可</p><p><img src="https://img2018.cnblogs.com/i-beta/1157942/202001/1157942-20200119153422513-1976490487.png" alt="img" loading="lazy"></p>',75),p=(0,e.Uk)("参考文章： "),o={href:"https://www.cnblogs.com/viaiu/p/9939301.html",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("https://www.cnblogs.com/viaiu/p/9939301.html"),i={href:"https://www.cnblogs.com/lebo0425/p/9911913.html",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Uk)("https://www.cnblogs.com/lebo0425/p/9911913.html"),u={href:"https://www.cnblogs.com/jackson-yqj/p/7784694.html",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("https://www.cnblogs.com/jackson-yqj/p/7784694.html"),k={href:"https://www.jianshu.com/p/6020dffeceed",target:"_blank",rel:"noopener noreferrer"},d=(0,e.Uk)("https://www.jianshu.com/p/6020dffeceed"),v={href:"https://www.jianshu.com/p/594f018b68e7",target:"_blank",rel:"noopener noreferrer"},m=(0,e.Uk)("https://www.jianshu.com/p/594f018b68e7"),b={href:"https://blog.csdn.net/m0_37797991/article/details/86686835",target:"_blank",rel:"noopener noreferrer"},g=(0,e.Uk)("https://blog.csdn.net/m0_37797991/article/details/86686835"),h={href:"https://blog.csdn.net/rajayu/article/details/85240134",target:"_blank",rel:"noopener noreferrer"},w=(0,e.Uk)("https://blog.csdn.net/rajayu/article/details/85240134"),f=(0,e.Uk)(" ———————————————— 原文链接："),y={href:"https://blog.csdn.net/belongtocode/article/details/103963480",target:"_blank",rel:"noopener noreferrer"},E=(0,e.Uk)("https://blog.csdn.net/belongtocode/article/details/103963480"),L={},S=(0,a(13860).Z)(L,[["render",function(n,s){const a=(0,e.up)("ExternalLinkIcon");return(0,e.wg)(),(0,e.iD)("div",null,[t,(0,e._)("p",null,[p,(0,e._)("a",o,[c,(0,e.Wm)(a)]),(0,e._)("a",i,[l,(0,e.Wm)(a)]),(0,e._)("a",u,[r,(0,e.Wm)(a)]),(0,e._)("a",k,[d,(0,e.Wm)(a)]),(0,e._)("a",v,[m,(0,e.Wm)(a)]),(0,e._)("a",b,[g,(0,e.Wm)(a)]),(0,e._)("a",h,[w,(0,e.Wm)(a)]),f,(0,e._)("a",y,[E,(0,e.Wm)(a)])])])}]])},13860:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);