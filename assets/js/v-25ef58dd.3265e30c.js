"use strict";(self.webpackChunkcoding_road=self.webpackChunkcoding_road||[]).push([[5706],{79942:(e,a,p)=>{p.r(a),p.d(a,{data:()=>i});const i={key:"v-25ef58dd",path:"/coding-road/company/apexsoft/crm/menu.html",title:"crm系统的菜单加载逻辑",lang:"zh-CN",frontmatter:{summary:"crm系统的菜单加载逻辑 事件回顾 现场人员遇到需求需要把客户页面底下的客户合并审核页面移动到工作页面底下，他直接修改了菜单文件。然后发现定制的jsp页面一直在加载中 首页渲染 既然如此，就顺便研究下菜单加载的逻辑吧。 从登录开始。 在web.xml下面配置有登录的过滤器 这就是登录的过滤 下图代码说明登录的请求被重定向，前端观察也确实如此，这就进入到了主页",head:[["meta",{property:"og:url",content:"https://vuepress-theme-hope-v2-demo.mrhope.site/coding-road/company/apexsoft/crm/menu.html"}],["meta",{property:"og:site_name",content:"coding-rode"}],["meta",{property:"og:title",content:"crm系统的菜单加载逻辑"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-11-04T02:33:31.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:modified_time",content:"2022-11-04T02:33:31.000Z"}]]},excerpt:"",headers:[{level:2,title:"事件回顾",slug:"事件回顾",children:[]},{level:2,title:"首页渲染",slug:"首页渲染",children:[]},{level:2,title:"其他菜单渲染",slug:"其他菜单渲染",children:[{level:3,title:"获取菜单路径",slug:"获取菜单路径",children:[]}]}],git:{createdTime:1667529211e3,updatedTime:1667529211e3,contributors:[{name:"thinkingme",email:"linzhenhuigg@gmail.com",commits:1}]},readingTime:{minutes:3.3,words:990},filePathRelative:"coding-road/company/apexsoft/crm/menu.md"}},63701:(e,a,p)=>{p.r(a),p.d(a,{default:()=>r});var i=p(95393);const n=[(0,i.uE)('<h1 id="crm系统的菜单加载逻辑" tabindex="-1"><a class="header-anchor" href="#crm系统的菜单加载逻辑" aria-hidden="true">#</a> crm系统的菜单加载逻辑</h1><h2 id="事件回顾" tabindex="-1"><a class="header-anchor" href="#事件回顾" aria-hidden="true">#</a> 事件回顾</h2><p>现场人员遇到需求需要把客户页面底下的客户合并审核页面移动到工作页面底下，他直接修改了菜单文件。然后发现定制的jsp页面一直在加载中</p><p><img src="D:\\workspace\\coding-road\\images\\menu\\2022-07-20-14-26-05-image.png" alt="" loading="lazy"></p><h2 id="首页渲染" tabindex="-1"><a class="header-anchor" href="#首页渲染" aria-hidden="true">#</a> 首页渲染</h2><p>既然如此，就顺便研究下菜单加载的逻辑吧。</p><p>从登录开始。</p><p>在web.xml下面配置有登录的过滤器</p><p><img src="D:\\workspace\\coding-road\\images\\menu\\2022-07-20-15-59-55-image.png" alt="" loading="lazy"></p><p>这就是登录的过滤</p><p><img src="D:\\workspace\\coding-road\\images\\menu\\2022-07-20-16-00-19-image.png" alt="" loading="lazy"></p><p>下图代码说明登录的请求被重定向，前端观察也确实如此，这就进入到了主页。</p><p><img src="D:\\workspace\\coding-road\\images\\menu\\2022-07-20-16-01-44-image.png" alt="" loading="lazy"></p><p><img src="D:\\workspace\\coding-road\\images\\menu\\2022-07-20-16-00-45-image.png" alt="" loading="lazy"></p><p>重定向的地址是这个<a href="">http://localhost:8080/plug-in/faweb/index.jsp</a>，看来这就是梦开始的地方了。</p><p>这个jsp里面包含了inc_top.jsp,inc_top渲染了下图这些东西</p><p><img src="D:\\workspace\\coding-road\\images\\menu\\2022-07-20-16-30-44-image.png" alt="" loading="lazy"></p><p>我们进去看看</p><p><img src="D:\\workspace\\coding-road\\images\\menu\\2022-07-20-16-08-12-image.png" alt="" loading="lazy"></p><p>打了断点试了下， 确定是这了。那么点击后做了什么处理呢。</p><p>观察事件监听器</p><p><img src="D:\\workspace\\coding-road\\images\\menu\\2022-07-20-16-12-02-image.png" alt="" loading="lazy"></p><p>我们对应的js文件下看看，其实就是会渲染成下面这个请求，target后面加上#号后面的内容，去请求对应的jsp文件。</p><p><img src="D:\\workspace\\coding-road\\images\\menu\\2022-07-20-16-17-20-image.png" alt="" loading="lazy"></p><p>首页对应的就是下图的也就是plug-in/faweb/wpf/main.jsp文件</p><p><img src="D:\\workspace\\coding-road\\images\\menu\\2022-07-20-16-19-01-image.png" alt="" loading="lazy"></p><p><img src="D:\\workspace\\coding-road\\images\\menu\\2022-07-20-16-23-42-image.png" alt="" loading="lazy"></p><p>好的继续找这个文件。</p><p>这文件请求了这个链接</p><p><img src="D:\\workspace\\coding-road\\images\\menu\\2022-07-20-16-25-57-image.png" alt="" loading="lazy"></p><p><img src="D:\\workspace\\coding-road\\images\\menu\\2022-07-20-16-29-28-image.png" alt="" loading="lazy"></p><p>寻找这三个文件即可。这就是首页的渲染。</p><h2 id="其他菜单渲染" tabindex="-1"><a class="header-anchor" href="#其他菜单渲染" aria-hidden="true">#</a> 其他菜单渲染</h2><p>其他的菜单也是类似，我们先找到客户页面的plug-in/faweb/customer/main.jsp文件</p><p>为什么首页和其他菜单分开呢，正是因为首页底下的二级菜单渲染和其他的方式不一样。</p><p>看下图，其他菜单的渲染方式是向这样从文件中获取</p><h3 id="获取菜单路径" tabindex="-1"><a class="header-anchor" href="#获取菜单路径" aria-hidden="true">#</a> 获取菜单路径</h3><p><img src="D:\\workspace\\coding-road\\images\\menu\\2022-07-20-16-34-18-image.png" alt="" loading="lazy"></p><p>其实就是com/apex/bss/mod/menu/文件夹底下是处理的java文件</p><p>此方法会加载\\WEB-INF\\classes\\config\\menu\\acl.xmlde 文件</p><p>因而菜单信息其实都在这里面。</p><p><img src="D:\\workspace\\coding-road\\images\\menu\\2022-07-20-16-38-48-image.png" alt="" loading="lazy"></p><p>然后在底下有这么一句</p><p><code>menu_common.menuUrl(aHash, $(&quot;#IFRMAE_&lt;%=autoId%&gt;&quot;, dataContainer));</code></p><p>这是获取真正路径的方法，进去阅读后可以发现是调用</p><p>LiveBos\\FormBuilder\\plug-in\\faweb\\common\\service.jsp这个文件FormMenuNameGetUrl这个方法</p><blockquote><p>最恶心的地方来了</p></blockquote><p>有些是由三级目录的，就比如这个客户关系，他返回的实际上是</p><p><img src="D:\\workspace\\coding-road\\images\\menu\\2022-07-20-16-55-58-image.png" alt="" loading="lazy"></p><p>这样的，也就是说又去调用了menu页面</p><p>我们可以在com/apex/bss/mod/menu/MenuAction.java这里看方法</p><p>WEB-INF/view/mod/menu/index.jsp这里看页面</p><p>至此整个逻辑就讲完。我们回归主题，为什么会有报错呢。</p><p>观察menu/index.jsp页面，看他是怎么渲染三级页面的。发现他不是用IFrame来加载页面的。而是直接将页面整个塞进了一个div框里。这样就导致了问题。</p><p><img src="D:\\workspace\\coding-road\\images\\menu\\2022-07-20-17-02-11-image.png" alt="" loading="lazy"></p><p>因为如果页面如上图一样，我们有head标签，里面还有script标签的话，这样子是不行的。</p><p>所以我们将这个标签删掉，在外层其实已经引入了。</p><p>最后加载正常</p><p><img src="D:\\workspace\\coding-road\\images\\menu\\2022-07-20-17-03-56-image.png" alt="" loading="lazy"></p><p>收工。</p>',60)],o={},r=(0,p(13860).Z)(o,[["render",function(e,a){return(0,i.wg)(),(0,i.iD)("div",null,n)}]])},13860:(e,a)=>{a.Z=(e,a)=>{const p=e.__vccOpts||e;for(const[e,i]of a)p[e]=i;return p}}}]);