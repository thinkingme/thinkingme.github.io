"use strict";(self.webpackChunkcoding_road=self.webpackChunkcoding_road||[]).push([[2970],{4935:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-70a5c8e8",path:"/coding-road/java-core/utils/hutool.html",title:"Hutool：国产良心工具包，让你的 Java 变得更甜",lang:"zh-CN",frontmatter:{category:["Java核心"],tag:["Java"],summary:"Hutool：国产良心工具包，让你的 Java 变得更甜 读者群里有个小伙伴感慨说，“Hutool 这款开源类库太厉害了，基本上该有该的工具类，它里面都有。”讲真的，我平常工作中也经常用 Hutool，它确实可以帮助我们简化每一行代码，使 Java 拥有函数式语言般的优雅，让 Java 语言变得“甜甜的”。 Hutool 的作者在官网上说，Hutool 是 ",head:[["meta",{property:"og:url",content:"https://vuepress-theme-hope-v2-demo.mrhope.site/coding-road/java-core/utils/hutool.html"}],["meta",{property:"og:site_name",content:"coding-rode"}],["meta",{property:"og:title",content:"Hutool：国产良心工具包，让你的 Java 变得更甜"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-06-04T07:20:53.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:tag",content:"Java"}],["meta",{property:"article:modified_time",content:"2022-06-04T07:20:53.000Z"}]]},excerpt:"",headers:[{level:3,title:"01、引入 Hutool",slug:"_01、引入-hutool",children:[]},{level:3,title:"02、类型转换",slug:"_02、类型转换",children:[]},{level:3,title:"03、日期时间",slug:"_03、日期时间",children:[]},{level:3,title:"04、IO 流相关",slug:"_04、io-流相关",children:[]},{level:3,title:"05、字符串工具",slug:"_05、字符串工具",children:[]},{level:3,title:"06、反射工具",slug:"_06、反射工具",children:[]},{level:3,title:"07、压缩工具",slug:"_07、压缩工具",children:[]},{level:3,title:"08、身份证工具",slug:"_08、身份证工具",children:[]},{level:3,title:"09、扩展 HashMap",slug:"_09、扩展-hashmap",children:[]},{level:3,title:"10、控制台打印",slug:"_10、控制台打印",children:[]},{level:3,title:"11、字段验证器",slug:"_11、字段验证器",children:[]},{level:3,title:"12、双向查找 Map",slug:"_12、双向查找-map",children:[]},{level:3,title:"13、图片工具",slug:"_13、图片工具",children:[]},{level:3,title:"14、配置文件",slug:"_14、配置文件",children:[]},{level:3,title:"15、日志工厂",slug:"_15、日志工厂",children:[]},{level:3,title:"16、缓存工具",slug:"_16、缓存工具",children:[]},{level:3,title:"17、加密解密",slug:"_17、加密解密",children:[]},{level:3,title:"18、其他类库",slug:"_18、其他类库",children:[]}],git:{createdTime:1653617096e3,updatedTime:1654327253e3,contributors:[{name:"林振辉",email:"linzhenhui@apexsoft.com",commits:2}]},readingTime:{minutes:12.1,words:3631},filePathRelative:"coding-road/java-core/utils/hutool.md"}},20674:(n,s,a)=>{a.r(s),a.d(s,{default:()=>d});var t=a(95393);const p=(0,t.uE)('<h1 id="hutool-国产良心工具包-让你的-java-变得更甜" tabindex="-1"><a class="header-anchor" href="#hutool-国产良心工具包-让你的-java-变得更甜" aria-hidden="true">#</a> Hutool：国产良心工具包，让你的 Java 变得更甜</h1><p>读者群里有个小伙伴感慨说，“Hutool 这款开源类库太厉害了，基本上该有该的工具类，它里面都有。”讲真的，我平常工作中也经常用 Hutool，它确实可以帮助我们简化每一行代码，使 Java 拥有函数式语言般的优雅，让 Java 语言变得“甜甜的”。</p><p>Hutool 的作者在官网上说，Hutool 是 Hu+tool 的自造词（好像不用说，我们也能猜得到），“Hu”用来致敬他的“前任”公司，“tool”就是工具的意思，谐音就有意思了，“糊涂”，寓意追求“万事都作糊涂观，无所谓失，无所谓得”（一个开源类库，上升到了哲学的高度，作者厉害了）。</p><p>看了一下开发团队的一个成员介绍，一个 Java 后端工具的作者竟然爱前端、爱数码，爱美女，嗯嗯嗯，确实“难得糊涂”（手动狗头）。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/common-tool/hutool-01.png" alt="" loading="lazy"></p><p>废话就说到这，来吧，实操走起！</p><h3 id="_01、引入-hutool" tabindex="-1"><a class="header-anchor" href="#_01、引入-hutool" aria-hidden="true">#</a> 01、引入 Hutool</h3><p>Maven 项目只需要在 pom.xml 文件中添加以下依赖即可。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;dependency&gt;\n    &lt;groupId&gt;cn.hutool&lt;/groupId&gt;\n    &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;\n    &lt;version&gt;5.4.3&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Hutool 的设计思想是尽量减少重复的定义，让项目中的 util 包尽量少。一个好的轮子可以在很大程度上避免“复制粘贴”，从而节省我们开发人员对项目中公用类库和公用工具方法的封装时间。同时呢，成熟的开源库也可以最大限度的避免封装不完善带来的 bug。</p><p>就像作者在官网上说的那样：</p><ul><li>以前，我们打开搜索引擎 -&gt; 搜“Java MD5 加密” -&gt; 打开某篇博客 -&gt; 复制粘贴 -&gt; 改改，变得好用些 <blockquote><p>有了 Hutool 以后呢，引入 Hutool -&gt; 直接 <code>SecureUtil.md5()</code></p></blockquote></li></ul><p>Hutool 对不仅对 JDK 底层的文件、流、加密解密、转码、正则、线程、XML 等做了封装，还提供了以下这些组件：</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/common-tool/hutool-02.png" alt="" loading="lazy"></p><p>非常多，非常全面，鉴于此，我只挑选一些我喜欢的来介绍下（偷偷地告诉你，我就是想偷懒）。</p><h3 id="_02、类型转换" tabindex="-1"><a class="header-anchor" href="#_02、类型转换" aria-hidden="true">#</a> 02、类型转换</h3><p>类型转换在 Java 开发中很常见，尤其是从 HttpRequest 中获取参数的时候，前端传递的是整型，但后端只能先获取到字符串，然后再调用 <code>parseXXX()</code> 方法进行转换，还要加上判空，很繁琐。</p><p>Hutool 的 Convert 类可以简化这个操作，可以将任意可能的类型转换为指定类型，同时第二个参数 defaultValue 可用于在转换失败时返回一个默认值。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> param <span class="token operator">=</span> <span class="token string">&quot;10&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> paramInt <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> paramIntDefault <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>把字符串转换成日期：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> dateStr <span class="token operator">=</span> <span class="token string">&quot;2020年09月29日&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">toDate</span><span class="token punctuation">(</span>dateStr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>把字符串转成 Unicode：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> unicodeStr <span class="token operator">=</span> <span class="token string">&quot;沉默王二&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> unicode <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">strToUnicode</span><span class="token punctuation">(</span>unicodeStr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_03、日期时间" tabindex="-1"><a class="header-anchor" href="#_03、日期时间" aria-hidden="true">#</a> 03、日期时间</h3><p>JDK 自带的 Date 和 Calendar 不太好用，Hutool 封装的 DateUtil 用起来就舒服多了！</p><p>获取当前日期：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token class-name">DateUtil</span><span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>DateUtil.date()</code> 返回的其实是 DateTime，它继承自 Date 对象，重写了 <code>toString()</code> 方法，返回 <code>yyyy-MM-dd HH:mm:ss</code> 格式的字符串。</p><p>有些小伙伴是不是想看看我写这篇文章的时间，输出一下给大家看看：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>System.out.println(date);// 2020-09-29 04:28:02\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>字符串转日期：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> dateStr <span class="token operator">=</span> <span class="token string">&quot;2020-09-29&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token class-name">DateUtil</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dateStr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>DateUtil.parse()</code> 会自动识别一些常用的格式，比如说：</p><ul><li>yyyy-MM-dd HH:mm:ss</li><li>yyyy-MM-dd</li><li>HH:mm:ss</li><li>yyyy-MM-dd HH:mm</li><li>yyyy-MM-dd HH:mm:ss.SSS</li></ul><p>还可以识别带中文的：</p><ul><li>年月日时分秒</li></ul><p>格式化时间差：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> dateStr1 <span class="token operator">=</span> <span class="token string">&quot;2020-09-29 22:33:23&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">Date</span> date1 <span class="token operator">=</span> <span class="token class-name">DateUtil</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dateStr1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">String</span> dateStr2 <span class="token operator">=</span> <span class="token string">&quot;2020-10-01 23:34:27&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">Date</span> date2 <span class="token operator">=</span> <span class="token class-name">DateUtil</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dateStr2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">long</span> betweenDay <span class="token operator">=</span> <span class="token class-name">DateUtil</span><span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>date1<span class="token punctuation">,</span> date2<span class="token punctuation">,</span> <span class="token class-name">DateUnit</span><span class="token punctuation">.</span>MS<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 输出：2天1小时1分4秒</span>\n<span class="token class-name">String</span> formatBetween <span class="token operator">=</span> <span class="token class-name">DateUtil</span><span class="token punctuation">.</span><span class="token function">formatBetween</span><span class="token punctuation">(</span>betweenDay<span class="token punctuation">,</span> <span class="token class-name">BetweenFormater<span class="token punctuation">.</span>Level</span><span class="token punctuation">.</span>SECOND<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>星座和属相：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 射手座</span>\n<span class="token class-name">String</span> zodiac <span class="token operator">=</span> <span class="token class-name">DateUtil</span><span class="token punctuation">.</span><span class="token function">getZodiac</span><span class="token punctuation">(</span><span class="token class-name">Month</span><span class="token punctuation">.</span>DECEMBER<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 蛇</span>\n<span class="token class-name">String</span> chineseZodiac <span class="token operator">=</span> <span class="token class-name">DateUtil</span><span class="token punctuation">.</span><span class="token function">getChineseZodiac</span><span class="token punctuation">(</span><span class="token number">1989</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_04、io-流相关" tabindex="-1"><a class="header-anchor" href="#_04、io-流相关" aria-hidden="true">#</a> 04、IO 流相关</h3><p>IO 操作包括读和写，应用的场景主要包括网络操作和文件操作，原生的 Java 类库区分字符流和字节流，字节流 InputStream 和 OutputStream 就有很多很多种，使用起来让人头皮发麻。</p><p>Hutool 封装了流操作工具类 IoUtil、文件读写操作工具类 FileUtil、文件类型判断工具类 FileTypeUtil 等等。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">BufferedInputStream</span> in <span class="token operator">=</span> <span class="token class-name">FileUtil</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;hutool/origin.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">BufferedOutputStream</span> out <span class="token operator">=</span> <span class="token class-name">FileUtil</span><span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;hutool/to.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">long</span> copySize <span class="token operator">=</span> <span class="token class-name">IoUtil</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> out<span class="token punctuation">,</span> <span class="token class-name">IoUtil</span><span class="token punctuation">.</span>DEFAULT_BUFFER_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 IO 操作中，文件的操作相对来说是比较复杂的，但使用频率也很高，几乎所有的项目中都躺着一个叫 FileUtil 或者 FileUtils 的工具类。Hutool 的 FileUtil 类包含以下几类操作：</p><ul><li>文件操作：包括文件目录的新建、删除、复制、移动、改名等</li><li>文件判断：判断文件或目录是否非空，是否为目录，是否为文件等等</li><li>绝对路径：针对 ClassPath 中的文件转换为绝对路径文件</li><li>文件名：主文件名，扩展名的获取</li><li>读操作：包括 getReader、readXXX 操作</li><li>写操作：包括 getWriter、writeXXX 操作</li></ul><p>顺带说说 classpath。</p><p>在实际编码当中，我们通常需要从某些文件里面读取一些数据，比如配置文件、文本文件、图片等等，那这些文件通常放在什么位置呢？</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/common-tool/hutool-03.png" alt="" loading="lazy"></p><p>放在项目结构图中的 resources 目录下，当项目编译后，会出现在 classes 目录下。对应磁盘上的目录如下图所示：</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/common-tool/hutool-04.png" alt="" loading="lazy"></p><p>当我们要读取文件的时候，我是不建议使用绝对路径的，因为操作系统不一样的话，文件的路径标识符也是不一样的。最好使用相对路径。</p><p>假设在 <code>src/resources</code> 下放了一个文件 origin.txt，文件的路径参数如下所示：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">FileUtil</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;origin.txt&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>假设文件放在 <code>src/resources/hutool</code> 目录下，则路径参数改为：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">FileUtil</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;hutool/origin.txt&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_05、字符串工具" tabindex="-1"><a class="header-anchor" href="#_05、字符串工具" aria-hidden="true">#</a> 05、字符串工具</h3><p>Hutool 封装的字符串工具类 StrUtil 和 Apache Commons Lang 包中的 StringUtils 类似，作者认为优势在于 Str 比 String 短，尽管我不觉得。不过，我倒是挺喜欢其中的一个方法的：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> template <span class="token operator">=</span> <span class="token string">&quot;{}，一枚沉默但有趣的程序员，喜欢他的文章的话，请微信搜索{}&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> <span class="token string">&quot;沉默王二&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;沉默王二&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 沉默王二，一枚沉默但有趣的程序员，喜欢他的文章的话，请微信搜索沉默王二</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_06、反射工具" tabindex="-1"><a class="header-anchor" href="#_06、反射工具" aria-hidden="true">#</a> 06、反射工具</h3><p>反射机制可以让 Java 变得更加灵活，因此在某些情况下，反射可以做到事半功倍的效果。Hutool 封装的反射工具 ReflectUtil 包括：</p><ul><li>获取构造方法</li><li>获取字段</li><li>获取字段值</li><li>获取方法</li><li>执行方法（对象方法和静态方法）</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itwanger<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>reflect</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ReflectUtil</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectDemo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">ReflectDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;构造方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是沉默王二&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 构建对象</span>\n        <span class="token class-name">ReflectDemo</span> reflectDemo <span class="token operator">=</span> <span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">ReflectDemo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 获取构造方法</span>\n        <span class="token class-name">Constructor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> constructors <span class="token operator">=</span> <span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token class-name">ReflectDemo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Constructor</span> constructor <span class="token operator">:</span> constructors<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>constructor<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// 获取字段</span>\n        <span class="token class-name">Field</span> field <span class="token operator">=</span> <span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token class-name">ReflectDemo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        field<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span>reflectDemo<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 获取字段值</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">getFieldValue</span><span class="token punctuation">(</span>reflectDemo<span class="token punctuation">,</span> field<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 获取所有方法</span>\n        <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> <span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token class-name">ReflectDemo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> m <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// 获取指定方法</span>\n        <span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token class-name">ReflectDemo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;print&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n        <span class="token comment">// 执行方法</span>\n        <span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>reflectDemo<span class="token punctuation">,</span> <span class="token string">&quot;print&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_07、压缩工具" tabindex="-1"><a class="header-anchor" href="#_07、压缩工具" aria-hidden="true">#</a> 07、压缩工具</h3><p>在 Java 中，对文件、文件夹打包压缩是一件很繁琐的事情，Hutool 封装的 ZipUtil 针对 java.util.zip 包做了优化，可以使用一个方法搞定压缩和解压，并且自动处理文件和目录的问题，不再需要用户判断，大大简化的压缩解压的复杂度。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">ZipUtil</span><span class="token punctuation">.</span><span class="token function">zip</span><span class="token punctuation">(</span><span class="token string">&quot;hutool&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hutool.zip&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">File</span> unzip <span class="token operator">=</span> <span class="token class-name">ZipUtil</span><span class="token punctuation">.</span><span class="token function">unzip</span><span class="token punctuation">(</span><span class="token string">&quot;hutool.zip&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hutoolzip&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_08、身份证工具" tabindex="-1"><a class="header-anchor" href="#_08、身份证工具" aria-hidden="true">#</a> 08、身份证工具</h3><p>Hutool 封装的 IdcardUtil 可以用来对身份证进行验证，支持大陆 15 位、18 位身份证，港澳台 10 位身份证。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> ID_18 <span class="token operator">=</span> <span class="token string">&quot;321083197812162119&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> ID_15 <span class="token operator">=</span> <span class="token string">&quot;150102880730303&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">boolean</span> valid <span class="token operator">=</span> <span class="token class-name">IdcardUtil</span><span class="token punctuation">.</span><span class="token function">isValidCard</span><span class="token punctuation">(</span>ID_18<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">boolean</span> valid15 <span class="token operator">=</span> <span class="token class-name">IdcardUtil</span><span class="token punctuation">.</span><span class="token function">isValidCard</span><span class="token punctuation">(</span>ID_15<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_09、扩展-hashmap" tabindex="-1"><a class="header-anchor" href="#_09、扩展-hashmap" aria-hidden="true">#</a> 09、扩展 HashMap</h3><p>Java 中的 HashMap 是强类型的，而 Hutool 封装的 Dict 对键的类型要求没那么严格。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Dict</span> dict <span class="token operator">=</span> <span class="token class-name">Dict</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;沉默王二&quot;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;birthday&quot;</span><span class="token punctuation">,</span> <span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">int</span> age <span class="token operator">=</span> dict<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> name <span class="token operator">=</span> dict<span class="token punctuation">.</span><span class="token function">getStr</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10、控制台打印" tabindex="-1"><a class="header-anchor" href="#_10、控制台打印" aria-hidden="true">#</a> 10、控制台打印</h3><p>本地编码的过程中，经常需要使用 <code>System.out</code> 打印结果，但是往往一些复杂的对象不支持直接打印，比如说数组，需要调用 <code>Arrays.toString</code>。Hutool 封装的 Console 类借鉴了 JavaScript 中的 <code>console.log()</code>，使得打印变成了一个非常便捷的方式。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsoleDemo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 打印字符串</span>\n        <span class="token class-name">Console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;沉默王二，一枚有趣的程序员&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 打印字符串模板</span>\n        <span class="token class-name">Console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;洛阳是{}朝古都&quot;</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token comment">// 打印数组</span>\n        <span class="token class-name">Console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11、字段验证器" tabindex="-1"><a class="header-anchor" href="#_11、字段验证器" aria-hidden="true">#</a> 11、字段验证器</h3><p>做 Web 开发的时候，后端通常需要对表单提交过来的数据进行验证。Hutool 封装的 Validator 可以进行很多有效的条件验证：</p><ul><li>是不是邮箱</li><li>是不是 IP V4、V6</li><li>是不是电话号码</li><li>等等</li></ul><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/common-tool/hutool-05.png" alt="" loading="lazy"></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Validator</span><span class="token punctuation">.</span><span class="token function">isEmail</span><span class="token punctuation">(</span><span class="token string">&quot;沉默王二&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Validator</span><span class="token punctuation">.</span><span class="token function">isMobile</span><span class="token punctuation">(</span><span class="token string">&quot;itwanger.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12、双向查找-map" tabindex="-1"><a class="header-anchor" href="#_12、双向查找-map" aria-hidden="true">#</a> 12、双向查找 Map</h3><p>Guava 中提供了一种特殊的 Map 结构，叫做 BiMap，实现了一种双向查找的功能，可以根据 key 查找 value，也可以根据 value 查找 key，Hutool 也提供这种 Map 结构。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">BiMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> biMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BiMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbiMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;wanger&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;沉默王二&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbiMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;wangsan&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;沉默王三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// get value by key</span>\nbiMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;wanger&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbiMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;wangsan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// get key by value</span>\nbiMap<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token string">&quot;沉默王二&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbiMap<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token string">&quot;沉默王三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在实际的开发工作中，其实我更倾向于使用 Guava 的 BiMap，而不是 Hutool 的。这里提一下，主要是我发现了 Hutool 在线文档上的一处错误，提了个 issue（从中可以看出我一颗一丝不苟的心和一双清澈明亮的大眼睛啊）。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/common-tool/hutool-06.png" alt="" loading="lazy"></p><h3 id="_13、图片工具" tabindex="-1"><a class="header-anchor" href="#_13、图片工具" aria-hidden="true">#</a> 13、图片工具</h3><p>Hutool 封装的 ImgUtil 可以对图片进行缩放、裁剪、转为黑白、加水印等操作。</p><p>缩放图片：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">ImgUtil</span><span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span>\n        <span class="token class-name">FileUtil</span><span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&quot;hutool/wangsan.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token class-name">FileUtil</span><span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&quot;hutool/wangsan_small.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token number">0.5f</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>裁剪图片：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">ImgUtil</span><span class="token punctuation">.</span><span class="token function">cut</span><span class="token punctuation">(</span>\n        <span class="token class-name">FileUtil</span><span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&quot;hutool/wangsan.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token class-name">FileUtil</span><span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&quot;hutool/wangsan_cut.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加水印：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">ImgUtil</span><span class="token punctuation">.</span><span class="token function">pressText</span><span class="token punctuation">(</span><span class="token comment">//</span>\n        <span class="token class-name">FileUtil</span><span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&quot;hutool/wangsan.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token class-name">FileUtil</span><span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&quot;hutool/wangsan_logo.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;沉默王二&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>WHITE<span class="token punctuation">,</span>\n        <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">&quot;黑体&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Font</span><span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token number">0</span><span class="token punctuation">,</span>\n        <span class="token number">0</span><span class="token punctuation">,</span>\n        <span class="token number">0.8f</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>趁机让大家欣赏一下二哥帅气的真容。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/common-tool/hutool-07.png" alt="" loading="lazy"></p><h3 id="_14、配置文件" tabindex="-1"><a class="header-anchor" href="#_14、配置文件" aria-hidden="true">#</a> 14、配置文件</h3><blockquote><p>众所周知，Java 中广泛应用的配置文件 Properties 存在一个特别大的诟病：不支持中文。每次使用时，如果想存放中文字符，就必须借助 IDE 相关插件才能转为 Unicode 符号，而这种反人类的符号在命令行下根本没法看。</p></blockquote><p>于是，Hutool 的 Setting 运用而生。Setting 除了兼容 Properties 文件格式外，还提供了一些特有功能，这些功能包括：</p><ul><li>各种编码方式支持</li><li>变量支持</li><li>分组支持</li></ul><p>先整个配置文件 example.setting，内容如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>name=沉默王二\nage=18\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>再来读取和更新配置文件：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SettingDemo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> SETTING <span class="token operator">=</span> <span class="token string">&quot;hutool/example.setting&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 初始化 Setting</span>\n        <span class="token class-name">Setting</span> setting <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Setting</span><span class="token punctuation">(</span>SETTING<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 读取</span>\n        setting<span class="token punctuation">.</span><span class="token function">getStr</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;沉默王二&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 在配置文件变更时自动加载</span>\n        setting<span class="token punctuation">.</span><span class="token function">autoLoad</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 通过代码方式增加键值对</span>\n        setting<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;birthday&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2020年09月29日&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        setting<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span>SETTING<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_15、日志工厂" tabindex="-1"><a class="header-anchor" href="#_15、日志工厂" aria-hidden="true">#</a> 15、日志工厂</h3><p>Hutool 封装的日志工厂 LogFactory 兼容了各大日志框架，使用起来也非常简便。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogDemo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Log</span> log <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;难得糊涂&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先通过 <code>LogFactory.get()</code> 自动识别引入的日志框架，从而创建对应日志框架的门面 Log 对象，然后调用 <code>debug()</code>、<code>info()</code> 等方法输出日志。</p><p>如果不想创建 Log 对象的话，可以使用 StaticLog，顾名思义，一个提供了静态方法的日志类。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">StaticLog</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;爽啊 {}.&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;沉默王二的文章&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_16、缓存工具" tabindex="-1"><a class="header-anchor" href="#_16、缓存工具" aria-hidden="true">#</a> 16、缓存工具</h3><p>CacheUtil 是 Hutool 封装的创建缓存的快捷工具类，可以创建不同的缓存对象：</p><ul><li>FIFOCache：先入先出，元素不停的加入缓存直到缓存满为止，当缓存满时，清理过期缓存对象，清理后依旧满则删除先入的缓存。</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fifoCache <span class="token operator">=</span> <span class="token class-name">CacheUtil</span><span class="token punctuation">.</span><span class="token function">newFIFOCache</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfifoCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;沉默王一&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfifoCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;key2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;沉默王二&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfifoCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;key3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;沉默王三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfifoCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;key4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;沉默王四&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 大小为 3，所以 key3 放入后 key1 被清除</span>\n<span class="token class-name">String</span> value1 <span class="token operator">=</span> fifoCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>LFUCache，最少使用，根据使用次数来判定对象是否被持续缓存，当缓存满时清理过期对象，清理后依旧满的情况下清除最少访问的对象并将其他对象的访问数减去这个最少访问数，以便新对象进入后可以公平计数。</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> lfuCache <span class="token operator">=</span> <span class="token class-name">CacheUtil</span><span class="token punctuation">.</span><span class="token function">newLFUCache</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nlfuCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;沉默王一&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 使用次数+1</span>\nlfuCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlfuCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;key2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;沉默王二&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlfuCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;key3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;沉默王三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlfuCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;key4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;沉默王四&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 由于缓存容量只有 3，当加入第 4 个元素的时候，最少使用的将被移除（2,3被移除）</span>\n<span class="token class-name">String</span> value2 <span class="token operator">=</span> lfuCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;key2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> value3 <span class="token operator">=</span> lfuCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;key3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>LRUCache，最近最久未使用，根据使用时间来判定对象是否被持续缓存，当对象被访问时放入缓存，当缓存满了，最久未被使用的对象将被移除。</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> lruCache <span class="token operator">=</span> <span class="token class-name">CacheUtil</span><span class="token punctuation">.</span><span class="token function">newLRUCache</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nlruCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;沉默王一&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlruCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;key2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;沉默王二&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlruCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;key3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;沉默王三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 使用时间近了</span>\nlruCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlruCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;key4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;沉默王四&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 由于缓存容量只有 3，当加入第 4 个元素的时候，最久使用的将被移除（2）</span>\n<span class="token class-name">String</span> value2 <span class="token operator">=</span> lruCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;key2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_17、加密解密" tabindex="-1"><a class="header-anchor" href="#_17、加密解密" aria-hidden="true">#</a> 17、加密解密</h3><p>加密分为三种：</p><ul><li>对称加密（symmetric），例如：AES、DES 等</li><li>非对称加密（asymmetric），例如：RSA、DSA 等</li><li>摘要加密（digest），例如：MD5、SHA-1、SHA-256、HMAC 等</li></ul><p>Hutool 针对这三种情况都做了封装：</p><ul><li>对称加密 SymmetricCrypto</li><li>非对称加密 AsymmetricCrypto</li><li>摘要加密 Digester</li></ul><p>快速加密工具类 SecureUtil 有以下这些方法：</p><p>1）对称加密</p><ul><li>SecureUtil.aes</li><li>SecureUtil.des</li></ul><p>2）非对称加密</p><ul><li>SecureUtil.rsa</li><li>SecureUtil.dsa</li></ul><p>3）摘要加密</p><ul><li>SecureUtil.md5</li><li>SecureUtil.sha1</li><li>SecureUtil.hmac</li><li>SecureUtil.hmacMd5</li><li>SecureUtil.hmacSha1</li></ul><p>只写一个简单的例子作为参考：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecureUtilDemo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">static</span> <span class="token class-name">AES</span> aes <span class="token operator">=</span> <span class="token class-name">SecureUtil</span><span class="token punctuation">.</span><span class="token function">aes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> encry <span class="token operator">=</span> aes<span class="token punctuation">.</span><span class="token function">encryptHex</span><span class="token punctuation">(</span><span class="token string">&quot;沉默王二&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encry<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> oo <span class="token operator">=</span> aes<span class="token punctuation">.</span><span class="token function">decryptStr</span><span class="token punctuation">(</span>encry<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>oo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_18、其他类库" tabindex="-1"><a class="header-anchor" href="#_18、其他类库" aria-hidden="true">#</a> 18、其他类库</h3>',132),e=(0,t.Uk)("Hutool 中的类库还有很多，尤其是一些对第三方类库的进一步封装，比如邮件工具 MailUtil，二维码工具 QrCodeUtil，Emoji 工具 EmojiUtil，小伙伴们可以参考 Hutool 的官方文档："),o={href:"https://www.hutool.cn/",target:"_blank",rel:"noopener noreferrer"},c=(0,t.Uk)("https://www.hutool.cn/"),l=(0,t.Uk)("项目源码地址："),i={href:"https://github.com/looly/hutool",target:"_blank",rel:"noopener noreferrer"},u=(0,t.Uk)("https://github.com/looly/hutool"),k=(0,t._)("img",{src:"http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/xingbiaogongzhonghao.png"},null,-1),r={},d=(0,a(13860).Z)(r,[["render",function(n,s){const a=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)("div",null,[p,(0,t._)("p",null,[e,(0,t._)("a",o,[c,(0,t.Wm)(a)])]),(0,t._)("p",null,[l,(0,t._)("a",i,[u,(0,t.Wm)(a)])]),k])}]])},13860:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);