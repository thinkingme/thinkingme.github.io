"use strict";(self.webpackChunkcoding_road=self.webpackChunkcoding_road||[]).push([[6507],{66525:(e,n,i)=>{i.r(n),i.d(n,{data:()=>s});const s={key:"v-4f534ee0",path:"/coding-road/javaee/dev-tools/packaging-tool/gradle/gradle-java.html",title:"gradle在java应用",lang:"zh-CN",frontmatter:{summary:"gradle在java应用 自带插件介绍 java; https://docs.gradle.org/current/userguide/javaplugin.html#javaplugin 提供 assembly build jar 等任务的功能 java-library; 相比于java插件增加了api 接口 https://docs.gradle.or",head:[["meta",{property:"og:url",content:"https://vuepress-theme-hope-v2-demo.mrhope.site/coding-road/javaee/dev-tools/packaging-tool/gradle/gradle-java.html"}],["meta",{property:"og:site_name",content:"coding-rode"}],["meta",{property:"og:title",content:"gradle在java应用"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-11-04T02:33:31.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:modified_time",content:"2022-11-04T02:33:31.000Z"}]]},excerpt:"",headers:[{level:3,title:"自带插件介绍",slug:"自带插件介绍",children:[]},{level:3,title:"动态改变Task依赖关系",slug:"动态改变task依赖关系",children:[]},{level:2,title:"springboot插件",slug:"springboot插件",children:[{level:3,title:"介绍",slug:"介绍",children:[]},{level:3,title:"引入",slug:"引入",children:[]},{level:3,title:"官网",slug:"官网",children:[]}]}],git:{createdTime:1667529211e3,updatedTime:1667529211e3,contributors:[{name:"thinkingme",email:"linzhenhuigg@gmail.com",commits:1}]},readingTime:{minutes:4.61,words:1383},filePathRelative:"coding-road/javaee/dev-tools/packaging-tool/gradle/gradle-java.md"}},90233:(e,n,i)=>{i.r(n),i.d(n,{default:()=>G});var s=i(95393);const a=(0,s.uE)('<h1 id="gradle在java应用" tabindex="-1"><a class="header-anchor" href="#gradle在java应用" aria-hidden="true">#</a> gradle在java应用</h1><p><img src="assert/gradle-java/image-20220604235925519.png" alt="image-20220604235925519" loading="lazy"></p><h3 id="自带插件介绍" tabindex="-1"><a class="header-anchor" href="#自带插件介绍" aria-hidden="true">#</a> 自带插件介绍</h3><ul><li>java</li></ul>',4),l={href:"https://docs.gradle.org/current/userguide/java_plugin.html#java_plugin",target:"_blank",rel:"noopener noreferrer"},r=(0,s.Uk)("https://docs.gradle.org/current/userguide/java_plugin.html#java_plugin"),d=(0,s._)("p",null,"提供 assembly build jar 等任务的功能",-1),t=(0,s._)("ul",null,[(0,s._)("li",null,"java-library")],-1),o=(0,s._)("p",null,"相比于java插件增加了api 接口",-1),c={href:"https://docs.gradle.org/current/userguide/java_library_plugin.html",target:"_blank",rel:"noopener noreferrer"},u=(0,s.Uk)("https://docs.gradle.org/current/userguide/java_library_plugin.html"),v=(0,s._)("ul",null,[(0,s._)("li",null,"application")],-1),p=(0,s._)("p",null,"​ Application 插件有助于创建可执行的 JVM 应用程序。它可以在开发过程中轻松地在本地启动应用程序，并将应用程序打包为 TAR 和/或 ZIP，包括操作系统特定的启动脚本。",-1),m=(0,s._)("p",null,"​ 包含java 插件和Distribution插件",-1),g=(0,s._)("ul",null,[(0,s._)("li",null,"java-platform")],-1),b=(0,s._)("p",null,"Java 平台插件带来了为 Java 生态系统声明平台的能力。一个平台可以用于不同的目的：",-1),h=(0,s._)("li",null,"发布的模块的描述（例如，共享相同的版本）",-1),k=(0,s.Uk)("一组库的推荐版本。一个典型的例子包括"),f={href:"https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-build-systems.html#using-boot-dependency-management",target:"_blank",rel:"noopener noreferrer"},_=(0,s.Uk)("Spring Boot BOM"),x=(0,s.Uk)("在子项目之间"),y={href:"https://docs.gradle.org/6.0.1/userguide/java_platform_plugin.html#sec:java_platform_consumption",target:"_blank",rel:"noopener noreferrer"},T=(0,s.Uk)("共享一组依赖版本"),j=(0,s.uE)('<p>​</p><h3 id="动态改变task依赖关系" tabindex="-1"><a class="header-anchor" href="#动态改变task依赖关系" aria-hidden="true">#</a> 动态改变Task依赖关系</h3><p>有时我们需要在一个已有的构建系统中插入我们自己的构建任务，比如在执行Java构建后我们想要删除构建过程中产生的临时文件，那么我们就可以自定义一个名叫cleanTemp的任务，让其依赖于build任务，然后调用cleanTemp任务即可。 但是这种方式适用范围太小，比如在使用IDE执行构建时，IDE默认就是调用build任务，我们没法修改IDE的行为，所以我们需要将自定义的任务插入到原有的任务关系中。</p><ol><li><strong>寻找插入点</strong> 如果你对一个构建的任务依赖关系不熟悉的话，可以使用一个插件来查看，在根项目的build.gradle中添加如下代码:</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>buildscript {\n  repositories {\n    maven {\n      url &quot;https://plugins.gradle.org/m2/&quot;\n    }\n  }\n  dependencies {\n    classpath &quot;gradle.plugin.com.dorongold.plugins:task-tree:1.2.2&quot;\n  }\n}\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后执行<code>gradle &lt;任务名&gt; taskTree --no-repeat</code>，即可看到指定Task的依赖关系，比如在Java构建中查看build任务的依赖关系：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>:build\n+--- :assemble\n|    \\--- :jar\n|         \\--- :classes\n|              +--- :compileJava\n|              \\--- :processResources\n\\--- :check\n     \\--- :test\n          +--- :classes *\n          \\--- :testClasses\n               +--- :compileTestJava\n               |    \\--- :classes *\n               \\--- :processTestResources\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看到build主要执行了assemble包装任务和check测试任务，那么我们可以将我们自定义的cleanTemp插入到build和assemble之间。 2. <strong>动态插入自定义任务</strong> 我们先定义一个自定的任务cleanTemp，让其依赖于assemble。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>task cleanTemp(dependsOn: assemble) {\n  doLast {\n    println &#39;清除所有临时文件&#39;\n  }\n}\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着，我们将cleanTemp添加到build的依赖项中。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>afterEvaluate {\n  build.dependsOn cleanTemp\n}\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，<strong>dependsOn方法只是添加一个依赖项，并不清除之前的依赖项</strong>，所以现在的依赖关系如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>:build\n+--- :assemble\n|    \\--- :jar\n|         \\--- :classes\n|              +--- :compileJava\n|              \\--- :processResources\n+--- :check\n|    \\--- :test\n|         +--- :classes\n|         |    +--- :compileJava\n|         |    \\--- :processResources\n|         \\--- :testClasses\n|              +--- :compileTestJava\n|              |    \\--- :classes\n|              |         +--- :compileJava\n|              |         \\--- :processResources\n|              \\--- :processTestResources\n\\--- :cleanTemp\n     \\--- :assemble\n          \\--- :jar\n               \\--- :classes\n                    +--- :compileJava\n                    \\--- :processResources\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，cleanTemp依赖于assemble，同时build任务多了一个依赖，而build和assemble原有的依赖关系并没有改变，执行<code>gradle build</code>后任务调用结果如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>:compileJava UP-TO-DATE\n:processResources UP-TO-DATE\n:classes UP-TO-DATE\n:jar UP-TO-DATE\n:assemble UP-TO-DATE\n:compileTestJava UP-TO-DATE\n:processTestResources UP-TO-DATE\n:testClasses UP-TO-DATE\n:test UP-TO-DATE\n:check UP-TO-DATE\n:cleanTemp\n清除所有临时文件\n:build\n\nBUILD SUCCESSFUL\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="springboot插件" tabindex="-1"><a class="header-anchor" href="#springboot插件" aria-hidden="true">#</a> springboot插件</h2><h3 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h3><h4 id="org-springframework-boot" tabindex="-1"><a class="header-anchor" href="#org-springframework-boot" aria-hidden="true">#</a> org.springframework.boot</h4><p><strong>打包可执行jar包</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>bootJar {\n    enabled = true  //是否打包\n    archiveClassifier = &#39;boot&#39;  //配置文件名最后部分，如下图，写成boot application和不写的区别\n    mainClass = &#39;com.example.ExampleApplication&#39; // 也可以使用任务的mainClass属性显式配置主类：\n}\njar{\n\tenabled = false //如果不想打出普通的jar包\n}\nbootWar {\n    enabled = true\n    archiveClassifier = &#39;boot&#39;\n    mainClass = &#39;com.example.ExampleApplication&#39; // 也可以使用任务的mainClass属性显式配置主类：\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="assert/gradle-java/image-20220606175045502.png" alt="image-20220606175045502" loading="lazy"></p><h4 id="io-spring-dependency-management" tabindex="-1"><a class="header-anchor" href="#io-spring-dependency-management" aria-hidden="true">#</a> io.spring.dependency-management</h4><p><strong>使用依赖管理插件管理依赖</strong></p>',23),U=(0,s.Uk)("当你应用"),E={href:"https://github.com/spring-gradle-plugins/dependency-management-plugin",target:"_blank",rel:"noopener noreferrer"},C=(0,s._)("code",null,"io.spring.dependency-management",-1),D=(0,s.Uk)("插件时，Spring Boot 的插件会自动从你正在使用的 Spring Boot 版本中"),J={href:"https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/#reacting-to-other-plugins.dependency-management",target:"_blank",rel:"noopener noreferrer"},O=(0,s.Uk)("导入"),A=(0,s._)("code",null,"spring-boot-dependencies",-1),w=(0,s.Uk)("bom"),B=(0,s.Uk)("。这提供了与 Maven 用户所享受的类似的依赖管理体验。例如，它允许您在声明在 bom 中管理的依赖项时省略版本号。要使用此功能，请以通常的方式声明依赖项，但省略版本号："),M=(0,s.uE)('<blockquote><p>Gradle通过io.spring.dependency-management插件实现类Maven的依赖管理方式</p></blockquote><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code>plugins {\n    // the Gradle plugin which provides the “dependencyManagement” block\n    id &#39;io.spring.dependency-management&#39; version &#39;1.0.6.RELEASE&#39;\n    // add Java build functionality to be able to follow the Vaadin guide\n    id &#39;java&#39;\n}\n\ndependencyManagement {\n    imports {\n        // the Maven BOM which contains a coherent set of module versions\n        // for Vaadin dependencies\n        mavenBom &#39;com.vaadin:vaadin-bom:10.0.11&#39;\n    }\n}\n\nrepositories {\n    // find dependency modules on Maven Central\n    mavenCentral()\n}\n\ndependencies {\n    // the dependency module you need according to the Vaadin with\n    // Spring Boot guide; the version of the module is taken from the\n    // imported BOM; transitive dependencies are automatically taken\n    // care of by Gradle (just as with Maven)\n    compile &#39;com.vaadin:vaadin-spring-boot-starter&#39;\n}\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>查看依赖项的版本</strong></p><p>可以使用<code>gradle dependencyManagement</code>查看</p><p><strong>自定义托管版本</strong></p>',5),P=(0,s.Uk)("应用依赖管理插件时自动导入的"),R=(0,s._)("code",null,"spring-boot-dependencies",-1),S=(0,s.Uk)("bom 使用属性来控制它管理的依赖的版本。浏览"),q={href:"https://docs.spring.io/spring-boot/docs/2.7.0/reference/htmlsingle/#dependency-versions-properties",target:"_blank",rel:"noopener noreferrer"},W=(0,s._)("code",null,"Dependency versions Appendix",-1),L=(0,s.Uk)("Spring Boot 参考中的这些属性的完整列表。"),I=(0,s.uE)('<p>要自定义托管版本，请设置其相应的属性。例如，要自定义由<code>slf4j.version</code>属性控制的 SLF4J 的版本：</p><div class="language-groovy ext-groovy line-numbers-mode"><pre class="language-groovy"><code>ext<span class="token punctuation">[</span><span class="token string">&#39;slf4j.version&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;1.7.20&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>每个 Spring Boot 版本都针对一组特定的第三方依赖项进行设计和测试。覆盖版本可能会导致兼容性问题，应小心操作</p><h3 id="引入" tabindex="-1"><a class="header-anchor" href="#引入" aria-hidden="true">#</a> 引入</h3><div class="language-groovy ext-groovy line-numbers-mode"><pre class="language-groovy"><code>buildscript <span class="token punctuation">{</span>\n    repositories <span class="token punctuation">{</span>\n        <span class="token function">mavenLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token punctuation">}</span>\n    dependencies <span class="token punctuation">{</span>\n        <span class="token function">classpath</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;org.springframework.boot:spring-boot-gradle-plugin:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression">springBootVersion</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>\n        <span class="token function">classpath</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;io.spring.gradle:dependency-management-plugin:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression">springBootManagementVersion</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了底下 的配置可以马上用到，我们可以在buildscript 中引入</p><h3 id="官网" tabindex="-1"><a class="header-anchor" href="#官网" aria-hidden="true">#</a> 官网</h3>',7),V={href:"https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/#introduction",target:"_blank",rel:"noopener noreferrer"},z=(0,s.Uk)("https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/#introduction"),Z={},G=(0,i(13860).Z)(Z,[["render",function(e,n){const i=(0,s.up)("ExternalLinkIcon");return(0,s.wg)(),(0,s.iD)("div",null,[a,(0,s._)("p",null,[(0,s._)("a",l,[r,(0,s.Wm)(i)])]),d,t,o,(0,s._)("p",null,[(0,s._)("a",c,[u,(0,s.Wm)(i)])]),v,p,m,g,b,(0,s._)("ol",null,[h,(0,s._)("li",null,[k,(0,s._)("a",f,[_,(0,s.Wm)(i)])]),(0,s._)("li",null,[x,(0,s._)("a",y,[T,(0,s.Wm)(i)])])]),j,(0,s._)("p",null,[U,(0,s._)("a",E,[C,(0,s.Wm)(i)]),D,(0,s._)("a",J,[O,A,w,(0,s.Wm)(i)]),B]),M,(0,s._)("p",null,[P,R,S,(0,s._)("a",q,[W,(0,s.Wm)(i)]),L]),I,(0,s._)("p",null,[(0,s._)("a",V,[z,(0,s.Wm)(i)])])])}]])},13860:(e,n)=>{n.Z=(e,n)=>{const i=e.__vccOpts||e;for(const[e,s]of n)i[e]=s;return i}}}]);