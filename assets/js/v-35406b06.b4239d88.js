"use strict";(self.webpackChunkcoding_road=self.webpackChunkcoding_road||[]).push([[4714],{77836:(a,n,e)=>{e.r(n),e.d(n,{data:()=>s});const s={key:"v-35406b06",path:"/sidebar/sanfene/jvm.html",title:"面渣逆袭（Java 虚拟机篇）必看👍",lang:"zh-CN",frontmatter:{category:["面渣逆袭"],tag:["Java"],summary:'面渣逆袭（Java 虚拟机篇）必看:+1: " 图文详解 50 道 Java 虚拟机高频面试题，这次面试，一定吊打面试官，整理：沉默王二，戳转载链接，作者：三分恶，戳原文链接。" 一、引言 1.什么是 JVM? JVM——Java 虚拟机，它是 Java 实现平台无关性的基石。 Java 程序运行的时候，编译器将 Java 文件编译成平台无关的 Java 字',head:[["meta",{property:"og:url",content:"https://vuepress-theme-hope-v2-demo.mrhope.site/sidebar/sanfene/jvm.html"}],["meta",{property:"og:site_name",content:"coding-rode"}],["meta",{property:"og:title",content:"面渣逆袭（Java 虚拟机篇）必看👍"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-06-04T07:20:53.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:tag",content:"Java"}],["meta",{property:"article:modified_time",content:"2022-06-04T07:20:53.000Z"}]]},excerpt:"",headers:[{level:2,title:"一、引言",slug:"一、引言",children:[{level:3,title:"1.什么是 JVM?",slug:"_1-什么是-jvm",children:[]}]},{level:2,title:"二、内存管理",slug:"二、内存管理",children:[{level:3,title:"2.能说一下 JVM 的内存区域吗？",slug:"_2-能说一下-jvm-的内存区域吗",children:[]},{level:3,title:"3.说一下 JDK1.6、1.7、1.8 内存区域的变化？",slug:"_3-说一下-jdk1-6、1-7、1-8-内存区域的变化",children:[]},{level:3,title:"4.为什么使用元空间替代永久代作为方法区的实现？",slug:"_4-为什么使用元空间替代永久代作为方法区的实现",children:[]},{level:3,title:"5.对象创建的过程了解吗？",slug:"_5-对象创建的过程了解吗",children:[]},{level:3,title:"6.什么是指针碰撞？什么是空闲列表？",slug:"_6-什么是指针碰撞-什么是空闲列表",children:[]},{level:3,title:"7.JVM 里 new 对象时，堆会发生抢占吗？JVM 是怎么设计来保证线程安全的？",slug:"_7-jvm-里-new-对象时-堆会发生抢占吗-jvm-是怎么设计来保证线程安全的",children:[]},{level:3,title:"8.能说一下对象的内存布局吗？",slug:"_8-能说一下对象的内存布局吗",children:[]},{level:3,title:"9.对象怎么访问定位？",slug:"_9-对象怎么访问定位",children:[]},{level:3,title:"10.内存溢出和内存泄漏是什么意思？",slug:"_10-内存溢出和内存泄漏是什么意思",children:[]},{level:3,title:"11.能手写内存溢出的例子吗？",slug:"_11-能手写内存溢出的例子吗",children:[]},{level:3,title:"12.内存泄漏可能由哪些原因导致呢？",slug:"_12-内存泄漏可能由哪些原因导致呢",children:[]},{level:3,title:"13.如何判断对象仍然存活？",slug:"_13-如何判断对象仍然存活",children:[]},{level:3,title:"14.Java 中可作为 GC Roots 的对象有哪几种？",slug:"_14-java-中可作为-gc-roots-的对象有哪几种",children:[]},{level:3,title:"15.说一下对象有哪几种引用？",slug:"_15-说一下对象有哪几种引用",children:[]},{level:3,title:"16.finalize()方法了解吗？有什么作用？",slug:"_16-finalize-方法了解吗-有什么作用",children:[]},{level:3,title:"17.Java 堆的内存分区了解吗？",slug:"_17-java-堆的内存分区了解吗",children:[]},{level:3,title:"18.垃圾收集算法了解吗？",slug:"_18-垃圾收集算法了解吗",children:[]},{level:3,title:"19.说一下新生代的区域划分？",slug:"_19-说一下新生代的区域划分",children:[]},{level:3,title:"20.Minor GC/Young GC、Major GC/Old GC、Mixed GC、Full GC 都是什么意思？",slug:"_20-minor-gc-young-gc、major-gc-old-gc、mixed-gc、full-gc-都是什么意思",children:[]},{level:3,title:"21.Minor GC/Young GC 什么时候触发？",slug:"_21-minor-gc-young-gc-什么时候触发",children:[]},{level:3,title:"22.什么时候会触发 Full GC？",slug:"_22-什么时候会触发-full-gc",children:[]},{level:3,title:"23.对象什么时候会进入老年代？",slug:"_23-对象什么时候会进入老年代",children:[]},{level:3,title:"24.知道有哪些垃圾收集器吗？",slug:"_24-知道有哪些垃圾收集器吗",children:[]},{level:3,title:"25.什么是 Stop The World ? 什么是 OopMap ？什么是安全点？",slug:"_25-什么是-stop-the-world-什么是-oopmap-什么是安全点",children:[]},{level:3,title:"26.能详细说一下 CMS 收集器的垃圾收集过程吗？",slug:"_26-能详细说一下-cms-收集器的垃圾收集过程吗",children:[]},{level:3,title:"27.G1 垃圾收集器了解吗？",slug:"_27-g1-垃圾收集器了解吗",children:[]},{level:3,title:"28.有了 CMS，为什么还要引入 G1？",slug:"_28-有了-cms-为什么还要引入-g1",children:[]},{level:3,title:"29.你们线上用的什么垃圾收集器？为什么要用它？",slug:"_29-你们线上用的什么垃圾收集器-为什么要用它",children:[]},{level:3,title:"30.垃圾收集器应该如何选择？",slug:"_30-垃圾收集器应该如何选择",children:[]},{level:3,title:"31.对象一定分配在堆中吗？有没有了解逃逸分析技术？",slug:"_31-对象一定分配在堆中吗-有没有了解逃逸分析技术",children:[]}]},{level:2,title:"三、JVM 调优",slug:"三、jvm-调优",children:[{level:3,title:"32.有哪些常用的命令行性能监控和故障处理工具？",slug:"_32-有哪些常用的命令行性能监控和故障处理工具",children:[]},{level:3,title:"33.了解哪些可视化的性能监控和故障处理工具？",slug:"_33-了解哪些可视化的性能监控和故障处理工具",children:[]},{level:3,title:"34.JVM 的常见参数配置知道哪些？",slug:"_34-jvm-的常见参数配置知道哪些",children:[]},{level:3,title:"35.有做过 JVM 调优吗？",slug:"_35-有做过-jvm-调优吗",children:[]},{level:3,title:"36.线上服务 CPU 占用过高怎么排查？",slug:"_36-线上服务-cpu-占用过高怎么排查",children:[]},{level:3,title:"37.内存飙高问题怎么排查？",slug:"_37-内存飙高问题怎么排查",children:[]},{level:3,title:"38.频繁 minor gc 怎么办？",slug:"_38-频繁-minor-gc-怎么办",children:[]},{level:3,title:"39.频繁 Full GC 怎么办？",slug:"_39-频繁-full-gc-怎么办",children:[]},{level:3,title:"40.有没有处理过内存泄漏问题？是如何定位的？",slug:"_40-有没有处理过内存泄漏问题-是如何定位的",children:[]},{level:3,title:"41.有没有处理过内存溢出问题？",slug:"_41-有没有处理过内存溢出问题",children:[]}]},{level:2,title:"四、虚拟机执行",slug:"四、虚拟机执行",children:[{level:3,title:"42.能说一下类的生命周期吗？",slug:"_42-能说一下类的生命周期吗",children:[]},{level:3,title:"43.类加载的过程知道吗？",slug:"_43-类加载的过程知道吗",children:[]},{level:3,title:"44.类加载器有哪些？",slug:"_44-类加载器有哪些",children:[]},{level:3,title:"45.什么是双亲委派机制？",slug:"_45-什么是双亲委派机制",children:[]},{level:3,title:"46.为什么要用双亲委派机制？",slug:"_46-为什么要用双亲委派机制",children:[]},{level:3,title:"47.如何破坏双亲委派机制？",slug:"_47-如何破坏双亲委派机制",children:[]},{level:3,title:"48.历史上有哪几次双亲委派机制的破坏？",slug:"_48-历史上有哪几次双亲委派机制的破坏",children:[]},{level:3,title:"49.你觉得应该怎么实现一个热部署功能？",slug:"_49-你觉得应该怎么实现一个热部署功能",children:[]},{level:3,title:"50.Tomcat 的类加载机制了解吗？",slug:"_50-tomcat-的类加载机制了解吗",children:[]}]}],git:{createdTime:1653617096e3,updatedTime:1654327253e3,contributors:[{name:"林振辉",email:"linzhenhui@apexsoft.com",commits:2}]},readingTime:{minutes:54.39,words:16317},filePathRelative:"sidebar/sanfene/jvm.md"}},12149:(a,n,e)=>{e.r(n),e.d(n,{default:()=>C});var s=e(95393);const t=(0,s._)("h1",{id:"面渣逆袭-java-虚拟机篇-必看",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#面渣逆袭-java-虚拟机篇-必看","aria-hidden":"true"},"#"),(0,s.Uk)(" 面渣逆袭（Java 虚拟机篇）必看👍")],-1),l=(0,s.Uk)("图文详解 50 道 Java 虚拟机高频面试题，这次面试，一定吊打面试官，整理：沉默王二，戳"),p={href:"https://mp.weixin.qq.com/s/bHhqhl8mH3OAPt3EkaVc8Q",target:"_blank",rel:"noopener noreferrer"},o=(0,s.Uk)("转载链接"),i=(0,s.Uk)("，作者：三分恶，戳"),r={href:"https://mp.weixin.qq.com/s/XYsEJyIo46jXhHE1sOR_0Q",target:"_blank",rel:"noopener noreferrer"},c=(0,s.Uk)("原文链接"),d=(0,s.Uk)("。"),u=(0,s.uE)('<h2 id="一、引言" tabindex="-1"><a class="header-anchor" href="#一、引言" aria-hidden="true">#</a> 一、引言</h2><h3 id="_1-什么是-jvm" tabindex="-1"><a class="header-anchor" href="#_1-什么是-jvm" aria-hidden="true">#</a> 1.什么是 JVM?</h3><p>JVM——Java 虚拟机，它是 Java 实现平台无关性的基石。</p><p>Java 程序运行的时候，编译器将 Java 文件编译成平台无关的 Java 字节码文件（.class）,接下来对应平台 JVM 对字节码文件进行解释，翻译成对应平台匹配的机器指令并运行。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-1.png" alt="Java语言编译运行" loading="lazy"></p><p>同时 JVM 也是一个跨语言的平台，和语言无关，只和 class 的文件格式关联，任何语言，只要能翻译成符合规范的字节码文件，都能被 JVM 运行。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-2.png" alt="JVM跨语言" loading="lazy"></p><h2 id="二、内存管理" tabindex="-1"><a class="header-anchor" href="#二、内存管理" aria-hidden="true">#</a> 二、内存管理</h2><h3 id="_2-能说一下-jvm-的内存区域吗" tabindex="-1"><a class="header-anchor" href="#_2-能说一下-jvm-的内存区域吗" aria-hidden="true">#</a> 2.能说一下 JVM 的内存区域吗？</h3><p>JVM 内存区域最粗略的划分可以分为<code>堆</code>和<code>栈</code>，当然，按照虚拟机规范，可以划分为以下几个区域：</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-3.png" alt="Java虚拟机运行时数据区" loading="lazy"></p><p>JVM 内存分为线程私有区和线程共享区，其中<code>方法区</code>和<code>堆</code>是线程共享区，<code>虚拟机栈</code>、<code>本地方法栈</code>和<code>程序计数器</code>是线程隔离的数据区。</p><p><strong>1）程序计数器</strong></p><p>程序计数器（Program Counter Register）也被称为 PC 寄存器，是一块较小的内存空间。</p><p>它可以看作是当前线程所执行的字节码的行号指示器。</p><p><strong>2）Java 虚拟机栈</strong></p><p>Java 虚拟机栈（Java Virtual Machine Stack）也是线程私有的，它的生命周期与线程相同。</p><p>Java 虚拟机栈描述的是 Java 方法执行的线程内存模型：方法执行时，JVM 会同步创建一个栈帧，用来存储局部变量表、操作数栈、动态连接等。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-4.png" alt="Java虚拟机栈" loading="lazy"></p><p><strong>3）本地方法栈</strong></p><p>本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别只是虚拟机栈为虚拟机执行 Java 方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的本地（Native）方法服务。</p><p>Java 虚拟机规范允许本地方法栈被实现成固定大小的或者是根据计算动态扩展和收缩的。</p><p><strong>4）Java 堆</strong></p><p>对于 Java 应用程序来说，Java 堆（Java Heap）是虚拟机所管理的内存中最大的一块。Java 堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，Java 里“<strong>几乎</strong>”所有的对象实例都在这里分配内存。</p><p>Java 堆是垃圾收集器管理的内存区域，因此一些资料中它也被称作“GC 堆”（Garbage Collected Heap，）。从回收内存的角度看，由于现代垃圾收集器大部分都是基于分代收集理论设计的，所以 Java 堆中经常会出现<code>新生代</code>、<code>老年代</code>、<code>Eden空间</code>、<code>From Survivor空间</code>、<code>To Survivor空间</code>等名词，需要注意的是这种划分只是根据垃圾回收机制来进行的划分，不是 Java 虚拟机规范本身制定的。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-5.png" alt="Java 堆内存结构" loading="lazy"></p><p><strong>5）方法区</strong></p><p>方法区是比较特别的一块区域，和堆类似，它也是各个线程共享的内存区域，用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。</p><p>它特别在 Java 虚拟机规范对它的约束非常宽松，所以方法区的具体实现历经了许多变迁，例如 jdk1.7 之前使用永久代作为方法区的实现。</p><h3 id="_3-说一下-jdk1-6、1-7、1-8-内存区域的变化" tabindex="-1"><a class="header-anchor" href="#_3-说一下-jdk1-6、1-7、1-8-内存区域的变化" aria-hidden="true">#</a> 3.说一下 JDK1.6、1.7、1.8 内存区域的变化？</h3><p>JDK1.6、1.7/1.8 内存区域发生了变化，主要体现在方法区的实现：</p><ul><li>JDK1.6 使用永久代实现方法区：</li></ul><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-6.png" alt="JDK 1.6内存区域" loading="lazy"></p><ul><li>JDK1.7 时发生了一些变化，将字符串常量池、静态变量，存放在堆上</li></ul><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-7.png" alt="JDK 1.7内存区域" loading="lazy"></p><ul><li>在 JDK1.8 时彻底干掉了永久代，而在直接内存中划出一块区域作为<strong>元空间</strong>，运行时常量池、类常量池都移动到元空间。</li></ul><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-8.png" alt="JDK 1.8内存区域" loading="lazy"></p><h3 id="_4-为什么使用元空间替代永久代作为方法区的实现" tabindex="-1"><a class="header-anchor" href="#_4-为什么使用元空间替代永久代作为方法区的实现" aria-hidden="true">#</a> 4.为什么使用元空间替代永久代作为方法区的实现？</h3><p>Java 虚拟机规范规定的方法区只是换种方式实现。有客观和主观两个原因。</p><ul><li><p>客观上使用永久代来实现方法区的决定的设计导致了 Java 应用更容易遇到内存溢出的问题（永久代有-XX：MaxPermSize 的上限，即使不设置也有默认大小，而 J9 和 JRockit 只要没有触碰到进程可用内存的上限，例如 32 位系统中的 4GB 限制，就不会出问题），而且有极少数方法 （例如 String::intern()）会因永久代的原因而导致不同虚拟机下有不同的表现。</p></li><li><p>主观上当 Oracle 收购 BEA 获得了 JRockit 的所有权后，准备把 JRockit 中的优秀功能，譬如 Java Mission Control 管理工具，移植到 HotSpot 虚拟机时，但因为两者对方法区实现的差异而面临诸多困难。考虑到 HotSpot 未来的发展，在 JDK 6 的 时候 HotSpot 开发团队就有放弃永久代，逐步改为采用本地内存（Native Memory）来实现方法区的计划了，到了 JDK 7 的 HotSpot，已经把原本放在永久代的字符串常量池、静态变量等移出，而到了 JDK 8，终于完全废弃了永久代的概念，改用与 JRockit、J9 一样在本地内存中实现的元空间（Meta-space）来代替，把 JDK 7 中永久代还剩余的内容（主要是类型信息）全部移到元空间中。</p></li></ul><h3 id="_5-对象创建的过程了解吗" tabindex="-1"><a class="header-anchor" href="#_5-对象创建的过程了解吗" aria-hidden="true">#</a> 5.对象创建的过程了解吗？</h3><p>在 JVM 中对象的创建，我们从一个 new 指令开始：</p><ul><li><p>首先检查这个指令的参数是否能在常量池中定位到一个类的符号引用</p></li><li><p>检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，就先执行相应的类加载过程</p></li><li><p>类加载检查通过后，接下来虚拟机将为新生对象分配内存。</p></li><li><p>内存分配完成之后，虚拟机将分配到的内存空间（但不包括对象头）都初始化为零值。</p></li><li><p>接下来设置对象头，请求头里包含了对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息。</p></li></ul><p>这个过程大概图示如下：</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-9.png" alt="对象创建过程" loading="lazy"></p><h3 id="_6-什么是指针碰撞-什么是空闲列表" tabindex="-1"><a class="header-anchor" href="#_6-什么是指针碰撞-什么是空闲列表" aria-hidden="true">#</a> 6.什么是指针碰撞？什么是空闲列表？</h3><p>内存分配有两种方式，<strong>指针碰撞</strong>（Bump The Pointer）、<strong>空闲列表</strong>（Free List）。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-10.png" alt="指针碰撞和空闲列表" loading="lazy"></p><ul><li>指针碰撞：假设 Java 堆中内存是绝对规整的，所有被使用过的内存都被放在一边，空闲的内存被放在另一边，中间放着一个指针作为分界点的指示器，那所分配内存就仅仅是把那个指针向空闲空间方向挪动一段与对象大小相等的距离，这种分配方式称为“指针碰撞”。</li><li>空闲列表：如果 Java 堆中的内存并不是规整的，已被使用的内存和空闲的内存相互交错在一起，那就没有办法简单地进行指针碰撞了，虚拟机就必须维护一个列表，记录上哪些内存块是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录，这种分配方式称为“空闲列表”。</li><li>两种方式的选择由 Java 堆是否规整决定，Java 堆是否规整是由选择的垃圾收集器是否具有压缩整理能力决定的。</li></ul><h3 id="_7-jvm-里-new-对象时-堆会发生抢占吗-jvm-是怎么设计来保证线程安全的" tabindex="-1"><a class="header-anchor" href="#_7-jvm-里-new-对象时-堆会发生抢占吗-jvm-是怎么设计来保证线程安全的" aria-hidden="true">#</a> 7.JVM 里 new 对象时，堆会发生抢占吗？JVM 是怎么设计来保证线程安全的？</h3><p>会，假设 JVM 虚拟机上，每一次 new 对象时，指针就会向右移动一个对象 size 的距离，一个线程正在给 A 对象分配内存，指针还没有来的及修改，另一个为 B 对象分配内存的线程，又引用了这个指针来分配内存，这就发生了抢占。</p><p>有两种可选方案来解决这个问题：</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-11.png" alt="堆抢占和解决方案" loading="lazy"></p><ul><li><p>采用 CAS 分配重试的方式来保证更新操作的原子性</p></li><li><p>每个线程在 Java 堆中预先分配一小块内存，也就是本地线程分配缓冲（Thread Local Allocation</p><p>Buffer，TLAB），要分配内存的线程，先在本地缓冲区中分配，只有本地缓冲区用完了，分配新的缓存区时才需要同步锁定。</p></li></ul><h3 id="_8-能说一下对象的内存布局吗" tabindex="-1"><a class="header-anchor" href="#_8-能说一下对象的内存布局吗" aria-hidden="true">#</a> 8.能说一下对象的内存布局吗？</h3><p>在 HotSpot 虚拟机里，对象在堆内存中的存储布局可以划分为三个部分：对象头（Header）、实例数据（Instance Data）和对齐填充（Padding）。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-12.png" alt="对象的存储布局" loading="lazy"></p><p><strong>对象头</strong>主要由两部分组成：</p><ul><li>第一部分存储对象自身的运行时数据：哈希码、GC 分代年龄、锁状态标志、线程持有的锁、偏向线程 ID、偏向时间戳等，官方称它为 Mark Word，它是个动态的结构，随着对象状态变化。</li><li>第二部分是类型指针，指向对象的类元数据类型（即对象代表哪个类）。</li><li>此外，如果对象是一个 Java 数组，那还应该有一块用于记录数组长度的数据</li></ul><p><strong>实例数据</strong>用来存储对象真正的有效信息，也就是我们在程序代码里所定义的各种类型的字段内容，无论是从父类继承的，还是自己定义的。</p><p><strong>对齐填充</strong>不是必须的，没有特别含义，仅仅起着占位符的作用。</p><h3 id="_9-对象怎么访问定位" tabindex="-1"><a class="header-anchor" href="#_9-对象怎么访问定位" aria-hidden="true">#</a> 9.对象怎么访问定位？</h3><p>Java 程序会通过栈上的 reference 数据来操作堆上的具体对象。由于 reference 类型在《Java 虚拟机规范》里面只规定了它是一个指向对象的引用，并没有定义这个引用应该通过什么方式去定位、访问到堆中对象的具体位置，所以对象访问方式也是由虚拟机实现而定的，主流的访问方式主要有使用句柄和直接指针两种：</p><ul><li>如果使用句柄访问的话，Java 堆中将可能会划分出一块内存来作为句柄池，reference 中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自具体的地址信息，其结构如图所示：</li></ul><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-13.png" alt="通过句柄访问对象" loading="lazy"></p><ul><li>如果使用直接指针访问的话，Java 堆中对象的内存布局就必须考虑如何放置访问类型数据的相关信息，reference 中存储的直接就是对象地址，如果只是访问对象本身的话，就不需要多一次间接访问的开销，如图所示：</li></ul><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-14.png" alt="通过直接指针访问对象" loading="lazy"></p><p>这两种对象访问方式各有优势，使用句柄来访问的最大好处就是 reference 中存储的是稳定句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而 reference 本身不需要被修改。</p><p>使用直接指针来访问最大的好处就是速度更快，它节省了一次指针定位的时间开销，由于对象访问在 Java 中非常频繁，因此这类开销积少成多也是一项极为可观的执行成本。</p><p>HotSpot 虚拟机主要使用直接指针来进行对象访问。</p><h3 id="_10-内存溢出和内存泄漏是什么意思" tabindex="-1"><a class="header-anchor" href="#_10-内存溢出和内存泄漏是什么意思" aria-hidden="true">#</a> 10.内存溢出和内存泄漏是什么意思？</h3><p>内存泄露就是申请的内存空间没有被正确释放，导致内存被白白占用。</p><p>内存溢出就是申请的内存超过了可用内存，内存不够了。</p><p>两者关系：内存泄露可能会导致内存溢出。</p><p>用一个有味道的比喻，内存溢出就是排队去蹲坑，发现没坑位了，内存泄漏，就是有人占着茅坑不拉屎，占着茅坑不拉屎的多了可能会导致坑位不够用。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-15.png" alt="内存泄漏、内存溢出" loading="lazy"></p><h3 id="_11-能手写内存溢出的例子吗" tabindex="-1"><a class="header-anchor" href="#_11-能手写内存溢出的例子吗" aria-hidden="true">#</a> 11.能手写内存溢出的例子吗？</h3><p>在 JVM 的几个内存区域中，除了程序计数器外，其他几个运行时区域都有发生内存溢出（OOM）异常的可能，重点关注堆和栈。</p><ul><li>Java 堆溢出</li></ul><p>Java 堆用于储存对象实例，只要不断创建不可被回收的对象，比如静态对象，那么随着对象数量的增加，总容量触及最大堆的容量限制后就会产生内存溢出异常（OutOfMemoryError）。</p><p>这就相当于一个房子里，不断堆积不能被收走的杂物，那么房子很快就会被堆满了。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * VM参数： -Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeapOOM</span> <span class="token punctuation">{</span>\n    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OOMObject</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OOMObject</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OOMObject</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OOMObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>虚拟机栈.OutOfMemoryError</li></ul><p>JDK 使用的 HotSpot 虚拟机的栈内存大小是固定的，我们可以把栈的内存设大一点，然后不断地去创建线程，因为操作系统给每个进程分配的内存是有限的，所以到最后，也会发生 OutOfMemoryError 异常。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * vm参数：-Xss2M\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaVMStackOOM</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dontStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stackLeakByThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token function">dontStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>\n        <span class="token class-name">JavaVMStackOOM</span> oom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaVMStackOOM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        oom<span class="token punctuation">.</span><span class="token function">stackLeakByThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-内存泄漏可能由哪些原因导致呢" tabindex="-1"><a class="header-anchor" href="#_12-内存泄漏可能由哪些原因导致呢" aria-hidden="true">#</a> 12.内存泄漏可能由哪些原因导致呢？</h3><p>内存泄漏可能的原因有很多种：</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-16.png" alt="内存泄漏可能原因" loading="lazy"></p><p><strong>静态集合类引起内存泄漏</strong></p><p>静态集合的生命周期和 JVM 一致，所以静态集合引用的对象不能被释放。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OOM</span> <span class="token punctuation">{</span>\n <span class="token keyword">static</span> <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">oomTests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n   <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n   list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>单例模式</strong></p><p>和上面的例子原理类似，单例对象在初始化后会以静态变量的方式在 JVM 的整个生命周期中存在。如果单例对象持有外部的引用，那么这个外部对象将不能被 GC 回收，导致内存泄漏。</p><p><strong>数据连接、IO、Socket 等连接</strong></p><p>创建的连接不再使用时，需要调用 <strong>close</strong> 方法关闭连接，只有连接被关闭后，GC 才会回收对应的对象（Connection，Statement，ResultSet，Session）。忘记关闭这些资源会导致持续占有内存，无法被 GC 回收。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.jdbc.Driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token string">&quot;....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>\n    <span class="token comment">//不关闭连接</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>变量不合理的作用域</strong></p><p>一个变量的定义作用域大于其使用范围，很可能存在内存泄漏；或不再使用对象没有及时将对象设置为 null，很可能导致内存泄漏的发生。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Simple</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Object</span> object<span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//...其他代码</span>\n        <span class="token comment">//由于作用域原因，method1执行完成之后，object 对象所分配的内存不会马上释放</span>\n        object <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>hash 值发生变化</strong></p><p>对象 Hash 值改变，使用 HashMap、HashSet 等容器中时候，由于对象修改之后的 Hah 值和存储进容器时的 Hash 值不同，所以无法找到存入的对象，自然也无法单独删除了，这也会造成内存泄漏。说句题外话，这也是为什么 String 类型被设置成了不可变类型。</p><p><strong>ThreadLocal 使用不当</strong></p><p>ThreadLocal 的弱引用导致内存泄漏也是个老生常谈的话题了，使用完 ThreadLocal 一定要记得使用 remove 方法来进行清除。</p><h3 id="_13-如何判断对象仍然存活" tabindex="-1"><a class="header-anchor" href="#_13-如何判断对象仍然存活" aria-hidden="true">#</a> 13.如何判断对象仍然存活？</h3><p>有两种方式，**引用计数算法（reference counting）**和可达性分析算法。</p><ul><li><strong>引用计数算法</strong></li></ul><p>引用计数器的算法是这样的：在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；任何时刻计数器为零的对象就是不可能再被使用的。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-17.png" alt="引用计数算法" loading="lazy"></p><ul><li><strong>可达性分析算法</strong></li></ul><p>目前 Java 虚拟机的主流垃圾回收器采取的是可达性分析算法。这个算法的实质在于将一系列 GC Roots 作为初始的存活对象合集（Gc Root Set），然后从该合集出发，探索所有能够被该集合引用到的对象，并将其加入到该集合中，这个过程我们也称之为标记（mark）。最终，未被探索到的对象便是死亡的，是可以回收的。 <img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-18.png" alt="GC Root" loading="lazy"></p><h3 id="_14-java-中可作为-gc-roots-的对象有哪几种" tabindex="-1"><a class="header-anchor" href="#_14-java-中可作为-gc-roots-的对象有哪几种" aria-hidden="true">#</a> 14.Java 中可作为 GC Roots 的对象有哪几种？</h3><p>可以作为 GC Roots 的主要有四种对象：</p><ul><li>虚拟机栈(栈帧中的本地变量表)中引用的对象</li><li>方法区中类静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>本地方法栈中 JNI 引用的对象</li></ul><h3 id="_15-说一下对象有哪几种引用" tabindex="-1"><a class="header-anchor" href="#_15-说一下对象有哪几种引用" aria-hidden="true">#</a> 15.说一下对象有哪几种引用？</h3><p>Java 中的引用有四种，分为强引用（Strongly Reference）、软引用（Soft Reference）、弱引用（Weak Reference）和虚引用（Phantom Reference）4 种，这 4 种引用强度依次逐渐减弱。</p><ul><li>强引用是最传统的<code>引用</code>的定义，是指在程序代码之中普遍存在的引用赋值，无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Object</span> obj <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>软引用是用来描述一些还有用，但非必须的对象。只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存， 才会抛出内存溢出异常。在 JDK 1.2 版之后提供了 SoftReference 类来实现软引用。</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">ReferenceQueue</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">SoftReference</span> reference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//强引用对象滞空，保留软引用</span>\nobj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>弱引用也是用来描述那些非必须对象，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生为止。当垃圾收集器开始工作，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在 JDK 1.2 版之后提供了 WeakReference 类来实现弱引用。</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">ReferenceQueue</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">WeakReference</span> reference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//强引用对象滞空，保留软引用</span>\nobj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>虚引用也称为“幽灵引用”或者“幻影引用”，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的只是为了能在这个对象被收集器回收时收到一个系统通知。在 JDK 1.2 版之后提供了 PhantomReference 类来实现虚引用。</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">ReferenceQueue</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">PhantomReference</span> reference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhantomReference</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//强引用对象滞空，保留软引用</span>\nobj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-19.png" alt="四种引用总结" loading="lazy"></p><h3 id="_16-finalize-方法了解吗-有什么作用" tabindex="-1"><a class="header-anchor" href="#_16-finalize-方法了解吗-有什么作用" aria-hidden="true">#</a> 16.finalize()方法了解吗？有什么作用？</h3><p>用一个不太贴切的比喻，垃圾回收就是古代的秋后问斩，finalize()就是刀下留人，在人犯被处决之前，还要做最后一次审计，青天大老爷看看有没有什么冤情，需不需要刀下留人。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-20.png" alt="刀下留人" loading="lazy"></p><p>如果对象在进行可达性分析后发现没有与 GC Roots 相连接的引用链，那它将会被第一次标记，随后进行一次筛选，筛选的条件是此对象是否有必要执行 finalize()方法。如果对象在在 finalize()中成功拯救自己——只要重新与引用链上的任何一个对象建立关联即可，譬如把自己 （this 关键字）赋值给某个类变量或者对象的成员变量，那在第二次标记时它就”逃过一劫“；但是如果没有抓住这个机会，那么对象就真的要被回收了。</p><h3 id="_17-java-堆的内存分区了解吗" tabindex="-1"><a class="header-anchor" href="#_17-java-堆的内存分区了解吗" aria-hidden="true">#</a> 17.Java 堆的内存分区了解吗？</h3><p>按照垃圾收集，将 Java 堆划分为**新生代 （Young Generation）<strong>和</strong>老年代（Old Generation）**两个区域，新生代存放存活时间短的对象，而每次回收后存活的少量对象，将会逐步晋升到老年代中存放。</p><p>而新生代又可以分为三个区域，eden、from、to，比例是 8：1：1，而新生代的内存分区同样是从垃圾收集的角度来分配的。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-21.png" alt="Java堆内存划分" loading="lazy"></p><h3 id="_18-垃圾收集算法了解吗" tabindex="-1"><a class="header-anchor" href="#_18-垃圾收集算法了解吗" aria-hidden="true">#</a> 18.垃圾收集算法了解吗？</h3><p>垃圾收集算法主要有三种：</p><ol><li><strong>标记-清除算法</strong></li></ol><p>见名知义，<code>标记-清除</code>（Mark-Sweep）算法分为两个阶段：</p><ul><li><strong>标记</strong> : 标记出所有需要回收的对象</li><li><strong>清除</strong>：回收所有被标记的对象</li></ul><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-22.png" alt="标记-清除算法" loading="lazy"></p><p>标记-清除算法比较基础，但是主要存在两个缺点：</p><ul><li>执行效率不稳定，如果 Java 堆中包含大量对象，而且其中大部分是需要被回收的，这时必须进行大量标记和清除的动作，导致标记和清除两个过程的执行效率都随对象数量增长而降低。</li><li>内存空间的碎片化问题，标记、清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致当以后在程序运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</li></ul><ol start="2"><li><strong>标记-复制算法</strong></li></ol><p>标记-复制算法解决了标记-清除算法面对大量可回收对象时执行效率低的问题。</p><p>过程也比较简单：将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-23.png" alt="标记-复制算法" loading="lazy"></p><p>这种算法存在一个明显的缺点：一部分空间没有使用，存在空间的浪费。</p><p>新生代垃圾收集主要采用这种算法，因为新生代的存活对象比较少，每次复制的只是少量的存活对象。当然，实际新生代的收集不是按照这个比例。</p><ol start="3"><li><strong>标记-整理算法</strong></li></ol><p>为了降低内存的消耗，引入一种针对性的算法：<code>标记-整理</code>（Mark-Compact）算法。</p><p>其中的标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向内存空间一端移动，然后直接清理掉边界以外的内存。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-24.png" alt="标记-整理算法" loading="lazy"></p><p>标记-整理算法主要用于老年代，移动存活对象是个极为负重的操作，而且这种操作需要 Stop The World 才能进行，只是从整体的吞吐量来考量，老年代使用标记-整理算法更加合适。</p><h3 id="_19-说一下新生代的区域划分" tabindex="-1"><a class="header-anchor" href="#_19-说一下新生代的区域划分" aria-hidden="true">#</a> 19.说一下新生代的区域划分？</h3><p>新生代的垃圾收集主要采用标记-复制算法，因为新生代的存活对象比较少，每次复制少量的存活对象效率比较高。</p><p>基于这种算法，虚拟机将内存分为一块较大的 Eden 空间和两块较小的 Survivor 空间，每次分配内存只使用 Eden 和其中一块 Survivor。发生垃圾收集时，将 Eden 和 Survivor 中仍然存活的对象一次性复制到另外一块 Survivor 空间上，然后直接清理掉 Eden 和已用过的那块 Survivor 空间。默认 Eden 和 Survivor 的大小比例是 8∶1。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-25.png" alt="新生代内存划分" loading="lazy"></p><h3 id="_20-minor-gc-young-gc、major-gc-old-gc、mixed-gc、full-gc-都是什么意思" tabindex="-1"><a class="header-anchor" href="#_20-minor-gc-young-gc、major-gc-old-gc、mixed-gc、full-gc-都是什么意思" aria-hidden="true">#</a> 20.Minor GC/Young GC、Major GC/Old GC、Mixed GC、Full GC 都是什么意思？</h3><p><strong>部分收集</strong>（Partial GC）：指目标不是完整收集整个 Java 堆的垃圾收集，其中又分为：</p><ul><li>新生代收集（Minor GC/Young GC）：指目标只是新生代的垃圾收集。</li><li>老年代收集（Major GC/Old GC）：指目标只是老年代的垃圾收集。目前<strong>只有</strong>CMS 收集器会有单独收集老年代的行为。</li><li>混合收集（Mixed GC）：指目标是收集整个新生代以及部分老年代的垃圾收集。目前只有 G1 收集器会有这种行为。</li></ul><p><strong>整堆收集</strong>（Full GC）：收集整个 Java 堆和方法区的垃圾收集。</p><h3 id="_21-minor-gc-young-gc-什么时候触发" tabindex="-1"><a class="header-anchor" href="#_21-minor-gc-young-gc-什么时候触发" aria-hidden="true">#</a> 21.Minor GC/Young GC 什么时候触发？</h3><p>新创建的对象优先在新生代 Eden 区进行分配，如果 Eden 区没有足够的空间时，就会触发 Young GC 来清理新生代。</p><h3 id="_22-什么时候会触发-full-gc" tabindex="-1"><a class="header-anchor" href="#_22-什么时候会触发-full-gc" aria-hidden="true">#</a> 22.什么时候会触发 Full GC？</h3><p>这个触发条件稍微有点多，往下看：</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-26.png" alt="Full GC触发条件" loading="lazy"></p><ul><li><strong>Young GC 之前检查老年代</strong>：在要进行 Young GC 的时候，发现<code>老年代可用的连续内存空间</code> &lt; <code>新生代历次Young GC后升入老年代的对象总和的平均大小</code>，说明本次 Young GC 后可能升入老年代的对象大小，可能超过了老年代当前可用内存空间,那就会触发 Full GC。</li><li><strong>Young GC 之后老年代空间不足</strong>：执行 Young GC 之后有一批对象需要放入老年代，此时老年代就是没有足够的内存空间存放这些对象了，此时必须立即触发一次 Full GC</li><li><strong>老年代空间不足</strong>，老年代内存使用率过高，达到一定比例，也会触发 Full GC。</li><li><strong>空间分配担保失败</strong>（ Promotion Failure），新生代的 To 区放不下从 Eden 和 From 拷贝过来对象，或者新生代对象 GC 年龄到达阈值需要晋升这两种情况，老年代如果放不下的话都会触发 Full GC。</li><li><strong>方法区内存空间不足</strong>：如果方法区由永久代实现，永久代空间不足 Full GC。</li><li><strong>System.gc()等命令触发</strong>：System.gc()、jmap -dump 等命令会触发 full gc。</li></ul><h3 id="_23-对象什么时候会进入老年代" tabindex="-1"><a class="header-anchor" href="#_23-对象什么时候会进入老年代" aria-hidden="true">#</a> 23.对象什么时候会进入老年代？</h3><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-27.png" alt="对象进入老年代" loading="lazy"></p><p><strong>长期存活的对象将进入老年代</strong></p><p>在对象的对象头信息中存储着对象的迭代年龄,迭代年龄会在每次 YoungGC 之后对象的移区操作中增加,每一次移区年龄加一.当这个年龄达到 15(默认)之后,这个对象将会被移入老年代。</p><p>可以通过这个参数设置这个年龄值。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token operator">-</span> XX<span class="token operator">:</span><span class="token class-name">MaxTenuringThreshold</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>大对象直接进入老年代</strong></p><p>有一些占用大量连续内存空间的对象在被加载就会直接进入老年代.这样的大对象一般是一些数组,长字符串之类的对。</p><p>HotSpot 虚拟机提供了这个参数来设置。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token operator">-</span>XX：<span class="token class-name">PretenureSizeThreshold</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>动态对象年龄判定</strong></p><p>为了能更好地适应不同程序的内存状况，HotSpot 虚拟机并不是永远要求对象的年龄必须达到- XX：MaxTenuringThreshold 才能晋升老年代，如果在 Survivor 空间中相同年龄所有对象大小的总和大于 Survivor 空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代。</p><p><strong>空间分配担保</strong></p><p>假如在 Young GC 之后，新生代仍然有大量对象存活，就需要老年代进行分配担保，把 Survivor 无法容纳的对象直接送入老年代。</p><h3 id="_24-知道有哪些垃圾收集器吗" tabindex="-1"><a class="header-anchor" href="#_24-知道有哪些垃圾收集器吗" aria-hidden="true">#</a> 24.知道有哪些垃圾收集器吗？</h3><p>主要垃圾收集器如下，图中标出了它们的工作区域、垃圾收集算法，以及配合关系。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-28.png" alt="HotSpot虚拟机垃圾收集器" loading="lazy"></p><p>这些收集器里，面试的重点是两个——<strong>CMS</strong>和<strong>G1</strong>。</p><ul><li>Serial 收集器</li></ul><p>Serial 收集器是最基础、历史最悠久的收集器。</p><p>如同它的名字（串行），它是一个单线程工作的收集器，使用一个处理器或一条收集线程去完成垃圾收集工作。并且进行垃圾收集时，必须暂停其他所有工作线程，直到垃圾收集结束——这就是所谓的“Stop The World”。</p><p>Serial/Serial Old 收集器的运行过程如图：</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-29.png" alt="Serial/Serial Old收集器运行示意图" loading="lazy"></p><ul><li>ParNew</li></ul><p>ParNew 收集器实质上是 Serial 收集器的多线程并行版本，使用多条线程进行垃圾收集。</p><p>ParNew/Serial Old 收集器运行示意图如下：</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-30.png" alt="ParNew/Serial Old收集器运行示意图" loading="lazy"></p><ul><li>Parallel Scavenge</li></ul><p>Parallel Scavenge 收集器是一款新生代收集器，基于标记-复制算法实现，也能够并行收集。和 ParNew 有些类似，但 Parallel Scavenge 主要关注的是垃圾收集的吞吐量——所谓吞吐量，就是 CPU 用于运行用户代码的时间和总消耗时间的比值，比值越大，说明垃圾收集的占比越小。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-31.png" alt="吞吐量" loading="lazy"></p><ul><li>Serial Old</li></ul><p>Serial Old 是 Serial 收集器的老年代版本，它同样是一个单线程收集器，使用标记-整理算法。</p><ul><li>Parallel Old</li></ul><p>Parallel Old 是 Parallel Scavenge 收集器的老年代版本，支持多线程并发收集，基于标记-整理算法实现。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-32.png" alt="Parallel Scavenge/Parallel Old收集器运行示意图" loading="lazy"></p><ul><li>CMS 收集器</li></ul><p>CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器，同样是老年代的收集器，采用标记-清除算法。</p><ul><li>Garbage First 收集器</li></ul><p>Garbage First（简称 G1）收集器是垃圾收集器的一个颠覆性的产物，它开创了局部收集的设计思路和基于 Region 的内存布局形式。</p><h3 id="_25-什么是-stop-the-world-什么是-oopmap-什么是安全点" tabindex="-1"><a class="header-anchor" href="#_25-什么是-stop-the-world-什么是-oopmap-什么是安全点" aria-hidden="true">#</a> 25.什么是 Stop The World ? 什么是 OopMap ？什么是安全点？</h3><p>进行垃圾回收的过程中，会涉及对象的移动。为了保证对象引用更新的正确性，必须暂停所有的用户线程，像这样的停顿，虚拟机设计者形象描述为<code>Stop The World</code>。也简称为 STW。</p><p>在 HotSpot 中，有个数据结构（映射表）称为<code>OopMap</code>。一旦类加载动作完成的时候，HotSpot 就会把对象内什么偏移量上是什么类型的数据计算出来，记录到 OopMap。在即时编译过程中，也会在<code>特定的位置</code>生成 OopMap，记录下栈上和寄存器里哪些位置是引用。</p><p>这些特定的位置主要在：</p><ul><li><p>1.循环的末尾（非 counted 循环）</p></li><li><p>2.方法临返回前 / 调用方法的 call 指令后</p></li><li><p>3.可能抛异常的位置</p></li></ul><p>这些位置就叫作<strong>安全点(safepoint)。</strong> 用户程序执行时并非在代码指令流的任意位置都能够在停顿下来开始垃圾收集，而是必须是执行到安全点才能够暂停。</p><p>用通俗的比喻，假如老王去拉车，车上东西很重，老王累的汗流浃背，但是老王不能在上坡或者下坡休息，只能在平地上停下来擦擦汗，喝口水。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-33.png" alt="老王拉车只能在平路休息" loading="lazy"></p><h3 id="_26-能详细说一下-cms-收集器的垃圾收集过程吗" tabindex="-1"><a class="header-anchor" href="#_26-能详细说一下-cms-收集器的垃圾收集过程吗" aria-hidden="true">#</a> 26.能详细说一下 CMS 收集器的垃圾收集过程吗？</h3><p>CMS 收集齐的垃圾收集分为四步：</p><ul><li><strong>初始标记</strong>（CMS initial mark）：单线程运行，需要 Stop The World，标记 GC Roots 能直达的对象。</li><li><strong>并发标记</strong>（（CMS concurrent mark）：无停顿，和用户线程同时运行，从 GC Roots 直达对象开始遍历整个对象图。</li><li><strong>重新标记</strong>（CMS remark）：多线程运行，需要 Stop The World，标记并发标记阶段产生对象。</li><li><strong>并发清除</strong>（CMS concurrent sweep）：无停顿，和用户线程同时运行，清理掉标记阶段标记的死亡的对象。</li></ul><p>Concurrent Mark Sweep 收集器运行示意图如下：</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-34.png" alt="Concurrent Mark Sweep收集器运行示意图" loading="lazy"></p><h3 id="_27-g1-垃圾收集器了解吗" tabindex="-1"><a class="header-anchor" href="#_27-g1-垃圾收集器了解吗" aria-hidden="true">#</a> 27.G1 垃圾收集器了解吗？</h3><p>Garbage First（简称 G1）收集器是垃圾收集器的一个颠覆性的产物，它开创了局部收集的设计思路和基于 Region 的内存布局形式。</p><p>虽然 G1 也仍是遵循分代收集理论设计的，但其堆内存的布局与其他收集器有非常明显的差异。以前的收集器分代是划分新生代、老年代、持久代等。</p><p>G1 把连续的 Java 堆划分为多个大小相等的独立区域（Region），每一个 Region 都可以根据需要，扮演新生代的 Eden 空间、Survivor 空间，或者老年代空间。收集器能够对扮演不同角色的 Region 采用不同的策略去处理。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-35.png" alt="G1 Heap Regions" loading="lazy"></p><p>这样就避免了收集整个堆，而是按照若干个 Region 集进行收集，同时维护一个优先级列表，跟踪各个 Region 回收的“价值，优先收集价值高的 Region。</p><p>G1 收集器的运行过程大致可划分为以下四个步骤：</p><ul><li><strong>初始标记</strong>（initial mark），标记了从 GC Root 开始直接关联可达的对象。STW（Stop the World）执行。</li><li><strong>并发标记</strong>（concurrent marking），和用户线程并发执行，从 GC Root 开始对堆中对象进行可达性分析，递归扫描整个堆里的对象图，找出要回收的对象、</li><li><strong>最终标记</strong>（Remark），STW，标记再并发标记过程中产生的垃圾。</li><li><strong>筛选回收</strong>（Live Data Counting And Evacuation），制定回收计划，选择多个 Region 构成回收集，把回收集中 Region 的存活对象复制到空的 Region 中，再清理掉整个旧 Region 的全部空间。需要 STW。</li></ul><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-36.png" alt="G1收集器运行示意图" loading="lazy"></p><h3 id="_28-有了-cms-为什么还要引入-g1" tabindex="-1"><a class="header-anchor" href="#_28-有了-cms-为什么还要引入-g1" aria-hidden="true">#</a> 28.有了 CMS，为什么还要引入 G1？</h3><p>优点：CMS 最主要的优点在名字上已经体现出来——并发收集、低停顿。</p><p>缺点：CMS 同样有三个明显的缺点。</p><ul><li>Mark Sweep 算法会导致内存碎片比较多</li><li>CMS 的并发能力比较依赖于 CPU 资源，并发回收时垃圾收集线程可能会抢占用户线程的资源，导致用户程序性能下降。</li><li>并发清除阶段，用户线程依然在运行，会产生所谓的理“浮动垃圾”（Floating Garbage），本次垃圾收集无法处理浮动垃圾，必须到下一次垃圾收集才能处理。如果浮动垃圾太多，会触发新的垃圾回收，导致性能降低。</li></ul><p>G1 主要解决了内存碎片过多的问题。</p><h3 id="_29-你们线上用的什么垃圾收集器-为什么要用它" tabindex="-1"><a class="header-anchor" href="#_29-你们线上用的什么垃圾收集器-为什么要用它" aria-hidden="true">#</a> 29.你们线上用的什么垃圾收集器？为什么要用它？</h3><p>怎么说呢，虽然调优说的震天响，但是我们一般都是用默认。管你 Java 怎么升，我用 8，那么 JDK1.8 默认用的是什么呢？</p><p>可以使用命令：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>java <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">PrintCommandLineFlags</span> <span class="token operator">-</span>version\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到有这么一行：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">UseParallelGC</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>UseParallelGC</code> = <code>Parallel Scavenge + Parallel Old</code>，表示的是新生代用的<code>Parallel Scavenge</code>收集器，老年代用的是<code>Parallel Old</code> 收集器。</p><p>那为什么要用这个呢？默认的呗。</p><p>当然面试肯定不能这么答。</p><p>Parallel Scavenge 的特点是什么？</p><p>高吞吐，我们可以回答：因为我们系统是业务相对复杂，但并发并不是非常高，所以希望尽可能的利用处理器资源，出于提高吞吐量的考虑采用<code>Parallel Scavenge + Parallel Old</code>的组合。</p><p>当然，这个默认虽然也有说法，但不太讨喜。</p><p>还可以说：</p><p>采用<code>Parallel New</code>+<code>CMS</code>的组合，我们比较关注服务的响应速度，所以采用了 CMS 来降低停顿时间。</p><p>或者一步到位：</p><p>我们线上采用了设计比较优秀的 G1 垃圾收集器，因为它不仅满足我们低停顿的要求，而且解决了 CMS 的浮动垃圾问题、内存碎片问题。</p><h3 id="_30-垃圾收集器应该如何选择" tabindex="-1"><a class="header-anchor" href="#_30-垃圾收集器应该如何选择" aria-hidden="true">#</a> 30.垃圾收集器应该如何选择？</h3><p>垃圾收集器的选择需要权衡的点还是比较多的——例如运行应用的基础设施如何？使用 JDK 的发行商是什么？等等……</p><p>这里简单地列一下上面提到的一些收集器的适用场景：</p><ul><li>Serial ：如果应用程序有一个很小的内存空间（大约 100 MB）亦或它在没有停顿时间要求的单线程处理器上运行。</li><li>Parallel：如果优先考虑应用程序的峰值性能，并且没有时间要求要求，或者可以接受 1 秒或更长的停顿时间。</li><li>CMS/G1：如果响应时间比吞吐量优先级高，或者垃圾收集暂停必须保持在大约 1 秒以内。</li><li>ZGC：如果响应时间是高优先级的，或者堆空间比较大。</li></ul><h3 id="_31-对象一定分配在堆中吗-有没有了解逃逸分析技术" tabindex="-1"><a class="header-anchor" href="#_31-对象一定分配在堆中吗-有没有了解逃逸分析技术" aria-hidden="true">#</a> 31.对象一定分配在堆中吗？有没有了解逃逸分析技术？</h3><p><strong>对象一定分配在堆中吗？</strong> 不一定的。</p><p>随着 JIT 编译期的发展与逃逸分析技术逐渐成熟，所有的对象都分配到堆上也渐渐变得不那么“绝对”了。其实，在编译期间，JIT 会对代码做很多优化。其中有一部分优化的目的就是减少内存堆分配压力，其中一种重要的技术叫做逃逸分析。</p><p><strong>什么是逃逸分析？</strong></p><p><strong>逃逸分析</strong>是指分析指针动态范围的方法，它同编译器优化原理的指针分析和外形分析相关联。当变量（或者对象）在方法中分配后，其指针有可能被返回或者被全局引用，这样就会被其他方法或者线程所引用，这种现象称作指针（或者引用）的逃逸(Escape)。</p><p>通俗点讲，当一个对象被 new 出来之后，它可能被外部所调用，如果是作为参数传递到外部了，就称之为方法逃逸。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-37.png" alt="逃逸" loading="lazy"></p><p>除此之外，如果对象还有可能被外部线程访问到，例如赋值给可以在其它线程中访问的实例变量，这种就被称为线程逃逸。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-38.png" alt="逃逸强度" loading="lazy"></p><p><strong>逃逸分析的好处</strong></p><ul><li>栈上分配</li></ul><p>如果确定一个对象不会逃逸到线程之外，那么久可以考虑将这个对象在栈上分配，对象占用的内存随着栈帧出栈而销毁，这样一来，垃圾收集的压力就降低很多。</p><ul><li><strong>同步消除</strong></li></ul><p>线程同步本身是一个相对耗时的过程，如果逃逸分析能够确定一个变量不会逃逸出线程，无法被其他线程访问，那么这个变量的读写肯定就不会有竞争， 对这个变量实施的同步措施也就可以安全地消除掉。</p><ul><li><strong>标量替换</strong></li></ul><p>如果一个数据是基本数据类型，不可拆分，它就被称之为标量。把一个 Java 对象拆散，将其用到的成员变量恢复为原始类型来访问，这个过程就称为标量替换。假如逃逸分析能够证明一个对象不会被方法外部访问，并且这个对象可以被拆散，那么可以不创建对象，直接用创建若干个成员变量代替，可以让对象的成员变量在栈上分配和读写。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/xingbiaogongzhonghao.png" alt="" loading="lazy"></p><h2 id="三、jvm-调优" tabindex="-1"><a class="header-anchor" href="#三、jvm-调优" aria-hidden="true">#</a> 三、JVM 调优</h2><h3 id="_32-有哪些常用的命令行性能监控和故障处理工具" tabindex="-1"><a class="header-anchor" href="#_32-有哪些常用的命令行性能监控和故障处理工具" aria-hidden="true">#</a> 32.有哪些常用的命令行性能监控和故障处理工具？</h3><ul><li><p>操作系统工具</p><ul><li>top：显示系统整体资源使用情况</li><li>vmstat：监控内存和 CPU</li><li>iostat：监控 IO 使用</li><li>netstat：监控网络使用</li></ul></li><li><p>JDK 性能监控工具</p><ul><li>jps：虚拟机进程查看</li><li>jstat：虚拟机运行时信息查看</li><li>jinfo：虚拟机配置查看</li><li>jmap：内存映像（导出）</li><li>jhat：堆转储快照分析</li><li>jstack：Java 堆栈跟踪</li><li>jcmd：实现上面除了 jstat 外所有命令的功能</li></ul></li></ul><h3 id="_33-了解哪些可视化的性能监控和故障处理工具" tabindex="-1"><a class="header-anchor" href="#_33-了解哪些可视化的性能监控和故障处理工具" aria-hidden="true">#</a> 33.了解哪些可视化的性能监控和故障处理工具？</h3><p>以下是一些 JDK 自带的可视化性能监控和故障处理工具：</p><ul><li>JConsole</li></ul><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-39.png" alt="JConsole概览" loading="lazy"></p><ul><li>VisualVM</li></ul><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-40.png" alt="VisualVM安装插件" loading="lazy"></p><ul><li>Java Mission Control</li></ul><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-41.png" alt="JMC主要界面" loading="lazy"></p><p>除此之外，还有一些第三方的工具：</p><ul><li><strong>MAT</strong></li></ul><p>Java 堆内存分析工具。</p><ul><li><strong>GChisto</strong></li></ul><p>GC 日志分析工具。</p><ul><li><strong>GCViewer</strong></li></ul><p><code>GC</code> 日志分析工具。</p><ul><li><strong>JProfiler</strong></li></ul><p>商用的性能分析利器。</p><ul><li><strong>arthas</strong></li></ul><p>阿里开源诊断工具。</p><ul><li><strong>async-profiler</strong></li></ul><p>Java 应用性能分析工具，开源、火焰图、跨平台。</p><h3 id="_34-jvm-的常见参数配置知道哪些" tabindex="-1"><a class="header-anchor" href="#_34-jvm-的常见参数配置知道哪些" aria-hidden="true">#</a> 34.JVM 的常见参数配置知道哪些？</h3><p>一些常见的参数配置：</p><p><strong>堆配置：</strong></p><ul><li>-Xms:初始堆大小</li><li>-Xms：最大堆大小</li><li>-XX:NewSize=n:设置年轻代大小</li><li>-XX:NewRatio=n:设置年轻代和年老代的比值。如：为 3 表示年轻代和年老代比值为 1：3，年轻代占整个年轻代年老代和的 1/4</li><li>-XX:SurvivorRatio=n:年轻代中 Eden 区与两个 Survivor 区的比值。注意 Survivor 区有两个。如 3 表示 Eden： 3 Survivor：2，一个 Survivor 区占整个年轻代的 1/5</li><li>-XX:MaxPermSize=n:设置持久代大小</li></ul><p><strong>收集器设置：</strong></p><ul><li>-XX:+UseSerialGC:设置串行收集器</li><li>-XX:+UseParallelGC:设置并行收集器</li><li>-XX:+UseParalledlOldGC:设置并行年老代收集器</li><li>-XX:+UseConcMarkSweepGC:设置并发收集器</li></ul><p><strong>并行收集器设置</strong></p><ul><li>-XX:ParallelGCThreads=n:设置并行收集器收集时使用的 CPU 数。并行收集线程数</li><li>-XX:MaxGCPauseMillis=n:设置并行收集最大的暂停时间（如果到这个时间了，垃圾回收器依然没有回收完，也会停止回收）</li><li>-XX:GCTimeRatio=n:设置垃圾回收时间占程序运行时间的百分比。公式为：1/(1+n)</li><li>-XX:+CMSIncrementalMode:设置为增量模式。适用于单 CPU 情况</li><li>-XX:ParallelGCThreads=n:设置并发收集器年轻代手机方式为并行收集时，使用的 CPU 数。并行收集线程数</li></ul><p><strong>打印 GC 回收的过程日志信息</strong></p><ul><li>-XX:+PrintGC</li><li>-XX:+PrintGCDetails</li><li>-XX:+PrintGCTimeStamps</li><li>-Xloggc:filename</li></ul><h3 id="_35-有做过-jvm-调优吗" tabindex="-1"><a class="header-anchor" href="#_35-有做过-jvm-调优吗" aria-hidden="true">#</a> 35.有做过 JVM 调优吗？</h3><p>JVM 调优是一件很严肃的事情，不是拍脑门就开始调优的，需要有严密的分析和监控机制，大概的一个 JVM 调优流程图：</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-42.png" alt="JVM调优大致流程图" loading="lazy"></p><p>实际上，JVM 调优是不得已而为之，有那功夫，好好把烂代码重构一下不比瞎调 JVM 强。</p><p>但是，面试官非要问怎么办？可以从处理问题的角度来回答（对应图中事后），这是一个中规中矩的案例：电商公司的运营后台系统，偶发性的引发 OOM 异常，堆内存溢出。</p><p>1）因为是偶发性的，所以第一次简单的认为就是堆内存不足导致，单方面的加大了堆内存从 4G 调整到 8G -Xms8g。</p><p>2）但是问题依然没有解决，只能从堆内存信息下手，通过开启了-XX:+HeapDumpOnOutOfMemoryError 参数 获得堆内存的 dump 文件。</p><p>3）用 JProfiler 对 堆 dump 文件进行分析，通过 JProfiler 查看到占用内存最大的对象是 String 对象，本来想跟踪着 String 对象找到其引用的地方，但 dump 文件太大，跟踪进去的时候总是卡死，而 String 对象占用比较多也比较正常，最开始也没有认定就是这里的问题，于是就从线程信息里面找突破点。</p><p>4）通过线程进行分析，先找到了几个正在运行的业务线程，然后逐一跟进业务线程看了下代码，有个方法引起了我的注意，<code>导出订单信息</code>。</p><p>5）因为订单信息导出这个方法可能会有几万的数据量，首先要从数据库里面查询出来订单信息，然后把订单信息生成 excel，这个过程会产生大量的 String 对象。</p><p>6）为了验证自己的猜想，于是准备登录后台去测试下，结果在测试的过程中发现导出订单的按钮前端居然没有做点击后按钮置灰交互事件，后端也没有做防止重复提交，因为导出订单数据本来就非常慢，使用的人员可能发现点击后很久后页面都没反应，然后就一直点，结果就大量的请求进入到后台，堆内存产生了大量的订单对象和 EXCEL 对象，而且方法执行非常慢，导致这一段时间内这些对象都无法被回收，所以最终导致内存溢出。</p><p>7）知道了问题就容易解决了，最终没有调整任何 JVM 参数，只是做了两个处理：</p><ul><li>在前端的导出订单按钮上加上了置灰状态，等后端响应之后按钮才可以进行点击</li><li>后端代码加分布式锁，做防重处理</li></ul><p>这样双管齐下，保证导出的请求不会一直打到服务端，问题解决！</p><h3 id="_36-线上服务-cpu-占用过高怎么排查" tabindex="-1"><a class="header-anchor" href="#_36-线上服务-cpu-占用过高怎么排查" aria-hidden="true">#</a> 36.线上服务 CPU 占用过高怎么排查？</h3><p>问题分析：CPU 高一定是某个程序长期占用了 CPU 资源。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-43.png" alt="CPU飙高" loading="lazy"></p><p>1）所以先需要找出那个进程占用 CPU 高。</p><ul><li>top 列出系统各个进程的资源占用情况。</li></ul><p>2）然后根据找到对应进行里哪个线程占用 CPU 高。</p><ul><li>top -Hp 进程 ID 列出对应进程里面的线程占用资源情况</li></ul><p>3）找到对应线程 ID 后，再打印出对应线程的堆栈信息</p><ul><li>printf &quot;%x\\n&quot; PID 把线程 ID 转换为 16 进制。</li><li>jstack PID 打印出进程的所有线程信息，从打印出来的线程信息中找到上一步转换为 16 进制的线程 ID 对应的线程信息。</li></ul><p>4）最后根据线程的堆栈信息定位到具体业务方法,从代码逻辑中找到问题所在。</p><p>查看是否有线程长时间的 watting 或 blocked，如果线程长期处于 watting 状态下， 关注 watting on xxxxxx，说明线程在等待这把锁，然后根据锁的地址找到持有锁的线程。</p><h3 id="_37-内存飙高问题怎么排查" tabindex="-1"><a class="header-anchor" href="#_37-内存飙高问题怎么排查" aria-hidden="true">#</a> 37.内存飙高问题怎么排查？</h3><p>分析： 内存飚高如果是发生在 java 进程上，一般是因为创建了大量对象所导致，持续飚高说明垃圾回收跟不上对象创建的速度，或者内存泄露导致对象无法回收。</p><p>1）先观察垃圾回收的情况</p><ul><li>jstat -gc PID 1000 查看 GC 次数，时间等信息，每隔一秒打印一次。</li><li>jmap -histo PID | head -20 查看堆内存占用空间最大的前 20 个对象类型,可初步查看是哪个对象占用了内存。</li></ul><p>如果每次 GC 次数频繁，而且每次回收的内存空间也正常，那说明是因为对象创建速度快导致内存一直占用很高；如果每次回收的内存非常少，那么很可能是因为内存泄露导致内存一直无法被回收。</p><p>2）导出堆内存文件快照</p><ul><li>jmap -dump:live,format=b,file=/home/myheapdump.hprof PID dump 堆内存信息到文件。</li></ul><p>3）使用 visualVM 对 dump 文件进行离线分析，找到占用内存高的对象，再找到创建该对象的业务代码位置，从代码和业务场景中定位具体问题。</p><h3 id="_38-频繁-minor-gc-怎么办" tabindex="-1"><a class="header-anchor" href="#_38-频繁-minor-gc-怎么办" aria-hidden="true">#</a> 38.频繁 minor gc 怎么办？</h3><p>优化 Minor GC 频繁问题：通常情况下，由于新生代空间较小，Eden 区很快被填满，就会导致频繁 Minor GC，因此可以通过增大新生代空间<code>-Xmn</code>来降低 Minor GC 的频率。</p><h3 id="_39-频繁-full-gc-怎么办" tabindex="-1"><a class="header-anchor" href="#_39-频繁-full-gc-怎么办" aria-hidden="true">#</a> 39.频繁 Full GC 怎么办？</h3><p>Full GC 的排查思路大概如下：</p><p>1）清楚从程序角度，有哪些原因导致 FGC？</p><ul><li><strong>大对象</strong>：系统一次性加载了过多数据到内存中（比如 SQL 查询未做分页），导致大对象进入了老年代。</li><li><strong>内存泄漏</strong>：频繁创建了大量对象，但是无法被回收（比如 IO 对象使用完后未调用 close 方法释放资源），先引发 FGC，最后导致 OOM.</li><li>程序频繁生成一些<strong>长生命周期的对象</strong>，当这些对象的存活年龄超过分代年龄时便会进入老年代，最后引发 FGC. （即本文中的案例）</li><li><strong>程序 BUG</strong></li><li>代码中<strong>显式调用了 gc</strong>方法，包括自己的代码甚至框架中的代码。</li><li>JVM 参数设置问题：包括总内存大小、新生代和老年代的大小、Eden 区和 S 区的大小、元空间大小、垃圾回收算法等等。</li></ul><p>2）清楚排查问题时能使用哪些工具</p><ul><li>公司的监控系统：大部分公司都会有，可全方位监控 JVM 的各项指标。</li><li>JDK 的自带工具，包括 jmap、jstat 等常用命令：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 查看堆内存各区域的使用率以及GC情况</span>\njstat -gcutil -h20 pid <span class="token number">1000</span>\n<span class="token comment"># 查看堆内存中的存活对象，并按空间排序</span>\njmap -histo pid <span class="token operator">|</span> <span class="token function">head</span> -n20\n<span class="token comment"># dump堆内存文件</span>\njmap -dump:format<span class="token operator">=</span>b,file<span class="token operator">=</span>heap pid\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可视化的堆内存分析工具：JVisualVM、MAT 等</li></ul><p>3）排查指南</p><ul><li>查看监控，以了解出现问题的时间点以及当前 FGC 的频率（可对比正常情况看频率是否正常）</li><li>了解该时间点之前有没有程序上线、基础组件升级等情况。</li><li>了解 JVM 的参数设置，包括：堆空间各个区域的大小设置，新生代和老年代分别采用了哪些垃圾收集器，然后分析 JVM 参数设置是否合理。</li><li>再对步骤 1 中列出的可能原因做排除法，其中元空间被打满、内存泄漏、代码显式调用 gc 方法比较容易排查。</li><li>针对大对象或者长生命周期对象导致的 FGC，可通过 jmap -histo 命令并结合 dump 堆内存文件作进一步分析，需要先定位到可疑对象。</li><li>通过可疑对象定位到具体代码再次分析，这时候要结合 GC 原理和 JVM 参数设置，弄清楚可疑对象是否满足了进入到老年代的条件才能下结论。</li></ul><h3 id="_40-有没有处理过内存泄漏问题-是如何定位的" tabindex="-1"><a class="header-anchor" href="#_40-有没有处理过内存泄漏问题-是如何定位的" aria-hidden="true">#</a> 40.有没有处理过内存泄漏问题？是如何定位的？</h3><p>内存泄漏是内在病源，外在病症表现可能有：</p><ul><li>应用程序长时间连续运行时性能严重下降</li><li>CPU 使用率飙升，甚至到 100%</li><li>频繁 Full GC，各种报警，例如接口超时报警等</li><li>应用程序抛出 <code>OutOfMemoryError</code> 错误</li><li>应用程序偶尔会耗尽连接对象</li></ul><p>严重<strong>内存泄漏</strong>往往伴随频繁的 <strong>Full GC</strong>，所以分析排查内存泄漏问题首先还得从查看 Full GC 入手。主要有以下操作步骤：</p><p>1）使用 <code>jps</code> 查看运行的 Java 进程 ID</p><p>2）使用<code>top -p [pid]</code> 查看进程使用 CPU 和 MEM 的情况</p><p>3）使用 <code>top -Hp [pid]</code> 查看进程下的所有线程占 CPU 和 MEM 的情况</p><p>4）将线程 ID 转换为 16 进制：<code>printf &quot;%x\\n&quot; [pid]</code>，输出的值就是线程栈信息中的 <strong>nid</strong>。</p><p>例如：<code>printf &quot;%x\\n&quot; 29471</code>，换行输出 <strong>731f</strong>。</p><p>5）抓取线程栈：<code>jstack 29452 &gt; 29452.txt</code>，可以多抓几次做个对比。</p><p>在线程栈信息中找到对应线程号的 16 进制值，如下是 <strong>731f</strong> 线程的信息。线程栈分析可使用 Visualvm 插件 <strong>TDA</strong>。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token string">&quot;Service Thread&quot;</span> #<span class="token number">7</span> daemon prio<span class="token operator">=</span><span class="token number">9</span> os_prio<span class="token operator">=</span><span class="token number">0</span> tid<span class="token operator">=</span><span class="token number">0x00007fbe2c164000</span> nid<span class="token operator">=</span><span class="token number">0x731f</span> runnable <span class="token punctuation">[</span><span class="token number">0x0000000000000000</span><span class="token punctuation">]</span>\n  <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Thread<span class="token punctuation">.</span>State</span><span class="token operator">:</span> RUNNABLE\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>6）使用<code>jstat -gcutil [pid] 5000 10</code> 每隔 5 秒输出 GC 信息，输出 10 次，查看 <strong>YGC</strong> 和 <strong>Full GC</strong> 次数。通常会出现 YGC 不增加或增加缓慢，而 Full GC 增加很快。</p><p>或使用 <code>jstat -gccause [pid] 5000</code> ，同样是输出 GC 摘要信息。</p><p>或使用 <code>jmap -heap [pid]</code> 查看堆的摘要信息，关注老年代内存使用是否达到阀值，若达到阀值就会执行 Full GC。</p><p>7）如果发现 <code>Full GC</code> 次数太多，就很大概率存在内存泄漏了</p><p>8）使用 <code>jmap -histo:live [pid]</code> 输出每个类的对象数量，内存大小(字节单位)及全限定类名。</p><p>9）生成 <code>dump</code> 文件，借助工具分析哪 个对象非常多，基本就能定位到问题在那了</p><p>使用 jmap 生成 dump 文件：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code># jmap <span class="token operator">-</span>dump<span class="token operator">:</span>live<span class="token punctuation">,</span>format<span class="token operator">=</span>b<span class="token punctuation">,</span>file<span class="token operator">=</span><span class="token number">29471.d</span>ump <span class="token number">29471</span>\n<span class="token class-name">Dumping</span> heap <span class="token keyword">to</span> <span class="token operator">/</span>root<span class="token operator">/</span>dump <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token class-name">Heap</span> dump file created\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>10）dump 文件分析</p><p>可以使用 <strong>jhat</strong> 命令分析：<code>jhat -port 8000 29471.dump</code>，浏览器访问 jhat 服务，端口是 8000。</p><p>通常使用图形化工具分析，如 JDK 自带的 <strong>jvisualvm</strong>，从菜单 &gt; 文件 &gt; 装入 dump 文件。</p><p>或使用第三方式具分析的，如 <strong>JProfiler</strong> 也是个图形化工具，<strong>GCViewer</strong> 工具。Eclipse 或以使用 MAT 工具查看。或使用在线分析平台 <strong>GCEasy</strong>。</p><p><strong>注意</strong>：如果 dump 文件较大的话，分析会占比较大的内存。</p><p>11）在 dump 文析结果中查找存在大量的对象，再查对其的引用。</p><p>基本上就可以定位到代码层的逻辑了。</p><h3 id="_41-有没有处理过内存溢出问题" tabindex="-1"><a class="header-anchor" href="#_41-有没有处理过内存溢出问题" aria-hidden="true">#</a> 41.有没有处理过内存溢出问题？</h3><p>内存泄漏和内存溢出二者关系非常密切，内存溢出可能会有很多原因导致，内存泄漏最可能的罪魁祸首之一。</p><p>排查过程和排查内存泄漏过程类似。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/xingbiaogongzhonghao.png" alt="" loading="lazy"></p><h2 id="四、虚拟机执行" tabindex="-1"><a class="header-anchor" href="#四、虚拟机执行" aria-hidden="true">#</a> 四、虚拟机执行</h2><h3 id="_42-能说一下类的生命周期吗" tabindex="-1"><a class="header-anchor" href="#_42-能说一下类的生命周期吗" aria-hidden="true">#</a> 42.能说一下类的生命周期吗？</h3><p>一个类从被加载到虚拟机内存中开始，到从内存中卸载，整个生命周期需要经过七个阶段：加载 （Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化 （Initialization）、使用（Using）和卸载（Unloading），其中验证、准备、解析三个部分统称为连接（Linking）。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-44.png" alt="类的生命周期" loading="lazy"></p><h3 id="_43-类加载的过程知道吗" tabindex="-1"><a class="header-anchor" href="#_43-类加载的过程知道吗" aria-hidden="true">#</a> 43.类加载的过程知道吗？</h3><p>加载是 JVM 加载的起点，具体什么时候开始加载，《Java 虚拟机规范》中并没有进行强制约束，可以交给虚拟机的具体实现来自由把握。</p><p>在加载过程，JVM 要做三件事情：</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-45.png" alt="加载" loading="lazy"></p><ul><li><p>1）通过一个类的全限定名来获取定义此类的二进制字节流。</p></li><li><p>2）将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</p></li><li><p>3）在内存中生成一个代表这个类的 java.lang.Class 对象，作为方法区这个类的各种数据的访问入口。</p></li></ul><p>加载阶段结束后，Java 虚拟机外部的二进制字节流就按照虚拟机所设定的格式存储在方法区之中了，方法区中的数据存储格式完全由虚拟机实现自行定义，《Java 虚拟机规范》未规定此区域的具体数据结构。</p><p>类型数据妥善安置在方法区之后，会在 Java 堆内存中实例化一个 java.lang.Class 类的对象， 这个对象将作为程序访问方法区中的类型数据的外部接口。</p><h3 id="_44-类加载器有哪些" tabindex="-1"><a class="header-anchor" href="#_44-类加载器有哪些" aria-hidden="true">#</a> 44.类加载器有哪些？</h3><p>主要有四种类加载器:</p><ul><li><p><strong>启动类加载器</strong>(Bootstrap ClassLoader)用来加载 java 核心类库，无法被 java 程序直接引用。</p></li><li><p><strong>扩展类加载器</strong>(extensions class loader):它用来加载 Java 的扩展库。Java 虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载 Java 类。</p></li><li><p><strong>系统类加载器</strong>（system class loader）：它根据 Java 应用的类路径（CLASSPATH）来加载 Java 类。一般来说，Java 应用的类都是由它来完成加载的。可以通过 ClassLoader.getSystemClassLoader()来获取它。</p></li><li><p><strong>用户自定义类加载器</strong> (user class loader)，用户通过继承 java.lang.ClassLoader 类的方式自行实现的类加载器。</p></li></ul><h3 id="_45-什么是双亲委派机制" tabindex="-1"><a class="header-anchor" href="#_45-什么是双亲委派机制" aria-hidden="true">#</a> 45.什么是双亲委派机制？</h3><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-46.png" alt="双亲委派模型" loading="lazy"></p><p>双亲委派模型的工作过程：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到最顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求时，子加载器才会尝试自己去完成加载。</p><h3 id="_46-为什么要用双亲委派机制" tabindex="-1"><a class="header-anchor" href="#_46-为什么要用双亲委派机制" aria-hidden="true">#</a> 46.为什么要用双亲委派机制？</h3><p>答案是为了保证应用程序的稳定有序。</p><p>例如类 java.lang.Object，它存放在 rt.jar 之中，通过双亲委派机制，保证最终都是委派给处于模型最顶端的启动类加载器进行加载，保证 Object 的一致。反之，都由各个类加载器自行去加载的话，如果用户自己也编写了一个名为 java.lang.Object 的类，并放在程序的 ClassPath 中，那系统中就会出现多个不同的 Object 类。</p><h3 id="_47-如何破坏双亲委派机制" tabindex="-1"><a class="header-anchor" href="#_47-如何破坏双亲委派机制" aria-hidden="true">#</a> 47.如何破坏双亲委派机制？</h3><p>如果不想打破双亲委派模型，就重写 ClassLoader 类中的 fifindClass()方法即可，无法被父类加载器加载的类最终会通过这个方法被加载。而如果想打破双亲委派模型则需要重写 loadClass()方法。</p><h3 id="_48-历史上有哪几次双亲委派机制的破坏" tabindex="-1"><a class="header-anchor" href="#_48-历史上有哪几次双亲委派机制的破坏" aria-hidden="true">#</a> 48.历史上有哪几次双亲委派机制的破坏？</h3><p>双亲委派机制在历史上主要有三次破坏：</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-47.png" alt="双亲委派模型的三次破坏" loading="lazy"></p><blockquote><p><strong>第一次破坏</strong></p></blockquote><p>双亲委派模型的第一次“被破坏”其实发生在双亲委派模型出现之前——即 JDK 1.2 面世以前的“远古”时代。</p><p>由于双亲委派模型在 JDK 1.2 之后才被引入，但是类加载器的概念和抽象类 java.lang.ClassLoader 则在 Java 的第一个版本中就已经存在，为了向下兼容旧代码，所以无法以技术手段避免 loadClass()被子类覆盖的可能性，只能在 JDK 1.2 之后的 java.lang.ClassLoader 中添加一个新的 protected 方法 findClass()，并引导用户编写的类加载逻辑时尽可能去重写这个方法，而不是在 loadClass()中编写代码。</p><blockquote><p><strong>第二次破坏</strong></p></blockquote><p>双亲委派模型的第二次“被破坏”是由这个模型自身的缺陷导致的，如果有基础类型又要调用回用户的代码，那该怎么办呢？</p><p>例如我们比较熟悉的 JDBC:</p><p>各个厂商各有不同的 JDBC 的实现，Java 在核心包<code>\\lib</code>里定义了对应的 SPI，那么这个就毫无疑问由<code>启动类加载器</code>加载器加载。</p><p>但是各个厂商的实现，是没办法放在核心包里的，只能放在<code>classpath</code>里，只能被<code>应用类加载器</code>加载。那么，问题来了，启动类加载器它就加载不到厂商提供的 SPI 服务代码。</p><p>为了解决这个问题，引入了一个不太优雅的设计：线程上下文类加载器 （Thread Context ClassLoader）。这个类加载器可以通过 java.lang.Thread 类的 setContext-ClassLoader()方法进行设置，如果创建线程时还未设置，它将会从父线程中继承一个，如果在应用程序的全局范围内都没有设置过的话，那这个类加载器默认就是应用程序类加载器。</p><p>JNDI 服务使用这个线程上下文类加载器去加载所需的 SPI 服务代码，这是一种父类加载器去请求子类加载器完成类加载的行为。</p><blockquote><p><strong>第三次破坏</strong></p></blockquote><p>双亲委派模型的第三次“被破坏”是由于用户对程序动态性的追求而导致的，例如代码热替换（Hot Swap）、模块热部署（Hot Deployment）等。</p><p>OSGi 实现模块化热部署的关键是它自定义的类加载器机制的实现，每一个程序模块（OSGi 中称为 Bundle）都有一个自己的类加载器，当需要更换一个 Bundle 时，就把 Bundle 连同类加载器一起换掉以实现代码的热替换。在 OSGi 环境下，类加载器不再双亲委派模型推荐的树状结构，而是进一步发展为更加复杂的网状结构。</p><h3 id="_49-你觉得应该怎么实现一个热部署功能" tabindex="-1"><a class="header-anchor" href="#_49-你觉得应该怎么实现一个热部署功能" aria-hidden="true">#</a> 49.你觉得应该怎么实现一个热部署功能？</h3><p>我们已经知道了 Java 类的加载过程。一个 Java 类文件到虚拟机里的对象，要经过如下过程:首先通过 Java 编译器，将 Java 文件编译成 class 字节码，类加载器读取 class 字节码，再将类转化为实例，对实例 newInstance 就可以生成对象。</p><p>类加载器 ClassLoader 功能，也就是将 class 字节码转换到类的实例。在 Java 应用中，所有的实例都是由类加载器，加载而来。</p><p>一般在系统中，类的加载都是由系统自带的类加载器完成，而且对于同一个全限定名的 java 类（如 com.csiar.soc.HelloWorld），只能被加载一次，而且无法被卸载。</p><p>这个时候问题就来了，如果我们希望将 java 类卸载，并且替换更新版本的 java 类，该怎么做呢？</p><p>既然在类加载器中，Java 类只能被加载一次，并且无法卸载。那么我们是不是可以直接把 Java 类加载器干掉呢？答案是可以的，我们可以自定义类加载器，并重写 ClassLoader 的 findClass 方法。</p><p>想要实现热部署可以分以下三个步骤：</p><ul><li>1）销毁原来的自定义 ClassLoader</li><li>2）更新 class 类文件</li><li>3）创建新的 ClassLoader 去加载更新后的 class 类文件。</li></ul><p>到此，一个热部署的功能就这样实现了。</p><h3 id="_50-tomcat-的类加载机制了解吗" tabindex="-1"><a class="header-anchor" href="#_50-tomcat-的类加载机制了解吗" aria-hidden="true">#</a> 50.Tomcat 的类加载机制了解吗？</h3><p>Tomcat 是主流的 Java Web 服务器之一，为了实现一些特殊的功能需求，自定义了一些类加载器。</p><p>Tomcat 类加载器如下：</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/jvm-48.png" alt="Tomcat类加载器" loading="lazy"></p><p>Tomcat 实际上也是破坏了双亲委派模型的。</p><p>Tomact 是 web 容器，可能需要部署多个应用程序。不同的应用程序可能会依赖同一个第三方类库的不同版本，但是不同版本的类库中某一个类的全路径名可能是一样的。如多个应用都要依赖 hollis.jar，但是 A 应用需要依赖 1.0.0 版本，但是 B 应用需要依赖 1.0.1 版本。这两个版本中都有一个类是 com.hollis.Test.class。如果采用默认的双亲委派类加载机制，那么无法加载多个相同的类。</p><p>所以，Tomcat 破坏了<strong>双亲委派原则</strong>，提供隔离的机制，为每个 web 容器单独提供一个 WebAppClassLoader 加载器。每一个 WebAppClassLoader 负责加载本身的目录下的 class 文件，加载不到时再交 CommonClassLoader 加载，这和双亲委派刚好相反。</p><p><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/xingbiaogongzhonghao.png" alt="" loading="lazy"></p>',433),v=(0,s.Uk)("图文详解 50 道 Java 虚拟机高频面试题，这次面试，一定吊打面试官，整理：沉默王二，戳"),g={href:"https://mp.weixin.qq.com/s/bHhqhl8mH3OAPt3EkaVc8Q",target:"_blank",rel:"noopener noreferrer"},m=(0,s.Uk)("转载链接"),h=(0,s.Uk)("，作者：三分恶，戳"),b={href:"https://mp.weixin.qq.com/s/XYsEJyIo46jXhHE1sOR_0Q",target:"_blank",rel:"noopener noreferrer"},k=(0,s.Uk)("原文链接"),j=(0,s.Uk)("。"),f={},C=(0,e(13860).Z)(f,[["render",function(a,n){const e=(0,s.up)("ExternalLinkIcon");return(0,s.wg)(),(0,s.iD)("div",null,[t,(0,s._)("blockquote",null,[(0,s._)("p",null,[l,(0,s._)("a",p,[o,(0,s.Wm)(e)]),i,(0,s._)("a",r,[c,(0,s.Wm)(e)]),d])]),u,(0,s._)("blockquote",null,[(0,s._)("p",null,[v,(0,s._)("a",g,[m,(0,s.Wm)(e)]),h,(0,s._)("a",b,[k,(0,s.Wm)(e)]),j])])])}]])},13860:(a,n)=>{n.Z=(a,n)=>{const e=a.__vccOpts||a;for(const[a,s]of n)e[a]=s;return e}}}]);