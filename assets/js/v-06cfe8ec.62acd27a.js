"use strict";(self.webpackChunkcoding_road=self.webpackChunkcoding_road||[]).push([[1316],{52808:(n,s,e)=>{e.r(s),e.d(s,{data:()=>a});const a={key:"v-06cfe8ec",path:"/coding-road/javaee/springboot/mysql-druid.html",title:"Spring Boot 整合 MySQL 和 Druid",lang:"zh-CN",frontmatter:{category:["Java企业级开发"],tag:["Spring Boot"],title:"Spring Boot 整合 MySQL 和 Druid",summary:"Spring Boot 整合 MySQL 和 Druid MySQL 简介 MySQL 是目前项目中运用最广泛的关系型数据库，无论是互联网大厂，还是中小型公司，几乎都在用。 MySQL 体积小、速度快、源码开放，所以广受开发者喜爱。 MySQL 的安装非常简单，针对不同的操作系统，MySQL 都提供了安装包的下载。 MySQL 目前主推的版本是 8.0，参考",head:[["meta",{property:"og:url",content:"https://vuepress-theme-hope-v2-demo.mrhope.site/coding-road/javaee/springboot/mysql-druid.html"}],["meta",{property:"og:site_name",content:"coding-rode"}],["meta",{property:"og:title",content:"Spring Boot 整合 MySQL 和 Druid"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-06-04T08:56:49.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:tag",content:"Spring Boot"}],["meta",{property:"article:modified_time",content:"2022-06-04T08:56:49.000Z"}]]},excerpt:"",headers:[{level:3,title:"MySQL 简介",slug:"mysql-简介",children:[]},{level:3,title:"如何安装 MySQL",slug:"如何安装-mysql",children:[]},{level:3,title:"Spring Boot 整合 MySQL 数据库",slug:"spring-boot-整合-mysql-数据库",children:[]},{level:3,title:"如何通过 Navicat 连接 MySQL",slug:"如何通过-navicat-连接-mysql",children:[]},{level:3,title:"如何通过 Intellij IDEA 连接 MySQL",slug:"如何通过-intellij-idea-连接-mysql",children:[]},{level:3,title:"Spring Boot 整合 Druid",slug:"spring-boot-整合-druid",children:[]},{level:3,title:"源码地址",slug:"源码地址",children:[]}],git:{createdTime:1653617096e3,updatedTime:1654333009e3,contributors:[{name:"林振辉",email:"linzhenhui@apexsoft.com",commits:2},{name:"thinkingme",email:"linzhenhuigg@gmail.com",commits:1}]},readingTime:{minutes:8.12,words:2437},filePathRelative:"coding-road/javaee/springboot/mysql-druid.md"}},32462:(n,s,e)=>{e.r(s),e.d(s,{default:()=>V});var a=e(95393);const i=(0,a.uE)('<h1 id="spring-boot-整合-mysql-和-druid" tabindex="-1"><a class="header-anchor" href="#spring-boot-整合-mysql-和-druid" aria-hidden="true">#</a> Spring Boot 整合 MySQL 和 Druid</h1><h3 id="mysql-简介" tabindex="-1"><a class="header-anchor" href="#mysql-简介" aria-hidden="true">#</a> MySQL 简介</h3><p>MySQL 是目前项目中运用最广泛的关系型数据库，无论是互联网大厂，还是中小型公司，几乎都在用。</p><p>MySQL 体积小、速度快、源码开放，所以广受开发者喜爱。</p><p>MySQL 的安装非常简单，针对不同的操作系统，MySQL 都提供了安装包的下载。</p><p><img src="https://cdn.jsdelivr.net/gh/thinkingme/thinkingme.github.io@master/images/springboot/mysql-druid-f75e7dfe-7dc2-43b2-94d1-68ff775cd2ed.png" alt="" loading="lazy"></p><p>MySQL 目前主推的版本是 8.0，参考手册的地址如下所示：</p>',7),t={href:"https://dev.mysql.com/doc/refman/8.0/en/",target:"_blank",rel:"noopener noreferrer"},l=(0,a.Uk)("https://dev.mysql.com/doc/refman/8.0/en/"),o=(0,a._)("h3",{id:"如何安装-mysql",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#如何安装-mysql","aria-hidden":"true"},"#"),(0,a.Uk)(" 如何安装 MySQL")],-1),r=(0,a._)("p",null,"如果有云服务器的话，建议安装在云服务器上，这样就可以长时间运行 MySQL 而不用担心服务重启的问题。按照步骤参照下面的文档。",-1),p={href:"https://dev.mysql.com/doc/refman/8.0/en/linux-installation.html",target:"_blank",rel:"noopener noreferrer"},d=(0,a.Uk)("https://dev.mysql.com/doc/refman/8.0/en/linux-installation.html"),c=(0,a._)("p",null,"也可以直接通过宝塔面板的形式来安装，这样更省事省力省心。",-1),u=(0,a.Uk)("宝塔面板安装脚本地址："),m={href:"https://www.bt.cn/new/download.html",target:"_blank",rel:"noopener noreferrer"},g=(0,a.Uk)("https://www.bt.cn/new/download.html"),v=(0,a._)("p",null,[(0,a._)("img",{src:"https://cdn.jsdelivr.net/gh/thinkingme/thinkingme.github.io@master/images/springboot/mysql-druid-89f6d126-b059-4511-b64d-720aa8df354f.png",alt:"",loading:"lazy"})],-1),b=(0,a._)("p",null,"安装完成后，就可以在数据库管理页面添加数据库并且进行管理了。",-1),h=(0,a._)("p",null,[(0,a._)("img",{src:"https://cdn.jsdelivr.net/gh/thinkingme/thinkingme.github.io@master/images/springboot/mysql-druid-86d80ab6-968e-42ec-a532-1eeb341779c1.png",alt:"",loading:"lazy"})],-1),k=(0,a._)("p",null,"如果是 Windows 用户的话，安装步骤参照下面的文档。",-1),y={href:"https://dev.mysql.com/doc/refman/8.0/en/windows-installation.html",target:"_blank",rel:"noopener noreferrer"},f=(0,a.Uk)("https://dev.mysql.com/doc/refman/8.0/en/windows-installation.html"),S=(0,a._)("p",null,"如果是 macOS 用户的话，安装步骤参照下面的文档。",-1),q={href:"https://dev.mysql.com/doc/refman/8.0/en/macos-installation-pkg.html",target:"_blank",rel:"noopener noreferrer"},_=(0,a.Uk)("https://dev.mysql.com/doc/refman/8.0/en/macos-installation-pkg.html"),w=(0,a._)("p",null,"Windows 和 macOS 的安装都非常的简单，主要就是下载对应操作系统的 MySQL 包安装管理器。",-1),L=(0,a._)("p",null,[(0,a._)("img",{src:"https://cdn.jsdelivr.net/gh/thinkingme/thinkingme.github.io@master/images/springboot/mysql-druid-ab94f6df-2031-42ff-8746-b4ad5a4e3a81.png",alt:"",loading:"lazy"})],-1),j=(0,a._)("p",null,"然后按照包安装向导的提示一步步傻瓜式安装即可。",-1),x=(0,a._)("p",null,[(0,a._)("img",{src:"https://cdn.jsdelivr.net/gh/thinkingme/thinkingme.github.io@master/images/springboot/mysql-druid-e7031aec-74c5-4079-a6f3-97368c921620.png",alt:"",loading:"lazy"})],-1),M=(0,a._)("h3",{id:"spring-boot-整合-mysql-数据库",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#spring-boot-整合-mysql-数据库","aria-hidden":"true"},"#"),(0,a.Uk)(" Spring Boot 整合 MySQL 数据库")],-1),Q=(0,a._)("p",null,"Spring Boot 整合 MySQL 数据库非常简单，只需要添加 MySQL 依赖并在配置文件中添加数据库配置即可。我们可以不用编写原始的访问数据库的代码，也不用调用 JDBC 或者连接池就可以访问 MySQL。",-1),D=(0,a.Uk)("1）使用 Intellij IDEA 新建一个 Spring Boot 项目，使用 Java 8 版本「社区版没有此功能，需要到 (Spring initializr)["),I={href:"https://start.spring.io/",target:"_blank",rel:"noopener noreferrer"},E=(0,a.Uk)("https://start.spring.io/"),U=(0,a.Uk)("]）生成项目后导入，推荐使用旗舰版，功能更加强大」。"),T=(0,a.uE)('<p><img src="https://cdn.jsdelivr.net/gh/thinkingme/thinkingme.github.io@master/images/springboot/mysql-druid-d7765111-9dcb-4125-a87a-da1439a0a6cf.png" alt="" loading="lazy"></p><p>添加 MySQL 的 Java 连接驱动依赖和 JDBC Starter。</p><p><img src="https://cdn.jsdelivr.net/gh/thinkingme/thinkingme.github.io@master/images/springboot/mysql-druid-201eb6fa-0a09-46d7-a555-3988bee92a9f.png" alt="" loading="lazy"></p><p>对应 pom.xml 文件中的代码：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;dependency&gt;\n    &lt;groupId&gt;mysql&lt;/groupId&gt;\n    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n    &lt;scope&gt;runtime&lt;/scope&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2）通过宝塔面板新建 codingmore-mysql 数据库并添加数据表</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>CREATE TABLE `user` (\n  `id` int NOT NULL,\n  `name` varchar(10) NOT NULL,\n  `password` varchar(10) NOT NULL,\n  `age` int NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;\n\n--\n-- 转储表的索引\n--\n\n--\n-- 表的索引 `user`\n--\nALTER TABLE `user`\n  ADD PRIMARY KEY (`id`);\nCOMMIT;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后插入一条数据：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>INSERT INTO `user` (`id`, `name`, `password`, `age`) VALUES (&#39;1&#39;, &#39;沉默王二&#39;, &#39; 123456&#39;, &#39;18&#39;);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我把 SQL 语句放在源码的 resouces 目录里了</p><p><strong>3）在 application.yml 文件中添加数据库链接驱动信息</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>spring:\n  datasource:\n    username: codingmore-mysql\n    password: YyfR4TDxCwrjZ2Fs\n    url:jdbc: mysql://118.190.99.232:3306/codingmore-mysql?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai&amp;useSSL=false\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>推荐安装 Spring Initializr and assistant 插件。可以自动补全配置信息。</p><p><img src="https://cdn.jsdelivr.net/gh/thinkingme/thinkingme.github.io@master/images/springboot/mysql-druid-be486130-539a-49b5-ac6f-dc1bf7f8cba6.png" alt="" loading="lazy"></p><p><strong>4）新建实体类 User.java</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>建议在 pom.xml 文件中添加 lombok 的依赖。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n    &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n    &lt;version&gt;1.18.20&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5）在测试类中添加以下代码</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>\n<span class="token annotation punctuation">@Slf4j</span>\n<span class="token keyword">class</span> <span class="token class-name">CodingmoreMysqlApplicationTests</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Resource</span>\n    <span class="token keyword">private</span> <span class="token class-name">JdbcTemplate</span> jdbcTemplate<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> sql <span class="token operator">=</span><span class="token string">&quot;select * from user&quot;</span><span class="token punctuation">;</span>\n        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token annotation punctuation">@Override</span>\n            <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">mapRow</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> rowNum<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>\n                <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span> user<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;查询成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;用户{}&quot;</span><span class="token punctuation">,</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Spring Boot 的测试类主要放置在 <code>src/test/java</code> 目录下面，项目创建成功后，Spring Boot 会根据项目名称自动为我们生成测试类。</p><p>比如说本次项目名为 codingmore-mysql，那么测试类名为 CodingmoreMysqlApplicationTests。</p><p><code>@SpringBootTest</code> 注解能够测试我们的项目主类，该项目为 CodingmoreMysqlApplication。</p><p><code>@Test</code> 注解是 junit 单元测试的注解，表示该方法为测试方法。</p><p><code>JdbcTemplate</code> 一个通过 JDBC 连接数据库的工具类，spring-boot-starter-jdbc 依赖中包含了该类。</p><p><code>@Resource</code> 注解会帮我们在 Spring Boot 启动的时候注入一个 JdbcTemplate 的对象。</p><p><code>jdbcTemplate.query()</code> 方法通过 SQL 语句和匿名内部类参数的形式，执行 SQL 并查询结果集。</p><p><code>RowMapper</code> 就是查询到的每一行数据对象，我们可以通过重写 mapRow 方法将数据结果集封装到 User 对象上。</p><p>右键菜单运行 testMysql 方法就可以在日志中看到 SQL 执行的结果。</p><p><img src="https://cdn.jsdelivr.net/gh/thinkingme/thinkingme.github.io@master/images/springboot/mysql-druid-92a53c8e-e99a-4ca6-8ad1-f5ec4653da3b.png" alt="" loading="lazy"></p><h3 id="如何通过-navicat-连接-mysql" tabindex="-1"><a class="header-anchor" href="#如何通过-navicat-连接-mysql" aria-hidden="true">#</a> 如何通过 Navicat 连接 MySQL</h3><p>Navicat 是一个从我参加工作到现在一直都在用的 MySQL 客户端工具，通过 Navicat 可以轻松连接数据库，并执行增删改查操作。</p><p><img src="https://cdn.jsdelivr.net/gh/thinkingme/thinkingme.github.io@master/images/springboot/mysql-druid-2daef9fc-4a97-41bb-bd1c-875f468d90bc.png" alt="" loading="lazy"></p><p>连接数据库也非常的简单，只需要填写主机 IP 地址、端口、用户名和密码即可。</p><p><img src="https://cdn.jsdelivr.net/gh/thinkingme/thinkingme.github.io@master/images/springboot/mysql-druid-18d120ea-0f84-4ca0-b0fd-020587e43fc4.png" alt="" loading="lazy"></p><h3 id="如何通过-intellij-idea-连接-mysql" tabindex="-1"><a class="header-anchor" href="#如何通过-intellij-idea-连接-mysql" aria-hidden="true">#</a> 如何通过 Intellij IDEA 连接 MySQL</h3><p>除了 Navicat，还可以使用 Intellij IDEA 直连 MySQL。</p><p>点击「database」面板，在左上角选择 + 号，选择 DataSource，再选择 MySQL。</p><p><img src="https://cdn.jsdelivr.net/gh/thinkingme/thinkingme.github.io@master/images/springboot/mysql-druid-070ab8b8-0629-4238-b35d-438dbcbb130e.png" alt="" loading="lazy"></p><p>在弹出面板中填写连接信息。</p><p><img src="https://cdn.jsdelivr.net/gh/thinkingme/thinkingme.github.io@master/images/springboot/mysql-druid-29ba218a-7528-49bf-b2da-c5fa48b40d2b.png" alt="" loading="lazy"></p><p>如果是第一次连接 MySQL 的话，记得点击「download」下载 MySQL 驱动，之后点击「test connection」测试是否链接成功，如果出现以下界面，则表示 OK。</p><p><img src="https://cdn.jsdelivr.net/gh/thinkingme/thinkingme.github.io@master/images/springboot/mysql-druid-1b86d117-412c-47a2-82c8-c22f9bcf6455.png" alt="" loading="lazy"></p><p>选择右侧的数据库表，双击，就可以查看到数据了。</p><p><img src="https://cdn.jsdelivr.net/gh/thinkingme/thinkingme.github.io@master/images/springboot/mysql-druid-8c0288ae-ee22-4983-8d91-7ed7125b17a5.png" alt="" loading="lazy"></p><p>在「console」SQL 查询面板里可以编写 SQL 语句来执行增删改查操作。</p><p><img src="https://cdn.jsdelivr.net/gh/thinkingme/thinkingme.github.io@master/images/springboot/mysql-druid-e1c9e85c-382a-40a8-a4fa-3fe32ee612fb.png" alt="" loading="lazy"></p><h3 id="spring-boot-整合-druid" tabindex="-1"><a class="header-anchor" href="#spring-boot-整合-druid" aria-hidden="true">#</a> Spring Boot 整合 Druid</h3><p>Druid 是阿里巴巴开源的一款数据库连接池，结合了 C3P0、DBCP 等 DB 池的优点，同时还加入了日志监控。</p><p>Druid 在 GitHub 上已经收获了 25.4k 的 star，可以说非常的知名，从简介上也能看得出，Druid 就是为了监控而生的。</p>',50),z={href:"https://github.com/alibaba/druid/",target:"_blank",rel:"noopener noreferrer"},B=(0,a.Uk)("https://github.com/alibaba/druid/"),A=(0,a.uE)('<p><img src="https://cdn.jsdelivr.net/gh/thinkingme/thinkingme.github.io@master/images/springboot/mysql-druid-a1f53d5b-1048-4707-bebc-1a59d7793880.png" alt="" loading="lazy"></p><p>Druid 包含了三个重要的组成部分：</p><ul><li>DruidDriver，能够提供基于 Filter-Chain 模式的插件体系；</li><li>DruidDataSource，高效可管理的数据库连接池；</li><li>SQLParser，支持所有 JDBC 兼容的数据库，包括 Oracle、MySQL 等。</li></ul><p>Spring Boot2.0 以上默认使用的是 Hikari 连接池，我们从之前的日志信息里就可以看得到。</p><p><img src="https://cdn.jsdelivr.net/gh/thinkingme/thinkingme.github.io@master/images/springboot/mysql-druid-0982b47e-b211-41a6-ab88-355e1d2ae7be.png" alt="" loading="lazy"></p><p>那如果我们想使用 Druid 的话，该怎么整合呢？</p><p>这次我们直接在编程喵项目后端项目 codingmore-admin 上进行修改。</p><p>第一步，在 pom.xml 文件中添加 Druid 的依赖，官方已经提供了 starter，我们直接使用。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n    &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;\n    &lt;version&gt;1.1.23&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二步，在 application.yml 文件中添加 Druid 配置。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>spring:\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    druid:\n      #初始化连接池大小\n      initial-size: 5\n      #配置最小连接数\n      min-idle: 5\n      #配置最大连接数\n      max-active: 200\n      #配置连接等待超时时间\n      max-wait: 60000\n      #配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒\n      time-between-eviction-runs-millis: 60000\n      #配置一个连接在池中最小生存的时间，单位是毫秒\n      min-evictable-idle-time-millis: 300000\n      #测试连接\n      validation-query: SELECT 1 FROM DUAL\n      #申请连接的时候检测，建议配置为true，不影响性能，并且保证安全\n      test-while-idle: true\n      #获取连接时执行检测，建议关闭，影响性能\n      test-on-borrow: false\n      #归还连接时执行检测，建议关闭，影响性能\n      test-on-return: false\n      #是否开启PSCache，PSCache对支持游标的数据库性能提升巨大，oracle建议开启，mysql下建议关闭\n      pool-prepared-statements: false\n      #开启poolPreparedStatements后生效\n      max-pool-prepared-statement-per-connection-size: 20\n      #配置扩展插件，常用的插件有=&gt;stat:监控统计  log4j:日志  wall:防御sql注入\n      filters: stat,wall,slf4j\n      #打开mergeSql功能；慢SQL记录\n      connection-properties: druid.stat.mergeSql\\=true;druid.stat.slowSqlMillis\\=5000\n      #配置DruidStatFilter\n      web-stat-filter:\n        enabled: true\n        url-pattern: &quot;/*&quot;\n        exclusions: &quot;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&quot;\n      #配置DruidStatViewServlet\n      stat-view-servlet:\n        url-pattern: &quot;/druid/*&quot;\n        #登录名\n        login-username: root\n        #登录密码\n        login-password: root\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第三步，重启项目。在日志信息里可以看到 Druid 的初始化信息。</p><p><img src="https://cdn.jsdelivr.net/gh/thinkingme/thinkingme.github.io@master/images/springboot/mysql-druid-06115c50-5741-482f-b5c0-45c55017098f.png" alt="" loading="lazy"></p><p>第四步，通过 <code>http://localhost:9002/druid/</code> 地址就可以在浏览器访问 Druid 的监控页面了，用户名和密码是我们在配置文件里指定的 root 和 root，登录后是这样的。</p><p><img src="https://cdn.jsdelivr.net/gh/thinkingme/thinkingme.github.io@master/images/springboot/mysql-druid-daaf401e-e4c4-4057-9b3b-d605eefb6eb3.png" alt="" loading="lazy"></p><p>更多关于监控的配置信息，可以到 Druid 的 GitHub 仓库查看。</p>',16),C={href:"https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98",target:"_blank",rel:"noopener noreferrer"},N=(0,a.Uk)("https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98"),R=(0,a._)("p",null,[(0,a._)("img",{src:"https://cdn.jsdelivr.net/gh/thinkingme/thinkingme.github.io@master/images/springboot/mysql-druid-a5db84fc-1030-4a38-824d-4e649ad2b768.png",alt:"",loading:"lazy"})],-1),O=(0,a._)("h3",{id:"源码地址",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#源码地址","aria-hidden":"true"},"#"),(0,a.Uk)(" 源码地址")],-1),W=(0,a.Uk)("编程喵 GitHub："),J={href:"https://github.com/itwanger/coding-more",target:"_blank",rel:"noopener noreferrer"},P=(0,a.Uk)("https://github.com/itwanger/coding-more"),F=(0,a.Uk)("codingmore-learn："),H={href:"https://github.com/itwanger/codingmore-learning",target:"_blank",rel:"noopener noreferrer"},Z=(0,a.Uk)("https://github.com/itwanger/codingmore-learning"),G=(0,a._)("hr",null,null,-1),Y=(0,a._)("p",null,[(0,a._)("img",{src:"https://cdn.jsdelivr.net/gh/thinkingme/thinkingme.github.io@master/images/xingbiaogongzhonghao.png",alt:"",loading:"lazy"})],-1),K={},V=(0,e(13860).Z)(K,[["render",function(n,s){const e=(0,a.up)("ExternalLinkIcon");return(0,a.wg)(),(0,a.iD)("div",null,[i,(0,a._)("blockquote",null,[(0,a._)("p",null,[(0,a._)("a",t,[l,(0,a.Wm)(e)])])]),o,r,(0,a._)("blockquote",null,[(0,a._)("p",null,[(0,a._)("a",p,[d,(0,a.Wm)(e)])])]),c,(0,a._)("blockquote",null,[(0,a._)("p",null,[u,(0,a._)("a",m,[g,(0,a.Wm)(e)])])]),v,b,h,k,(0,a._)("blockquote",null,[(0,a._)("p",null,[(0,a._)("a",y,[f,(0,a.Wm)(e)])])]),S,(0,a._)("blockquote",null,[(0,a._)("p",null,[(0,a._)("a",q,[_,(0,a.Wm)(e)])])]),w,L,j,x,M,Q,(0,a._)("p",null,[D,(0,a._)("a",I,[E,(0,a.Wm)(e)]),U]),T,(0,a._)("blockquote",null,[(0,a._)("p",null,[(0,a._)("a",z,[B,(0,a.Wm)(e)])])]),A,(0,a._)("blockquote",null,[(0,a._)("p",null,[(0,a._)("a",C,[N,(0,a.Wm)(e)])])]),R,O,(0,a._)("blockquote",null,[(0,a._)("ul",null,[(0,a._)("li",null,[W,(0,a._)("a",J,[P,(0,a.Wm)(e)])]),(0,a._)("li",null,[F,(0,a._)("a",H,[Z,(0,a.Wm)(e)])])])]),G,Y])}]])},13860:(n,s)=>{s.Z=(n,s)=>{const e=n.__vccOpts||n;for(const[n,a]of s)e[n]=a;return e}}}]);