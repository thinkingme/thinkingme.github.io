"use strict";(self.webpackChunkcoding_road=self.webpackChunkcoding_road||[]).push([[6963],{46855:(e,i,l)=>{l.r(i),l.d(i,{data:()=>a});const a={key:"v-11e728d2",path:"/coding-road/dev-tools/packaging-tool/gradle/basic.html",title:"Gradle",lang:"zh-CN",frontmatter:{summary:"Gradle 运行gradle gradleuserhome 文件结构; 全局设置gradleuserhome; window可以在 环境变量中配置。 这样配置后，使用gradle wrapper的下载的内容都会存在这个文件夹中。方便查找 wrapper 下载对应版本的gradle。防止gradle 版本不一致导致的问题，主要配置是在wrapper底下的gr",head:[["meta",{property:"og:url",content:"https://vuepress-theme-hope-v2-demo.mrhope.site/coding-road/dev-tools/packaging-tool/gradle/basic.html"}],["meta",{property:"og:site_name",content:"coding-rode"}],["meta",{property:"og:title",content:"Gradle"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-12-13T02:10:16.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:modified_time",content:"2022-12-13T02:10:16.000Z"}]]},excerpt:"",headers:[{level:2,title:"运行gradle",slug:"运行gradle",children:[{level:3,title:"gradle_user_home",slug:"gradle-user-home",children:[]},{level:3,title:"wrapper",slug:"wrapper",children:[]},{level:3,title:"daemon（守护进程）",slug:"daemon-守护进程",children:[]},{level:3,title:"常见命令",slug:"常见命令",children:[]}]},{level:2,title:"编写 gradle构建",slug:"编写-gradle构建",children:[{level:3,title:"gradle生命周期",slug:"gradle生命周期",children:[]},{level:3,title:"动态改变Task依赖关系",slug:"动态改变task依赖关系",children:[]},{level:3,title:"插件编写",slug:"插件编写",children:[]}]}],git:{createdTime:1670897416e3,updatedTime:1670897416e3,contributors:[{name:"thinkingme",email:"linzhenhuigg@gmail.com",commits:1}]},readingTime:{minutes:4.22,words:1266},filePathRelative:"coding-road/dev-tools/packaging-tool/gradle/basic.md"}},27582:(e,i,l)=>{l.r(i),l.d(i,{default:()=>x});var a=l(95393);const n=(0,a.uE)('<h1 id="gradle" tabindex="-1"><a class="header-anchor" href="#gradle" aria-hidden="true">#</a> Gradle</h1><h2 id="运行gradle" tabindex="-1"><a class="header-anchor" href="#运行gradle" aria-hidden="true">#</a> 运行gradle</h2><h3 id="gradle-user-home" tabindex="-1"><a class="header-anchor" href="#gradle-user-home" aria-hidden="true">#</a> gradle_user_home</h3><ul><li>文件结构</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>.tmp\nbuild-scan-data\ncaches  底下的\\modules-2\\files-2.1 --&gt;类似maven 的.m2文件夹\ndaemon\njdks\nnative\nnotifications\nworkers\nwrapper\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>全局设置gradle_user_home</li></ul><p>window可以在 环境变量中配置。</p><p><img src="assert/basic/image-20220606152623081.png" alt="image-20220606152623081" loading="lazy"></p><p>这样配置后，使用gradle wrapper的下载的内容都会存在这个文件夹中。方便查找</p><h3 id="wrapper" tabindex="-1"><a class="header-anchor" href="#wrapper" aria-hidden="true">#</a> wrapper</h3><p>下载对应版本的gradle。防止gradle 版本不一致导致的问题，主要配置是在wrapper底下的gradle-wrapper.properties文件中</p><p><img src="assert/basic/image-20220610134530253.png" alt="image-20220610134530253" loading="lazy"></p><p>各项属性的整体含义，如下：</p><p>（1） 去 https://services.gradle.org/distributions/gradle-6.4-bin.zip 下载gradle的6.4版本，只包含binary的版本。</p><p>（2） 下载的gradle-6.4-bin.zip存放到${GRADLE_USER_HOME}\\wrapper\\dists目录中。</p><p>（3） 解压gradle-6.4-bin.zip.</p><p><img src="assert/basic/image-20220610134250707.png" alt="image-20220610134250707" loading="lazy"></p><h3 id="daemon-守护进程" tabindex="-1"><a class="header-anchor" href="#daemon-守护进程" aria-hidden="true">#</a> daemon（守护进程）</h3><p><img src="assert/basic/image-20220605162434619.png" alt="image-20220605162434619" loading="lazy"></p><h4 id="gradle-daemon-如何使构建更快" tabindex="-1"><a class="header-anchor" href="#gradle-daemon-如何使构建更快" aria-hidden="true">#</a> Gradle Daemon 如何使构建更快</h4><p>​ Gradle 守护进程是一个<em>长期存在</em>的构建过程。在构建之间，它空闲地等待下一个构建。这有一个明显的好处，即多个构建只需要一次将 Gradle 加载到内存中，而不是每个构建一次。</p><h4 id="禁用守护程序" tabindex="-1"><a class="header-anchor" href="#禁用守护程序" aria-hidden="true">#</a> 禁用守护程序</h4><p>​ Gradle 守护程序默认启用，我们建议始终启用它。您可以通过命令行选项<code>--no-daemon</code>或添加<code>org.gradle.daemon=false</code>到您的文件来禁用长期存在的 Gradle 守护程序<code>gradle.properties</code></p><h3 id="常见命令" tabindex="-1"><a class="header-anchor" href="#常见命令" aria-hidden="true">#</a> 常见命令</h3><blockquote><p>格式</p></blockquote><p><code>gradle [taskName...] [--option-name...]</code></p><blockquote><p>多项目</p></blockquote><p><code>gradle :my-subproject:taskName</code></p><blockquote><p>设置日志级别</p></blockquote>',29),d=(0,a.Uk)("您可以使用以下选项自定义 Gradle 日志记录的详细程度，从最不详细到最详细排序。"),s={href:"https://docs.gradle.org/current/userguide/logging.html#logging",target:"_blank",rel:"noopener noreferrer"},r=(0,a.Uk)("在日志记录文档"),c=(0,a.Uk)("中了解更多信息。"),t=(0,a.uE)("<ul><li><p><code>-Dorg.gradle.logging.level=(quiet,warn,lifecycle,info,debug)</code></p><p>通过 Gradle 属性设置日志记录级别。</p></li><li><p><code>-q</code>,<code>--quiet</code></p><p>仅记录错误。</p></li><li><p><code>-w</code>,<code>--warn</code></p><p>将日志级别设置为警告。</p></li><li><p><code>-i</code>,<code>--info</code></p><p>将日志级别设置为信息。</p></li><li><p><code>-d</code>,<code>--debug</code></p></li></ul><blockquote><p>其他</p></blockquote><ul><li>列出项目依赖项</li></ul><p><code>gradle dependencies</code></p><ul><li>可视化扫描</li></ul><p><code>gradle build --scan</code></p><ul><li>列出依赖版本号管理</li></ul><p>gradle dependencyManagement</p>",8),o=(0,a.Uk)("ex: "),u={href:"https://scans.gradle.com/s/ghfzki72w6tpe",target:"_blank",rel:"noopener noreferrer"},v=(0,a.Uk)("https://scans.gradle.com/s/ghfzki72w6tpe"),m=(0,a.Uk)("官方地址 "),p={href:"https://docs.gradle.org/current/userguide/command_line_interface.html#common_tasks",target:"_blank",rel:"noopener noreferrer"},g=(0,a.Uk)("https://docs.gradle.org/current/userguide/command_line_interface.html#common_tasks"),b=(0,a.uE)('<h2 id="编写-gradle构建" tabindex="-1"><a class="header-anchor" href="#编写-gradle构建" aria-hidden="true">#</a> 编写 gradle构建</h2><h3 id="gradle生命周期" tabindex="-1"><a class="header-anchor" href="#gradle生命周期" aria-hidden="true">#</a> gradle生命周期</h3><ul><li>初始化</li></ul><p>setting.gradle 各个模块项目的实例化</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>rootProject.name = &#39;app-server-platform-launcher&#39;\n\ninclude &#39;xxx&#39;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>配置</li></ul><p>从上到下执行build.gradle 有buildscript先执行buildscript的内容</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>buildscript {\n\n}\n/**\n * 所有项目公共资源（此文件所在位置底下所有项目，包含根项目）\n */\nallprojects {\n\n}\n/**\n * 子项目通用配置\n */\nsubprojects {\n\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>执行</li></ul><p>Gradle 确定在配置阶段创建和配置的要执行的任务子集。该子集由传递给<code>gradle</code>命令和当前目录的任务名称参数确定。Gradle 然后执行每个选定的任务。（compile java）</p><p><strong>钩子函数</strong></p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/7/3/1645f7712096f3e6~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp" alt="" loading="lazy"></p><h3 id="动态改变task依赖关系" tabindex="-1"><a class="header-anchor" href="#动态改变task依赖关系" aria-hidden="true">#</a> 动态改变Task依赖关系</h3><p>有时我们需要在一个已有的构建系统中插入我们自己的构建任务，比如在执行Java构建后我们想要删除构建过程中产生的临时文件，那么我们就可以自定义一个名叫cleanTemp的任务，让其依赖于build任务，然后调用cleanTemp任务即可。 但是这种方式适用范围太小，比如在使用IDE执行构建时，IDE默认就是调用build任务，我们没法修改IDE的行为，所以我们需要将自定义的任务插入到原有的任务关系中。</p><ol><li><strong>寻找插入点</strong> 如果你对一个构建的任务依赖关系不熟悉的话，可以使用一个插件来查看，在根项目的build.gradle中添加如下代码:</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>buildscript {\n  repositories {\n    maven {\n      url &quot;https://plugins.gradle.org/m2/&quot;\n    }\n  }\n  dependencies {\n    classpath &quot;gradle.plugin.com.dorongold.plugins:task-tree:1.2.2&quot;\n  }\n}\napply plugin: &quot;com.dorongold.task-tree&quot;\n复制代码\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后执行<code>gradle &lt;任务名&gt; taskTree --no-repeat</code>，即可看到指定Task的依赖关系，比如在Java构建中查看build任务的依赖关系：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>:build\n+--- :assemble\n|    \\--- :jar\n|         \\--- :classes\n|              +--- :compileJava\n|              \\--- :processResources\n\\--- :check\n     \\--- :test\n          +--- :classes *\n          \\--- :testClasses\n               +--- :compileTestJava\n               |    \\--- :classes *\n               \\--- :processTestResources\n复制代码\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看到build主要执行了assemble包装任务和check测试任务，那么我们可以将我们自定义的cleanTemp插入到build和assemble之间。</p><ol start="2"><li><strong>动态插入自定义任务</strong> 我们先定义一个自定的任务cleanTemp，让其依赖于assemble。</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>task cleanTemp(dependsOn: assemble) {\n  doLast {\n    println &#39;清除所有临时文件&#39;\n  }\n}\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着，我们将cleanTemp添加到build的依赖项中。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>afterEvaluate {\n  build.dependsOn cleanTemp\n}\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，<strong>dependsOn方法只是添加一个依赖项，并不清除之前的依赖项</strong>，所以现在的依赖关系如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>:build\n+--- :assemble\n|    \\--- :jar\n|         \\--- :classes\n|              +--- :compileJava\n|              \\--- :processResources\n+--- :check\n|    \\--- :test\n|         +--- :classes\n|         |    +--- :compileJava\n|         |    \\--- :processResources\n|         \\--- :testClasses\n|              +--- :compileTestJava\n|              |    \\--- :classes\n|              |         +--- :compileJava\n|              |         \\--- :processResources\n|              \\--- :processTestResources\n\\--- :cleanTemp\n     \\--- :assemble\n          \\--- :jar\n               \\--- :classes\n                    +--- :compileJava\n                    \\--- :processResources\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，cleanTemp依赖于assemble，同时build任务多了一个依赖，而build和assemble原有的依赖关系并没有改变，执行<code>gradle build</code>后任务调用结果如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>:compileJava UP-TO-DATE\n:processResources UP-TO-DATE\n:classes UP-TO-DATE\n:jar UP-TO-DATE\n:assemble UP-TO-DATE\n:compileTestJava UP-TO-DATE\n:processTestResources UP-TO-DATE\n:testClasses UP-TO-DATE\n:test UP-TO-DATE\n:check UP-TO-DATE\n:cleanTemp\n清除所有临时文件\n:build\n\nBUILD SUCCESSFUL\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="插件编写" tabindex="-1"><a class="header-anchor" href="#插件编写" aria-hidden="true">#</a> 插件编写</h3><p>约定项目底下的buildSrc模块编写</p><p><img src="assert/basic/image-20220605145001886.png" alt="image-20220605145001886" loading="lazy"></p>',30),h={},x=(0,l(13860).Z)(h,[["render",function(e,i){const l=(0,a.up)("ExternalLinkIcon");return(0,a.wg)(),(0,a.iD)("div",null,[n,(0,a._)("p",null,[d,(0,a._)("a",s,[r,(0,a.Wm)(l)]),c]),t,(0,a._)("p",null,[o,(0,a._)("a",u,[v,(0,a.Wm)(l)])]),(0,a._)("p",null,[m,(0,a._)("a",p,[g,(0,a.Wm)(l)])]),b])}]])},13860:(e,i)=>{i.Z=(e,i)=>{const l=e.__vccOpts||e;for(const[e,a]of i)l[e]=a;return l}}}]);