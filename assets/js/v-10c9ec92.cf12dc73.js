"use strict";(self.webpackChunkcoding_road=self.webpackChunkcoding_road||[]).push([[7003],{80579:(t,r,o)=>{o.r(r),o.d(r,{data:()=>n});const n={key:"v-10c9ec92",path:"/coding-road/java-core/basic-grammar/48-keywords.html",title:"Java 中常用的 48 个关键字",lang:"zh-CN",frontmatter:{category:["Java核心"],tag:["Java"],summary:"Java 中常用的 48 个关键字 “二哥，就我之前学过的这些 Java 代码中，有 public、static、void、main 等等，它们应该都是关键字吧？”三妹的脸上泛着甜甜的笑容，我想她在学习 Java 方面已经变得越来越自信了。 “是的，三妹。Java 中的关键字可不少呢！你一下子可能记不了那么多，不过，先保留个印象吧，对以后的学习会很有帮助。”",head:[["meta",{property:"og:url",content:"https://vuepress-theme-hope-v2-demo.mrhope.site/coding-road/java-core/basic-grammar/48-keywords.html"}],["meta",{property:"og:site_name",content:"coding-rode"}],["meta",{property:"og:title",content:"Java 中常用的 48 个关键字"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:updated_time",content:"2022-06-04T07:20:53.000Z"}],["meta",{property:"og:locale",content:"zh-CN"}],["meta",{property:"article:tag",content:"Java"}],["meta",{property:"article:modified_time",content:"2022-06-04T07:20:53.000Z"}]]},excerpt:"",headers:[],git:{createdTime:1653617096e3,updatedTime:1654327253e3,contributors:[{name:"林振辉",email:"linzhenhui@apexsoft.com",commits:2}]},readingTime:{minutes:3.97,words:1192},filePathRelative:"coding-road/java-core/basic-grammar/48-keywords.md"}},63251:(t,r,o)=>{o.r(r),o.d(r,{default:()=>y});var n=o(95393);const i=(0,n._)("h1",{id:"java-中常用的-48-个关键字",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#java-中常用的-48-个关键字","aria-hidden":"true"},"#"),(0,n.Uk)(" Java 中常用的 48 个关键字")],-1),l=(0,n._)("p",null,"“二哥，就我之前学过的这些 Java 代码中，有 public、static、void、main 等等，它们应该都是关键字吧？”三妹的脸上泛着甜甜的笑容，我想她在学习 Java 方面已经变得越来越自信了。",-1),s=(0,n._)("p",null,"“是的，三妹。Java 中的关键字可不少呢！你一下子可能记不了那么多，不过，先保留个印象吧，对以后的学习会很有帮助。”",-1),e=(0,n._)("p",null,"PS：按照首字母的自然顺序排列。",-1),p=(0,n.uE)("<li><p><strong>abstract：</strong> 用于声明抽象类，以及抽象方法。</p></li><li><p><strong>boolean：</strong> 用于将变量声明为布尔值类型，只有 true 和 false 两个值。</p></li><li><p><strong>break：</strong> 用于中断循环或 switch 语句。</p></li><li><p><strong>byte：</strong> 用于声明一个可以容纳 8 个比特的变量。</p></li><li><p><strong>case：</strong> 用于在 switch 语句中标记条件的值。</p></li><li><p><strong>catch：</strong> 用于捕获 try 语句中的异常。</p></li>",6),a=(0,n._)("strong",null,"char：",-1),g=(0,n.Uk)(" 用于声明一个可以容纳无符号 16 位比特的 "),c={href:"https://mp.weixin.qq.com/s/pNQjlXOivIgO3pbYc0GnpA",target:"_blank",rel:"noopener noreferrer"},d=(0,n.Uk)("Unicode 字符"),m=(0,n.Uk)("的变量。"),u=(0,n.uE)("<li><p><strong>class：</strong> 用于声明一个类。</p></li><li><p><strong>continue：</strong> 用于继续下一个循环，可以在指定条件下跳过其余代码。</p></li><li><p><strong>default：</strong> 用于指定 switch 语句中除去 case 条件之外的默认代码块。</p></li><li><p><strong>do：</strong> 通常和 while 关键字配合使用，do 后紧跟循环体。</p></li><li><p><strong>double：</strong> 用于声明一个可以容纳 64 位浮点数的变量。</p></li><li><p><strong>else：</strong> 用于指示 if 语句中的备用分支。</p></li><li><p><strong>enum：</strong> 用于定义一组固定的常量（枚举）。</p></li><li><p><strong>extends：</strong> 用于指示一个类是从另一个类或接口继承的。</p></li><li><p><strong>final：</strong> 用于指示该变量是不可更改的。</p></li><li><p><strong>finally：</strong> 和 <code>try-catch</code> 配合使用，表示无论是否处理异常，总是执行 finally 块中的代码。</p></li><li><p><strong>float：</strong> 用于声明一个可以容纳 32 位浮点数的变量。</p></li><li><p><strong>for：</strong> 用于声明一个 for 循环，如果循环次数是固定的，建议使用 for 循环。</p></li><li><p><strong>if：</strong> 用于指定条件，如果条件为真，则执行对应代码。</p></li><li><p><strong>implements：</strong> 用于实现接口。</p></li><li><p><strong>import：</strong> 用于导入对应的类或者接口。</p></li><li><p><strong>instanceof：</strong> 用于判断对象是否属于某个类型（class）。</p></li><li><p><strong>int：</strong> 用于声明一个可以容纳 32 位带符号的整数变量。</p></li><li><p><strong>interface：</strong> 用于声明接口。</p></li><li><p><strong>long：</strong> 用于声明一个可以容纳 64 位整数的变量。</p></li><li><p><strong>native：</strong> 用于指定一个方法是通过调用本机接口（非 Java）实现的。</p></li><li><p><strong>new：</strong> 用于创建一个新的对象。</p></li><li><p><strong>null：</strong> 如果一个变量是空的（什么引用也没有指向），就可以将它赋值为 null，和空指针异常息息相关。</p></li><li><p><strong>package：</strong> 用于声明类所在的包。</p></li><li><p><strong>private：</strong> 一个访问权限修饰符，表示方法或变量只对当前类可见。</p></li><li><p><strong>protected：</strong> 一个访问权限修饰符，表示方法或变量对同一包内的类和所有子类可见。</p></li><li><p><strong>public：</strong> 一个访问权限修饰符，除了可以声明方法和变量（所有类可见），还可以声明类。<code>main()</code> 方法必须声明为 public。</p></li><li><p><strong>return：</strong> 用于在代码执行完成后返回（一个值）。</p></li><li><p><strong>short：</strong> 用于声明一个可以容纳 16 位整数的变量。</p></li><li><p><strong>static：</strong> 表示该变量或方法是静态变量或静态方法。</p></li><li><p><strong>strictfp：</strong> 并不常见，通常用于修饰一个方法，确保方法体内的浮点数运算在每个平台上执行的结果相同。</p></li><li><p><strong>super：</strong> 可用于调用父类的方法或者字段。</p></li><li><p><strong>switch：</strong> 通常用于三个（以上）的条件判断。</p></li><li><p><strong>synchronized：</strong> 用于指定多线程代码中的同步方法、变量或者代码块。</p></li><li><p><strong>this：</strong> 可用于在方法或构造函数中引用当前对象。</p></li><li><p><strong>throw：</strong> 主动抛出异常。</p></li><li><p><strong>throws：</strong> 用于声明异常。</p></li><li><p><strong>transient：</strong> 修饰的字段不会被序列化。</p></li><li><p><strong>try：</strong> 于包裹要捕获异常的代码块。</p></li><li><p><strong>void：</strong> 用于指定方法没有返回值。</p></li><li><p><strong>volatile：</strong> 保证不同线程对它修饰的变量进行操作时的可见性，即一个线程修改了某个变量的值，新值对其他线程来说是立即可见的。</p></li><li><p><strong>while：</strong> 如果循环次数不固定，建议使用 while 循环。</p></li>",41),h=(0,n._)("p",null,"“好了，三妹，关于 Java 中的关键字就先说这 48 个吧，这只是一个大概的介绍，后面还会对一些特殊的关键字单独拎出来详细地讲，比如说重要的 static、final 等。”转动了一下僵硬的脖子后，我对三妹说。",-1),v=(0,n._)("p",null,"“二哥，你辛苦了，足足 48 个啊，容我好好消化一下。”",-1),f=(0,n._)("p",null,[(0,n._)("img",{src:"http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/xingbiaogongzhonghao.png",alt:"",loading:"lazy"})],-1),b={},y=(0,o(13860).Z)(b,[["render",function(t,r){const o=(0,n.up)("ExternalLinkIcon");return(0,n.wg)(),(0,n.iD)("div",null,[i,l,s,e,(0,n._)("ol",null,[p,(0,n._)("li",null,[(0,n._)("p",null,[a,g,(0,n._)("a",c,[d,(0,n.Wm)(o)]),m])]),u]),h,v,f])}]])},13860:(t,r)=>{r.Z=(t,r)=>{const o=t.__vccOpts||t;for(const[t,n]of r)o[t]=n;return o}}}]);